
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000502c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051d0  080051d0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051d8  080051d8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051d8  080051d8  000151d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051dc  080051dc  000151dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080051e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000940  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009bc  200009bc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019204  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bd0  00000000  00000000  000392f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000010a0  00000000  00000000  0003cec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ceb  00000000  00000000  0003df68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153a2  00000000  00000000  0003ec53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000571d  00000000  00000000  00053ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000032d0  00000000  00000000  00059714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0000a18b  00000000  00000000  0005c9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00066b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800519c 	.word	0x0800519c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800519c 	.word	0x0800519c

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2f>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800079c:	bf24      	itt	cs
 800079e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007a6:	d90d      	bls.n	80007c4 <__aeabi_d2f+0x30>
 80007a8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007b4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007bc:	bf08      	it	eq
 80007be:	f020 0001 	biceq.w	r0, r0, #1
 80007c2:	4770      	bx	lr
 80007c4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007c8:	d121      	bne.n	800080e <__aeabi_d2f+0x7a>
 80007ca:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007ce:	bfbc      	itt	lt
 80007d0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	4770      	bxlt	lr
 80007d6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007de:	f1c2 0218 	rsb	r2, r2, #24
 80007e2:	f1c2 0c20 	rsb	ip, r2, #32
 80007e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80007ea:	fa20 f002 	lsr.w	r0, r0, r2
 80007ee:	bf18      	it	ne
 80007f0:	f040 0001 	orrne.w	r0, r0, #1
 80007f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000800:	ea40 000c 	orr.w	r0, r0, ip
 8000804:	fa23 f302 	lsr.w	r3, r3, r2
 8000808:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800080c:	e7cc      	b.n	80007a8 <__aeabi_d2f+0x14>
 800080e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000812:	d107      	bne.n	8000824 <__aeabi_d2f+0x90>
 8000814:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000818:	bf1e      	ittt	ne
 800081a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800081e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000822:	4770      	bxne	lr
 8000824:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000828:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800082c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop

08000834 <__aeabi_uldivmod>:
 8000834:	b953      	cbnz	r3, 800084c <__aeabi_uldivmod+0x18>
 8000836:	b94a      	cbnz	r2, 800084c <__aeabi_uldivmod+0x18>
 8000838:	2900      	cmp	r1, #0
 800083a:	bf08      	it	eq
 800083c:	2800      	cmpeq	r0, #0
 800083e:	bf1c      	itt	ne
 8000840:	f04f 31ff 	movne.w	r1, #4294967295
 8000844:	f04f 30ff 	movne.w	r0, #4294967295
 8000848:	f000 b970 	b.w	8000b2c <__aeabi_idiv0>
 800084c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000850:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000854:	f000 f806 	bl	8000864 <__udivmoddi4>
 8000858:	f8dd e004 	ldr.w	lr, [sp, #4]
 800085c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000860:	b004      	add	sp, #16
 8000862:	4770      	bx	lr

08000864 <__udivmoddi4>:
 8000864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000868:	9e08      	ldr	r6, [sp, #32]
 800086a:	460d      	mov	r5, r1
 800086c:	4604      	mov	r4, r0
 800086e:	460f      	mov	r7, r1
 8000870:	2b00      	cmp	r3, #0
 8000872:	d14a      	bne.n	800090a <__udivmoddi4+0xa6>
 8000874:	428a      	cmp	r2, r1
 8000876:	4694      	mov	ip, r2
 8000878:	d965      	bls.n	8000946 <__udivmoddi4+0xe2>
 800087a:	fab2 f382 	clz	r3, r2
 800087e:	b143      	cbz	r3, 8000892 <__udivmoddi4+0x2e>
 8000880:	fa02 fc03 	lsl.w	ip, r2, r3
 8000884:	f1c3 0220 	rsb	r2, r3, #32
 8000888:	409f      	lsls	r7, r3
 800088a:	fa20 f202 	lsr.w	r2, r0, r2
 800088e:	4317      	orrs	r7, r2
 8000890:	409c      	lsls	r4, r3
 8000892:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000896:	fa1f f58c 	uxth.w	r5, ip
 800089a:	fbb7 f1fe 	udiv	r1, r7, lr
 800089e:	0c22      	lsrs	r2, r4, #16
 80008a0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008a4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008a8:	fb01 f005 	mul.w	r0, r1, r5
 80008ac:	4290      	cmp	r0, r2
 80008ae:	d90a      	bls.n	80008c6 <__udivmoddi4+0x62>
 80008b0:	eb1c 0202 	adds.w	r2, ip, r2
 80008b4:	f101 37ff 	add.w	r7, r1, #4294967295
 80008b8:	f080 811c 	bcs.w	8000af4 <__udivmoddi4+0x290>
 80008bc:	4290      	cmp	r0, r2
 80008be:	f240 8119 	bls.w	8000af4 <__udivmoddi4+0x290>
 80008c2:	3902      	subs	r1, #2
 80008c4:	4462      	add	r2, ip
 80008c6:	1a12      	subs	r2, r2, r0
 80008c8:	b2a4      	uxth	r4, r4
 80008ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80008ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80008d2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80008d6:	fb00 f505 	mul.w	r5, r0, r5
 80008da:	42a5      	cmp	r5, r4
 80008dc:	d90a      	bls.n	80008f4 <__udivmoddi4+0x90>
 80008de:	eb1c 0404 	adds.w	r4, ip, r4
 80008e2:	f100 32ff 	add.w	r2, r0, #4294967295
 80008e6:	f080 8107 	bcs.w	8000af8 <__udivmoddi4+0x294>
 80008ea:	42a5      	cmp	r5, r4
 80008ec:	f240 8104 	bls.w	8000af8 <__udivmoddi4+0x294>
 80008f0:	4464      	add	r4, ip
 80008f2:	3802      	subs	r0, #2
 80008f4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	2100      	movs	r1, #0
 80008fc:	b11e      	cbz	r6, 8000906 <__udivmoddi4+0xa2>
 80008fe:	40dc      	lsrs	r4, r3
 8000900:	2300      	movs	r3, #0
 8000902:	e9c6 4300 	strd	r4, r3, [r6]
 8000906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800090a:	428b      	cmp	r3, r1
 800090c:	d908      	bls.n	8000920 <__udivmoddi4+0xbc>
 800090e:	2e00      	cmp	r6, #0
 8000910:	f000 80ed 	beq.w	8000aee <__udivmoddi4+0x28a>
 8000914:	2100      	movs	r1, #0
 8000916:	e9c6 0500 	strd	r0, r5, [r6]
 800091a:	4608      	mov	r0, r1
 800091c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000920:	fab3 f183 	clz	r1, r3
 8000924:	2900      	cmp	r1, #0
 8000926:	d149      	bne.n	80009bc <__udivmoddi4+0x158>
 8000928:	42ab      	cmp	r3, r5
 800092a:	d302      	bcc.n	8000932 <__udivmoddi4+0xce>
 800092c:	4282      	cmp	r2, r0
 800092e:	f200 80f8 	bhi.w	8000b22 <__udivmoddi4+0x2be>
 8000932:	1a84      	subs	r4, r0, r2
 8000934:	eb65 0203 	sbc.w	r2, r5, r3
 8000938:	2001      	movs	r0, #1
 800093a:	4617      	mov	r7, r2
 800093c:	2e00      	cmp	r6, #0
 800093e:	d0e2      	beq.n	8000906 <__udivmoddi4+0xa2>
 8000940:	e9c6 4700 	strd	r4, r7, [r6]
 8000944:	e7df      	b.n	8000906 <__udivmoddi4+0xa2>
 8000946:	b902      	cbnz	r2, 800094a <__udivmoddi4+0xe6>
 8000948:	deff      	udf	#255	; 0xff
 800094a:	fab2 f382 	clz	r3, r2
 800094e:	2b00      	cmp	r3, #0
 8000950:	f040 8090 	bne.w	8000a74 <__udivmoddi4+0x210>
 8000954:	1a8a      	subs	r2, r1, r2
 8000956:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800095a:	fa1f fe8c 	uxth.w	lr, ip
 800095e:	2101      	movs	r1, #1
 8000960:	fbb2 f5f7 	udiv	r5, r2, r7
 8000964:	fb07 2015 	mls	r0, r7, r5, r2
 8000968:	0c22      	lsrs	r2, r4, #16
 800096a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800096e:	fb0e f005 	mul.w	r0, lr, r5
 8000972:	4290      	cmp	r0, r2
 8000974:	d908      	bls.n	8000988 <__udivmoddi4+0x124>
 8000976:	eb1c 0202 	adds.w	r2, ip, r2
 800097a:	f105 38ff 	add.w	r8, r5, #4294967295
 800097e:	d202      	bcs.n	8000986 <__udivmoddi4+0x122>
 8000980:	4290      	cmp	r0, r2
 8000982:	f200 80cb 	bhi.w	8000b1c <__udivmoddi4+0x2b8>
 8000986:	4645      	mov	r5, r8
 8000988:	1a12      	subs	r2, r2, r0
 800098a:	b2a4      	uxth	r4, r4
 800098c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000990:	fb07 2210 	mls	r2, r7, r0, r2
 8000994:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000998:	fb0e fe00 	mul.w	lr, lr, r0
 800099c:	45a6      	cmp	lr, r4
 800099e:	d908      	bls.n	80009b2 <__udivmoddi4+0x14e>
 80009a0:	eb1c 0404 	adds.w	r4, ip, r4
 80009a4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009a8:	d202      	bcs.n	80009b0 <__udivmoddi4+0x14c>
 80009aa:	45a6      	cmp	lr, r4
 80009ac:	f200 80bb 	bhi.w	8000b26 <__udivmoddi4+0x2c2>
 80009b0:	4610      	mov	r0, r2
 80009b2:	eba4 040e 	sub.w	r4, r4, lr
 80009b6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ba:	e79f      	b.n	80008fc <__udivmoddi4+0x98>
 80009bc:	f1c1 0720 	rsb	r7, r1, #32
 80009c0:	408b      	lsls	r3, r1
 80009c2:	fa22 fc07 	lsr.w	ip, r2, r7
 80009c6:	ea4c 0c03 	orr.w	ip, ip, r3
 80009ca:	fa05 f401 	lsl.w	r4, r5, r1
 80009ce:	fa20 f307 	lsr.w	r3, r0, r7
 80009d2:	40fd      	lsrs	r5, r7
 80009d4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d8:	4323      	orrs	r3, r4
 80009da:	fbb5 f8f9 	udiv	r8, r5, r9
 80009de:	fa1f fe8c 	uxth.w	lr, ip
 80009e2:	fb09 5518 	mls	r5, r9, r8, r5
 80009e6:	0c1c      	lsrs	r4, r3, #16
 80009e8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ec:	fb08 f50e 	mul.w	r5, r8, lr
 80009f0:	42a5      	cmp	r5, r4
 80009f2:	fa02 f201 	lsl.w	r2, r2, r1
 80009f6:	fa00 f001 	lsl.w	r0, r0, r1
 80009fa:	d90b      	bls.n	8000a14 <__udivmoddi4+0x1b0>
 80009fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000a00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a04:	f080 8088 	bcs.w	8000b18 <__udivmoddi4+0x2b4>
 8000a08:	42a5      	cmp	r5, r4
 8000a0a:	f240 8085 	bls.w	8000b18 <__udivmoddi4+0x2b4>
 8000a0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a12:	4464      	add	r4, ip
 8000a14:	1b64      	subs	r4, r4, r5
 8000a16:	b29d      	uxth	r5, r3
 8000a18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a28:	45a6      	cmp	lr, r4
 8000a2a:	d908      	bls.n	8000a3e <__udivmoddi4+0x1da>
 8000a2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a34:	d26c      	bcs.n	8000b10 <__udivmoddi4+0x2ac>
 8000a36:	45a6      	cmp	lr, r4
 8000a38:	d96a      	bls.n	8000b10 <__udivmoddi4+0x2ac>
 8000a3a:	3b02      	subs	r3, #2
 8000a3c:	4464      	add	r4, ip
 8000a3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a42:	fba3 9502 	umull	r9, r5, r3, r2
 8000a46:	eba4 040e 	sub.w	r4, r4, lr
 8000a4a:	42ac      	cmp	r4, r5
 8000a4c:	46c8      	mov	r8, r9
 8000a4e:	46ae      	mov	lr, r5
 8000a50:	d356      	bcc.n	8000b00 <__udivmoddi4+0x29c>
 8000a52:	d053      	beq.n	8000afc <__udivmoddi4+0x298>
 8000a54:	b156      	cbz	r6, 8000a6c <__udivmoddi4+0x208>
 8000a56:	ebb0 0208 	subs.w	r2, r0, r8
 8000a5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a62:	40ca      	lsrs	r2, r1
 8000a64:	40cc      	lsrs	r4, r1
 8000a66:	4317      	orrs	r7, r2
 8000a68:	e9c6 7400 	strd	r7, r4, [r6]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	2100      	movs	r1, #0
 8000a70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a74:	f1c3 0120 	rsb	r1, r3, #32
 8000a78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a80:	fa25 f101 	lsr.w	r1, r5, r1
 8000a84:	409d      	lsls	r5, r3
 8000a86:	432a      	orrs	r2, r5
 8000a88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a8c:	fa1f fe8c 	uxth.w	lr, ip
 8000a90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a94:	fb07 1510 	mls	r5, r7, r0, r1
 8000a98:	0c11      	lsrs	r1, r2, #16
 8000a9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000aa2:	428d      	cmp	r5, r1
 8000aa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000aa8:	d908      	bls.n	8000abc <__udivmoddi4+0x258>
 8000aaa:	eb1c 0101 	adds.w	r1, ip, r1
 8000aae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ab2:	d22f      	bcs.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab4:	428d      	cmp	r5, r1
 8000ab6:	d92d      	bls.n	8000b14 <__udivmoddi4+0x2b0>
 8000ab8:	3802      	subs	r0, #2
 8000aba:	4461      	add	r1, ip
 8000abc:	1b49      	subs	r1, r1, r5
 8000abe:	b292      	uxth	r2, r2
 8000ac0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ac4:	fb07 1115 	mls	r1, r7, r5, r1
 8000ac8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000acc:	fb05 f10e 	mul.w	r1, r5, lr
 8000ad0:	4291      	cmp	r1, r2
 8000ad2:	d908      	bls.n	8000ae6 <__udivmoddi4+0x282>
 8000ad4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ad8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000adc:	d216      	bcs.n	8000b0c <__udivmoddi4+0x2a8>
 8000ade:	4291      	cmp	r1, r2
 8000ae0:	d914      	bls.n	8000b0c <__udivmoddi4+0x2a8>
 8000ae2:	3d02      	subs	r5, #2
 8000ae4:	4462      	add	r2, ip
 8000ae6:	1a52      	subs	r2, r2, r1
 8000ae8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aec:	e738      	b.n	8000960 <__udivmoddi4+0xfc>
 8000aee:	4631      	mov	r1, r6
 8000af0:	4630      	mov	r0, r6
 8000af2:	e708      	b.n	8000906 <__udivmoddi4+0xa2>
 8000af4:	4639      	mov	r1, r7
 8000af6:	e6e6      	b.n	80008c6 <__udivmoddi4+0x62>
 8000af8:	4610      	mov	r0, r2
 8000afa:	e6fb      	b.n	80008f4 <__udivmoddi4+0x90>
 8000afc:	4548      	cmp	r0, r9
 8000afe:	d2a9      	bcs.n	8000a54 <__udivmoddi4+0x1f0>
 8000b00:	ebb9 0802 	subs.w	r8, r9, r2
 8000b04:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	e7a3      	b.n	8000a54 <__udivmoddi4+0x1f0>
 8000b0c:	4645      	mov	r5, r8
 8000b0e:	e7ea      	b.n	8000ae6 <__udivmoddi4+0x282>
 8000b10:	462b      	mov	r3, r5
 8000b12:	e794      	b.n	8000a3e <__udivmoddi4+0x1da>
 8000b14:	4640      	mov	r0, r8
 8000b16:	e7d1      	b.n	8000abc <__udivmoddi4+0x258>
 8000b18:	46d0      	mov	r8, sl
 8000b1a:	e77b      	b.n	8000a14 <__udivmoddi4+0x1b0>
 8000b1c:	3d02      	subs	r5, #2
 8000b1e:	4462      	add	r2, ip
 8000b20:	e732      	b.n	8000988 <__udivmoddi4+0x124>
 8000b22:	4608      	mov	r0, r1
 8000b24:	e70a      	b.n	800093c <__udivmoddi4+0xd8>
 8000b26:	4464      	add	r4, ip
 8000b28:	3802      	subs	r0, #2
 8000b2a:	e742      	b.n	80009b2 <__udivmoddi4+0x14e>

08000b2c <__aeabi_idiv0>:
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop

08000b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b34:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b36:	2400      	movs	r4, #0
 8000b38:	9407      	str	r4, [sp, #28]
 8000b3a:	9408      	str	r4, [sp, #32]
 8000b3c:	9409      	str	r4, [sp, #36]	; 0x24
 8000b3e:	940a      	str	r4, [sp, #40]	; 0x28
 8000b40:	940b      	str	r4, [sp, #44]	; 0x2c
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b42:	9401      	str	r4, [sp, #4]
 8000b44:	4b56      	ldr	r3, [pc, #344]	; (8000ca0 <MX_GPIO_Init+0x170>)
 8000b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b48:	f042 0210 	orr.w	r2, r2, #16
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b50:	f002 0210 	and.w	r2, r2, #16
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b58:	9402      	str	r4, [sp, #8]
 8000b5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5c:	f042 0204 	orr.w	r2, r2, #4
 8000b60:	631a      	str	r2, [r3, #48]	; 0x30
 8000b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b64:	f002 0204 	and.w	r2, r2, #4
 8000b68:	9202      	str	r2, [sp, #8]
 8000b6a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6c:	9403      	str	r4, [sp, #12]
 8000b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b74:	631a      	str	r2, [r3, #48]	; 0x30
 8000b76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b78:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000b7c:	9203      	str	r2, [sp, #12]
 8000b7e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	9404      	str	r4, [sp, #16]
 8000b82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b84:	f042 0201 	orr.w	r2, r2, #1
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
 8000b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b8c:	f002 0201 	and.w	r2, r2, #1
 8000b90:	9204      	str	r2, [sp, #16]
 8000b92:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b94:	9405      	str	r4, [sp, #20]
 8000b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b98:	f042 0202 	orr.w	r2, r2, #2
 8000b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba0:	f002 0202 	and.w	r2, r2, #2
 8000ba4:	9205      	str	r2, [sp, #20]
 8000ba6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba8:	9406      	str	r4, [sp, #24]
 8000baa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bac:	f042 0208 	orr.w	r2, r2, #8
 8000bb0:	631a      	str	r2, [r3, #48]	; 0x30
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0308 	and.w	r3, r3, #8
 8000bb8:	9306      	str	r3, [sp, #24]
 8000bba:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000bbc:	4e39      	ldr	r6, [pc, #228]	; (8000ca4 <MX_GPIO_Init+0x174>)
 8000bbe:	4622      	mov	r2, r4
 8000bc0:	2108      	movs	r1, #8
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	f000 fcbc 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000bc8:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8000cac <MX_GPIO_Init+0x17c>
 8000bcc:	2201      	movs	r2, #1
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4648      	mov	r0, r9
 8000bd2:	f000 fcb5 	bl	8001540 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000bd6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8000cb0 <MX_GPIO_Init+0x180>
 8000bda:	4622      	mov	r2, r4
 8000bdc:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000be0:	4640      	mov	r0, r8
 8000be2:	f000 fcad 	bl	8001540 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000be6:	2708      	movs	r7, #8
 8000be8:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2501      	movs	r5, #1
 8000bec:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	a907      	add	r1, sp, #28
 8000bf4:	4630      	mov	r0, r6
 8000bf6:	f000 fbad 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000bfa:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c02:	a907      	add	r1, sp, #28
 8000c04:	4648      	mov	r0, r9
 8000c06:	f000 fba5 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c0a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	2702      	movs	r7, #2
 8000c0e:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c12:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c14:	f04f 0a05 	mov.w	sl, #5
 8000c18:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	a907      	add	r1, sp, #28
 8000c1e:	4648      	mov	r0, r9
 8000c20:	f000 fb98 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c24:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c26:	f44f 1990 	mov.w	r9, #1179648	; 0x120000
 8000c2a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c30:	a907      	add	r1, sp, #28
 8000c32:	481d      	ldr	r0, [pc, #116]	; (8000ca8 <MX_GPIO_Init+0x178>)
 8000c34:	f000 fb8e 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f8df b070 	ldr.w	fp, [pc, #112]	; 8000cb4 <MX_GPIO_Init+0x184>
 8000c44:	a907      	add	r1, sp, #28
 8000c46:	4658      	mov	r0, fp
 8000c48:	f000 fb84 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c50:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c52:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c58:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	a907      	add	r1, sp, #28
 8000c5e:	4658      	mov	r0, fp
 8000c60:	f000 fb78 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c64:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c68:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c70:	a907      	add	r1, sp, #28
 8000c72:	4640      	mov	r0, r8
 8000c74:	f000 fb6e 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c78:	2320      	movs	r3, #32
 8000c7a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c80:	a907      	add	r1, sp, #28
 8000c82:	4640      	mov	r0, r8
 8000c84:	f000 fb66 	bl	8001354 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c88:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c8a:	f8cd 9020 	str.w	r9, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c90:	a907      	add	r1, sp, #28
 8000c92:	4630      	mov	r0, r6
 8000c94:	f000 fb5e 	bl	8001354 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c98:	b00d      	add	sp, #52	; 0x34
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40020000 	.word	0x40020000
 8000cac:	40020800 	.word	0x40020800
 8000cb0:	40020c00 	.word	0x40020c00
 8000cb4:	40020400 	.word	0x40020400

08000cb8 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cba:	e7fe      	b.n	8000cba <Error_Handler+0x2>

08000cbc <MX_I2C1_Init>:
{
 8000cbc:	b508      	push	{r3, lr}
  hi2c1.Instance = I2C1;
 8000cbe:	480a      	ldr	r0, [pc, #40]	; (8000ce8 <MX_I2C1_Init+0x2c>)
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <MX_I2C1_Init+0x30>)
 8000cc2:	6003      	str	r3, [r0, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000cc4:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <MX_I2C1_Init+0x34>)
 8000cc6:	6043      	str	r3, [r0, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ccc:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cd2:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd6:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cda:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cdc:	f001 f9e0 	bl	80020a0 <HAL_I2C_Init>
 8000ce0:	b900      	cbnz	r0, 8000ce4 <MX_I2C1_Init+0x28>
}
 8000ce2:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000ce4:	f7ff ffe8 	bl	8000cb8 <Error_Handler>
 8000ce8:	20000098 	.word	0x20000098
 8000cec:	40005400 	.word	0x40005400
 8000cf0:	000186a0 	.word	0x000186a0

08000cf4 <MX_I2S3_Init>:
{
 8000cf4:	b508      	push	{r3, lr}
  hi2s3.Instance = SPI3;
 8000cf6:	480a      	ldr	r0, [pc, #40]	; (8000d20 <MX_I2S3_Init+0x2c>)
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_I2S3_Init+0x30>)
 8000cfa:	6003      	str	r3, [r0, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000cfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d00:	6042      	str	r2, [r0, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d02:	2300      	movs	r3, #0
 8000d04:	6083      	str	r3, [r0, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d06:	60c3      	str	r3, [r0, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d08:	6102      	str	r2, [r0, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000d0a:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <MX_I2S3_Init+0x34>)
 8000d0c:	6142      	str	r2, [r0, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000d0e:	6183      	str	r3, [r0, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000d10:	61c3      	str	r3, [r0, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000d12:	6203      	str	r3, [r0, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000d14:	f001 faa2 	bl	800225c <HAL_I2S_Init>
 8000d18:	b900      	cbnz	r0, 8000d1c <MX_I2S3_Init+0x28>
}
 8000d1a:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d1c:	f7ff ffcc 	bl	8000cb8 <Error_Handler>
 8000d20:	200000ec 	.word	0x200000ec
 8000d24:	40003c00 	.word	0x40003c00
 8000d28:	00017700 	.word	0x00017700

08000d2c <MX_SPI1_Init>:
{
 8000d2c:	b508      	push	{r3, lr}
  hspi1.Instance = SPI1;
 8000d2e:	480d      	ldr	r0, [pc, #52]	; (8000d64 <MX_SPI1_Init+0x38>)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_SPI1_Init+0x3c>)
 8000d32:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d34:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000d38:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d3e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d40:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d42:	6143      	str	r3, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d48:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4a:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d4c:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d4e:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d50:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000d52:	230a      	movs	r3, #10
 8000d54:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d56:	f002 f993 	bl	8003080 <HAL_SPI_Init>
 8000d5a:	b900      	cbnz	r0, 8000d5e <MX_SPI1_Init+0x32>
}
 8000d5c:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000d5e:	f7ff ffab 	bl	8000cb8 <Error_Handler>
 8000d62:	bf00      	nop
 8000d64:	20000134 	.word	0x20000134
 8000d68:	40013000 	.word	0x40013000

08000d6c <SystemClock_Config>:
{
 8000d6c:	b500      	push	{lr}
 8000d6e:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d70:	2230      	movs	r2, #48	; 0x30
 8000d72:	2100      	movs	r1, #0
 8000d74:	a808      	add	r0, sp, #32
 8000d76:	f004 f981 	bl	800507c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	9303      	str	r3, [sp, #12]
 8000d7e:	9304      	str	r3, [sp, #16]
 8000d80:	9305      	str	r3, [sp, #20]
 8000d82:	9306      	str	r3, [sp, #24]
 8000d84:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	9301      	str	r3, [sp, #4]
 8000d88:	4a20      	ldr	r2, [pc, #128]	; (8000e0c <SystemClock_Config+0xa0>)
 8000d8a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000d8c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000d90:	6411      	str	r1, [r2, #64]	; 0x40
 8000d92:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000d94:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000d98:	9201      	str	r2, [sp, #4]
 8000d9a:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d9c:	9302      	str	r3, [sp, #8]
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <SystemClock_Config+0xa4>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db2:	2301      	movs	r3, #1
 8000db4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dba:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000dc4:	920f      	str	r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc6:	2208      	movs	r2, #8
 8000dc8:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dca:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000dce:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd0:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	a808      	add	r0, sp, #32
 8000dd8:	f001 fd3e 	bl	8002858 <HAL_RCC_OscConfig>
 8000ddc:	b988      	cbnz	r0, 8000e02 <SystemClock_Config+0x96>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de2:	2302      	movs	r3, #2
 8000de4:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dee:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000df0:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000df2:	2105      	movs	r1, #5
 8000df4:	a803      	add	r0, sp, #12
 8000df6:	f001 ff99 	bl	8002d2c <HAL_RCC_ClockConfig>
 8000dfa:	b920      	cbnz	r0, 8000e06 <SystemClock_Config+0x9a>
}
 8000dfc:	b015      	add	sp, #84	; 0x54
 8000dfe:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000e02:	f7ff ff59 	bl	8000cb8 <Error_Handler>
    Error_Handler();
 8000e06:	f7ff ff57 	bl	8000cb8 <Error_Handler>
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40007000 	.word	0x40007000
 8000e14:	00000000 	.word	0x00000000

08000e18 <main>:
{
 8000e18:	b500      	push	{lr}
 8000e1a:	b083      	sub	sp, #12
	RCC->APB2ENR |= 1<<8; //Enable ADC1 clock
 8000e1c:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <main+0xd0>)
 8000e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000e20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
	RCC->AHB1ENR |= 1<<0; //GPIOA CLOCK
 8000e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
	ADC->CCR &= ~(3<<8); //PRE SCALER
 8000e2e:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <main+0xd4>)
 8000e30:	6853      	ldr	r3, [r2, #4]
 8000e32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e36:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= 1<<8; //scan mode in CR1
 8000e38:	4b2d      	ldr	r3, [pc, #180]	; (8000ef0 <main+0xd8>)
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e40:	605a      	str	r2, [r3, #4]
	ADC1->CR1 &= ~(3<<24); //12 bit resolution in CR1 Reg
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000e48:	605a      	str	r2, [r3, #4]
	ADC1->CR2 |= 1<<1; // cont convertion ON
 8000e4a:	689a      	ldr	r2, [r3, #8]
 8000e4c:	f042 0202 	orr.w	r2, r2, #2
 8000e50:	609a      	str	r2, [r3, #8]
	ADC1->CR2 |= 1<<10; //EOC flag is set
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000e58:	609a      	str	r2, [r3, #8]
	ADC1->CR2 &= ~(1<<11); //data alignment right
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e60:	609a      	str	r2, [r3, #8]
	ADC1->SMPR2 &= ~(7<<1); //sampling time 3 ms
 8000e62:	691a      	ldr	r2, [r3, #16]
 8000e64:	f022 020e 	bic.w	r2, r2, #14
 8000e68:	611a      	str	r2, [r3, #16]
	GPIOA->MODER |= (3<<2); //PA1 pin set to analog Mode
 8000e6a:	4922      	ldr	r1, [pc, #136]	; (8000ef4 <main+0xdc>)
 8000e6c:	680a      	ldr	r2, [r1, #0]
 8000e6e:	f042 020c 	orr.w	r2, r2, #12
 8000e72:	600a      	str	r2, [r1, #0]
	ADC1->CR2 |= 1<<0; //switching on ADC1
 8000e74:	689a      	ldr	r2, [r3, #8]
 8000e76:	f042 0201 	orr.w	r2, r2, #1
 8000e7a:	609a      	str	r2, [r3, #8]
	ADC1->SQR3 = 0; //clearing sqr3 reg
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	6359      	str	r1, [r3, #52]	; 0x34
	ADC1->SQR3 |= (1<<0); //channel one first to be done
 8000e80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e82:	f042 0201 	orr.w	r2, r2, #1
 8000e86:	635a      	str	r2, [r3, #52]	; 0x34
	ADC1->SR = 0; //clear SR
 8000e88:	6019      	str	r1, [r3, #0]
	ADC1->CR2 |= (1<<30); //SWSTART BIT in CR2 reg
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e90:	609a      	str	r2, [r3, #8]
	while(!(ADC1->SR && 1<<1));// Wait for convertion
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <main+0xd8>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0fb      	beq.n	8000e92 <main+0x7a>
	data = ADC1->DR;
 8000e9a:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <main+0xd8>)
 8000e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9e:	9301      	str	r3, [sp, #4]
	volt = (double)data/4096 * 3.3;
 8000ea0:	9801      	ldr	r0, [sp, #4]
 8000ea2:	f7ff fc0d 	bl	80006c0 <__aeabi_i2d>
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b13      	ldr	r3, [pc, #76]	; (8000ef8 <main+0xe0>)
 8000eaa:	f7ff f98d 	bl	80001c8 <__aeabi_dmul>
 8000eae:	a30c      	add	r3, pc, #48	; (adr r3, 8000ee0 <main+0xc8>)
 8000eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb4:	f7ff f988 	bl	80001c8 <__aeabi_dmul>
 8000eb8:	f7ff fc6c 	bl	8000794 <__aeabi_d2f>
 8000ebc:	9000      	str	r0, [sp, #0]
  HAL_Init();
 8000ebe:	f000 f99d 	bl	80011fc <HAL_Init>
  SystemClock_Config();
 8000ec2:	f7ff ff53 	bl	8000d6c <SystemClock_Config>
  MX_GPIO_Init();
 8000ec6:	f7ff fe33 	bl	8000b30 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000eca:	f7ff fef7 	bl	8000cbc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000ece:	f7ff ff11 	bl	8000cf4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000ed2:	f7ff ff2b 	bl	8000d2c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000ed6:	f003 feb7 	bl	8004c48 <MX_USB_HOST_Init>
    MX_USB_HOST_Process();
 8000eda:	f003 fed5 	bl	8004c88 <MX_USB_HOST_Process>
  while (1)
 8000ede:	e7fc      	b.n	8000eda <main+0xc2>
 8000ee0:	66666666 	.word	0x66666666
 8000ee4:	400a6666 	.word	0x400a6666
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40012300 	.word	0x40012300
 8000ef0:	40012000 	.word	0x40012000
 8000ef4:	40020000 	.word	0x40020000
 8000ef8:	3f300000 	.word	0x3f300000

08000efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000efc:	b500      	push	{lr}
 8000efe:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f00:	2100      	movs	r1, #0
 8000f02:	9100      	str	r1, [sp, #0]
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <HAL_MspInit+0x3c>)
 8000f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000f0c:	645a      	str	r2, [r3, #68]	; 0x44
 8000f0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000f10:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000f14:	9200      	str	r2, [sp, #0]
 8000f16:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f18:	9101      	str	r1, [sp, #4]
 8000f1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f1c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f2c:	2007      	movs	r0, #7
 8000f2e:	f000 f9a5 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f32:	b003      	add	sp, #12
 8000f34:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f38:	40023800 	.word	0x40023800

08000f3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f3c:	b530      	push	{r4, r5, lr}
 8000f3e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	2300      	movs	r3, #0
 8000f42:	9303      	str	r3, [sp, #12]
 8000f44:	9304      	str	r3, [sp, #16]
 8000f46:	9305      	str	r3, [sp, #20]
 8000f48:	9306      	str	r3, [sp, #24]
 8000f4a:	9307      	str	r3, [sp, #28]
  if(hi2c->Instance==I2C1)
 8000f4c:	6802      	ldr	r2, [r0, #0]
 8000f4e:	4b14      	ldr	r3, [pc, #80]	; (8000fa0 <HAL_I2C_MspInit+0x64>)
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d001      	beq.n	8000f58 <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f54:	b009      	add	sp, #36	; 0x24
 8000f56:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f58:	2500      	movs	r5, #0
 8000f5a:	9501      	str	r5, [sp, #4]
 8000f5c:	4c11      	ldr	r4, [pc, #68]	; (8000fa4 <HAL_I2C_MspInit+0x68>)
 8000f5e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f60:	f043 0302 	orr.w	r3, r3, #2
 8000f64:	6323      	str	r3, [r4, #48]	; 0x30
 8000f66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f70:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f76:	2312      	movs	r3, #18
 8000f78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f82:	a903      	add	r1, sp, #12
 8000f84:	4808      	ldr	r0, [pc, #32]	; (8000fa8 <HAL_I2C_MspInit+0x6c>)
 8000f86:	f000 f9e5 	bl	8001354 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f8a:	9502      	str	r5, [sp, #8]
 8000f8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f92:	6423      	str	r3, [r4, #64]	; 0x40
 8000f94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	9b02      	ldr	r3, [sp, #8]
}
 8000f9e:	e7d9      	b.n	8000f54 <HAL_I2C_MspInit+0x18>
 8000fa0:	40005400 	.word	0x40005400
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020400 	.word	0x40020400

08000fac <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000fac:	b570      	push	{r4, r5, r6, lr}
 8000fae:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9307      	str	r3, [sp, #28]
 8000fb4:	9308      	str	r3, [sp, #32]
 8000fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8000fba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fbc:	9303      	str	r3, [sp, #12]
 8000fbe:	9304      	str	r3, [sp, #16]
 8000fc0:	9305      	str	r3, [sp, #20]
 8000fc2:	9306      	str	r3, [sp, #24]
  if(hi2s->Instance==SPI3)
 8000fc4:	6802      	ldr	r2, [r0, #0]
 8000fc6:	4b25      	ldr	r3, [pc, #148]	; (800105c <HAL_I2S_MspInit+0xb0>)
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2S_MspInit+0x24>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fcc:	b00c      	add	sp, #48	; 0x30
 8000fce:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fd4:	23c0      	movs	r3, #192	; 0xc0
 8000fd6:	9304      	str	r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fdc:	a803      	add	r0, sp, #12
 8000fde:	f001 ff6b 	bl	8002eb8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe2:	2800      	cmp	r0, #0
 8000fe4:	d137      	bne.n	8001056 <HAL_I2S_MspInit+0xaa>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fe6:	2400      	movs	r4, #0
 8000fe8:	9400      	str	r4, [sp, #0]
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <HAL_I2S_MspInit+0xb4>)
 8000fec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff6:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8000ffa:	9200      	str	r2, [sp, #0]
 8000ffc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	9401      	str	r4, [sp, #4]
 8001000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001002:	f042 0201 	orr.w	r2, r2, #1
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
 8001008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800100a:	f002 0201 	and.w	r2, r2, #1
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	9402      	str	r4, [sp, #8]
 8001014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001016:	f042 0204 	orr.w	r2, r2, #4
 800101a:	631a      	str	r2, [r3, #48]	; 0x30
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001026:	2310      	movs	r3, #16
 8001028:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2602      	movs	r6, #2
 800102c:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001032:	2506      	movs	r5, #6
 8001034:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001036:	a907      	add	r1, sp, #28
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <HAL_I2S_MspInit+0xb8>)
 800103a:	f000 f98b 	bl	8001354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800103e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001042:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800104a:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104c:	a907      	add	r1, sp, #28
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <HAL_I2S_MspInit+0xbc>)
 8001050:	f000 f980 	bl	8001354 <HAL_GPIO_Init>
}
 8001054:	e7ba      	b.n	8000fcc <HAL_I2S_MspInit+0x20>
      Error_Handler();
 8001056:	f7ff fe2f 	bl	8000cb8 <Error_Handler>
 800105a:	e7c4      	b.n	8000fe6 <HAL_I2S_MspInit+0x3a>
 800105c:	40003c00 	.word	0x40003c00
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020800 	.word	0x40020800

0800106c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800106c:	b500      	push	{lr}
 800106e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	2300      	movs	r3, #0
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	9304      	str	r3, [sp, #16]
 8001076:	9305      	str	r3, [sp, #20]
 8001078:	9306      	str	r3, [sp, #24]
 800107a:	9307      	str	r3, [sp, #28]
  if(hspi->Instance==SPI1)
 800107c:	6802      	ldr	r2, [r0, #0]
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <HAL_SPI_MspInit+0x64>)
 8001080:	429a      	cmp	r2, r3
 8001082:	d002      	beq.n	800108a <HAL_SPI_MspInit+0x1e>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001084:	b009      	add	sp, #36	; 0x24
 8001086:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_SPI1_CLK_ENABLE();
 800108a:	2100      	movs	r1, #0
 800108c:	9101      	str	r1, [sp, #4]
 800108e:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001094:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
 800109a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800109c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80010a0:	9201      	str	r2, [sp, #4]
 80010a2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a4:	9102      	str	r1, [sp, #8]
 80010a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010a8:	f042 0201 	orr.w	r2, r2, #1
 80010ac:	631a      	str	r2, [r3, #48]	; 0x30
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	9302      	str	r3, [sp, #8]
 80010b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010b8:	23e0      	movs	r3, #224	; 0xe0
 80010ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010c0:	2305      	movs	r3, #5
 80010c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	a903      	add	r1, sp, #12
 80010c6:	4803      	ldr	r0, [pc, #12]	; (80010d4 <HAL_SPI_MspInit+0x68>)
 80010c8:	f000 f944 	bl	8001354 <HAL_GPIO_Init>
}
 80010cc:	e7da      	b.n	8001084 <HAL_SPI_MspInit+0x18>
 80010ce:	bf00      	nop
 80010d0:	40013000 	.word	0x40013000
 80010d4:	40020000 	.word	0x40020000

080010d8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d8:	e7fe      	b.n	80010d8 <NMI_Handler>

080010da <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <HardFault_Handler>

080010dc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler>

080010de <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010de:	e7fe      	b.n	80010de <BusFault_Handler>

080010e0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler>

080010e2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	4770      	bx	lr

080010e4 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e4:	4770      	bx	lr

080010e6 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e6:	4770      	bx	lr

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ea:	f000 f8a1 	bl	8001230 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ee:	bd08      	pop	{r3, pc}

080010f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80010f2:	4802      	ldr	r0, [pc, #8]	; (80010fc <OTG_FS_IRQHandler+0xc>)
 80010f4:	f000 fee8 	bl	8001ec8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010f8:	bd08      	pop	{r3, pc}
 80010fa:	bf00      	nop
 80010fc:	20000570 	.word	0x20000570

08001100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001100:	b510      	push	{r4, lr}
 8001102:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <_sbrk+0x38>)
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <_sbrk+0x40>)
 800110a:	6800      	ldr	r0, [r0, #0]
 800110c:	b140      	cbz	r0, 8001120 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <_sbrk+0x40>)
 8001110:	6800      	ldr	r0, [r0, #0]
 8001112:	4403      	add	r3, r0
 8001114:	1a52      	subs	r2, r2, r1
 8001116:	4293      	cmp	r3, r2
 8001118:	d806      	bhi.n	8001128 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <_sbrk+0x40>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800111e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <_sbrk+0x40>)
 8001122:	4c08      	ldr	r4, [pc, #32]	; (8001144 <_sbrk+0x44>)
 8001124:	6004      	str	r4, [r0, #0]
 8001126:	e7f2      	b.n	800110e <_sbrk+0xe>
    errno = ENOMEM;
 8001128:	f003 ffc0 	bl	80050ac <__errno>
 800112c:	230c      	movs	r3, #12
 800112e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	e7f3      	b.n	800111e <_sbrk+0x1e>
 8001136:	bf00      	nop
 8001138:	20020000 	.word	0x20020000
 800113c:	00000400 	.word	0x00000400
 8001140:	2000018c 	.word	0x2000018c
 8001144:	200009c0 	.word	0x200009c0

08001148 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001148:	4a03      	ldr	r2, [pc, #12]	; (8001158 <SystemInit+0x10>)
 800114a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800114e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001152:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800115c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001194 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001162:	490e      	ldr	r1, [pc, #56]	; (800119c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001164:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0b      	ldr	r2, [pc, #44]	; (80011a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001178:	4c0b      	ldr	r4, [pc, #44]	; (80011a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001186:	f7ff ffdf 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800118a:	f003 ff95 	bl	80050b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118e:	f7ff fe43 	bl	8000e18 <main>
  bx  lr    
 8001192:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001194:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001198:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800119c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011a0:	080051e0 	.word	0x080051e0
  ldr r2, =_sbss
 80011a4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011a8:	200009bc 	.word	0x200009bc

080011ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011ac:	e7fe      	b.n	80011ac <ADC_IRQHandler>
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b510      	push	{r4, lr}
 80011b2:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_InitTick+0x40>)
 80011b6:	781a      	ldrb	r2, [r3, #0]
 80011b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80011c0:	4a0c      	ldr	r2, [pc, #48]	; (80011f4 <HAL_InitTick+0x44>)
 80011c2:	6810      	ldr	r0, [r2, #0]
 80011c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80011c8:	f000 f8b0 	bl	800132c <HAL_SYSTICK_Config>
 80011cc:	b968      	cbnz	r0, 80011ea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ce:	2c0f      	cmp	r4, #15
 80011d0:	d901      	bls.n	80011d6 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80011d2:	2001      	movs	r0, #1
 80011d4:	e00a      	b.n	80011ec <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d6:	2200      	movs	r2, #0
 80011d8:	4621      	mov	r1, r4
 80011da:	f04f 30ff 	mov.w	r0, #4294967295
 80011de:	f000 f85f 	bl	80012a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_InitTick+0x48>)
 80011e4:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80011e6:	2000      	movs	r0, #0
 80011e8:	e000      	b.n	80011ec <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
}
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	20000004 	.word	0x20000004
 80011f4:	20000000 	.word	0x20000000
 80011f8:	20000008 	.word	0x20000008

080011fc <HAL_Init>:
{
 80011fc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <HAL_Init+0x30>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001206:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800120e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001216:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f82f 	bl	800127c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800121e:	2000      	movs	r0, #0
 8001220:	f7ff ffc6 	bl	80011b0 <HAL_InitTick>
  HAL_MspInit();
 8001224:	f7ff fe6a 	bl	8000efc <HAL_MspInit>
}
 8001228:	2000      	movs	r0, #0
 800122a:	bd08      	pop	{r3, pc}
 800122c:	40023c00 	.word	0x40023c00

08001230 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001230:	4a03      	ldr	r2, [pc, #12]	; (8001240 <HAL_IncTick+0x10>)
 8001232:	6811      	ldr	r1, [r2, #0]
 8001234:	4b03      	ldr	r3, [pc, #12]	; (8001244 <HAL_IncTick+0x14>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	440b      	add	r3, r1
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000190 	.word	0x20000190
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001248:	4b01      	ldr	r3, [pc, #4]	; (8001250 <HAL_GetTick+0x8>)
 800124a:	6818      	ldr	r0, [r3, #0]
}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	20000190 	.word	0x20000190

08001254 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001254:	b538      	push	{r3, r4, r5, lr}
 8001256:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001258:	f7ff fff6 	bl	8001248 <HAL_GetTick>
 800125c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001262:	d002      	beq.n	800126a <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <HAL_Delay+0x24>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	f7ff ffed 	bl	8001248 <HAL_GetTick>
 800126e:	1b40      	subs	r0, r0, r5
 8001270:	42a0      	cmp	r0, r4
 8001272:	d3fa      	bcc.n	800126a <HAL_Delay+0x16>
  {
  }
}
 8001274:	bd38      	pop	{r3, r4, r5, pc}
 8001276:	bf00      	nop
 8001278:	20000004 	.word	0x20000004

0800127c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800127c:	4a07      	ldr	r2, [pc, #28]	; (800129c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800127e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001280:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001288:	0200      	lsls	r0, r0, #8
 800128a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800128e:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8001290:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001298:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012a0:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_NVIC_SetPriority+0x68>)
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012aa:	f1c3 0c07 	rsb	ip, r3, #7
 80012ae:	f1bc 0f04 	cmp.w	ip, #4
 80012b2:	bf28      	it	cs
 80012b4:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012b8:	f103 0e04 	add.w	lr, r3, #4
 80012bc:	f1be 0f06 	cmp.w	lr, #6
 80012c0:	d918      	bls.n	80012f4 <HAL_NVIC_SetPriority+0x54>
 80012c2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c4:	f04f 3eff 	mov.w	lr, #4294967295
 80012c8:	fa0e fc0c 	lsl.w	ip, lr, ip
 80012cc:	ea21 010c 	bic.w	r1, r1, ip
 80012d0:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d2:	fa0e fe03 	lsl.w	lr, lr, r3
 80012d6:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012da:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 80012dc:	2800      	cmp	r0, #0
 80012de:	db0b      	blt.n	80012f8 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	0112      	lsls	r2, r2, #4
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012ec:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012f0:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f4:	2300      	movs	r3, #0
 80012f6:	e7e5      	b.n	80012c4 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	f000 000f 	and.w	r0, r0, #15
 80012fc:	0112      	lsls	r2, r2, #4
 80012fe:	b2d2      	uxtb	r2, r2
 8001300:	4b02      	ldr	r3, [pc, #8]	; (800130c <HAL_NVIC_SetPriority+0x6c>)
 8001302:	541a      	strb	r2, [r3, r0]
 8001304:	e7f4      	b.n	80012f0 <HAL_NVIC_SetPriority+0x50>
 8001306:	bf00      	nop
 8001308:	e000ed00 	.word	0xe000ed00
 800130c:	e000ed14 	.word	0xe000ed14

08001310 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001310:	2800      	cmp	r0, #0
 8001312:	db07      	blt.n	8001324 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001314:	f000 021f 	and.w	r2, r0, #31
 8001318:	0940      	lsrs	r0, r0, #5
 800131a:	2301      	movs	r3, #1
 800131c:	4093      	lsls	r3, r2
 800131e:	4a02      	ldr	r2, [pc, #8]	; (8001328 <HAL_NVIC_EnableIRQ+0x18>)
 8001320:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800132c:	3801      	subs	r0, #1
 800132e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001332:	d20b      	bcs.n	800134c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001334:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8001338:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <HAL_SYSTICK_Config+0x24>)
 800133c:	21f0      	movs	r1, #240	; 0xf0
 800133e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001342:	2000      	movs	r0, #0
 8001344:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	2207      	movs	r2, #7
 8001348:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800134c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001354:	2300      	movs	r3, #0
 8001356:	2b0f      	cmp	r3, #15
 8001358:	f200 80e9 	bhi.w	800152e <HAL_GPIO_Init+0x1da>
{
 800135c:	b570      	push	{r4, r5, r6, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	e065      	b.n	800142e <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001362:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001364:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001368:	2403      	movs	r4, #3
 800136a:	fa04 f40e 	lsl.w	r4, r4, lr
 800136e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001372:	68cc      	ldr	r4, [r1, #12]
 8001374:	fa04 f40e 	lsl.w	r4, r4, lr
 8001378:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800137a:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800137e:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001382:	684a      	ldr	r2, [r1, #4]
 8001384:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8001388:	409a      	lsls	r2, r3
 800138a:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 800138c:	6042      	str	r2, [r0, #4]
 800138e:	e05c      	b.n	800144a <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001390:	08dc      	lsrs	r4, r3, #3
 8001392:	3408      	adds	r4, #8
 8001394:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001398:	f003 0507 	and.w	r5, r3, #7
 800139c:	00ad      	lsls	r5, r5, #2
 800139e:	f04f 0e0f 	mov.w	lr, #15
 80013a2:	fa0e fe05 	lsl.w	lr, lr, r5
 80013a6:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013aa:	690a      	ldr	r2, [r1, #16]
 80013ac:	40aa      	lsls	r2, r5
 80013ae:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80013b2:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80013b6:	e05c      	b.n	8001472 <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013b8:	2207      	movs	r2, #7
 80013ba:	e000      	b.n	80013be <HAL_GPIO_Init+0x6a>
 80013bc:	2200      	movs	r2, #0
 80013be:	fa02 f20e 	lsl.w	r2, r2, lr
 80013c2:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013c4:	3402      	adds	r4, #2
 80013c6:	4d5a      	ldr	r5, [pc, #360]	; (8001530 <HAL_GPIO_Init+0x1dc>)
 80013c8:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013cc:	4a59      	ldr	r2, [pc, #356]	; (8001534 <HAL_GPIO_Init+0x1e0>)
 80013ce:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	ea6f 020c 	mvn.w	r2, ip
 80013d4:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013d8:	684e      	ldr	r6, [r1, #4]
 80013da:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 80013de:	d001      	beq.n	80013e4 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 80013e0:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 80013e4:	4c53      	ldr	r4, [pc, #332]	; (8001534 <HAL_GPIO_Init+0x1e0>)
 80013e6:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80013e8:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ee:	684e      	ldr	r6, [r1, #4]
 80013f0:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80013f4:	d001      	beq.n	80013fa <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 80013f6:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 80013fa:	4c4e      	ldr	r4, [pc, #312]	; (8001534 <HAL_GPIO_Init+0x1e0>)
 80013fc:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 80013fe:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8001400:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001404:	684e      	ldr	r6, [r1, #4]
 8001406:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 800140a:	d001      	beq.n	8001410 <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 800140c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8001410:	4c48      	ldr	r4, [pc, #288]	; (8001534 <HAL_GPIO_Init+0x1e0>)
 8001412:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8001416:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001418:	684d      	ldr	r5, [r1, #4]
 800141a:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 800141e:	d001      	beq.n	8001424 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8001420:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8001424:	4c43      	ldr	r4, [pc, #268]	; (8001534 <HAL_GPIO_Init+0x1e0>)
 8001426:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001428:	3301      	adds	r3, #1
 800142a:	2b0f      	cmp	r3, #15
 800142c:	d87d      	bhi.n	800152a <HAL_GPIO_Init+0x1d6>
    ioposition = 0x01U << position;
 800142e:	2201      	movs	r2, #1
 8001430:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001432:	680c      	ldr	r4, [r1, #0]
 8001434:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8001438:	ea32 0404 	bics.w	r4, r2, r4
 800143c:	d1f4      	bne.n	8001428 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800143e:	684c      	ldr	r4, [r1, #4]
 8001440:	f004 0403 	and.w	r4, r4, #3
 8001444:	3c01      	subs	r4, #1
 8001446:	2c01      	cmp	r4, #1
 8001448:	d98b      	bls.n	8001362 <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144a:	684a      	ldr	r2, [r1, #4]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	2a03      	cmp	r2, #3
 8001452:	d009      	beq.n	8001468 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8001454:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001456:	005d      	lsls	r5, r3, #1
 8001458:	2203      	movs	r2, #3
 800145a:	40aa      	lsls	r2, r5
 800145c:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001460:	688a      	ldr	r2, [r1, #8]
 8001462:	40aa      	lsls	r2, r5
 8001464:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8001466:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001468:	684a      	ldr	r2, [r1, #4]
 800146a:	f002 0203 	and.w	r2, r2, #3
 800146e:	2a02      	cmp	r2, #2
 8001470:	d08e      	beq.n	8001390 <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8001472:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001474:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8001478:	2203      	movs	r2, #3
 800147a:	fa02 f20e 	lsl.w	r2, r2, lr
 800147e:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001482:	684a      	ldr	r2, [r1, #4]
 8001484:	f002 0203 	and.w	r2, r2, #3
 8001488:	fa02 f20e 	lsl.w	r2, r2, lr
 800148c:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 800148e:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001490:	684a      	ldr	r2, [r1, #4]
 8001492:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8001496:	d0c7      	beq.n	8001428 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001498:	2200      	movs	r2, #0
 800149a:	9201      	str	r2, [sp, #4]
 800149c:	4a26      	ldr	r2, [pc, #152]	; (8001538 <HAL_GPIO_Init+0x1e4>)
 800149e:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80014a0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80014a4:	6454      	str	r4, [r2, #68]	; 0x44
 80014a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80014a8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014ac:	9201      	str	r2, [sp, #4]
 80014ae:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80014b0:	089c      	lsrs	r4, r3, #2
 80014b2:	1ca5      	adds	r5, r4, #2
 80014b4:	4a1e      	ldr	r2, [pc, #120]	; (8001530 <HAL_GPIO_Init+0x1dc>)
 80014b6:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ba:	f003 0e03 	and.w	lr, r3, #3
 80014be:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80014c2:	220f      	movs	r2, #15
 80014c4:	fa02 f20e 	lsl.w	r2, r2, lr
 80014c8:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <HAL_GPIO_Init+0x1e8>)
 80014ce:	4290      	cmp	r0, r2
 80014d0:	f43f af74 	beq.w	80013bc <HAL_GPIO_Init+0x68>
 80014d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014d8:	4290      	cmp	r0, r2
 80014da:	d01a      	beq.n	8001512 <HAL_GPIO_Init+0x1be>
 80014dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e0:	4290      	cmp	r0, r2
 80014e2:	d018      	beq.n	8001516 <HAL_GPIO_Init+0x1c2>
 80014e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014e8:	4290      	cmp	r0, r2
 80014ea:	d016      	beq.n	800151a <HAL_GPIO_Init+0x1c6>
 80014ec:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f0:	4290      	cmp	r0, r2
 80014f2:	d014      	beq.n	800151e <HAL_GPIO_Init+0x1ca>
 80014f4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80014f8:	4290      	cmp	r0, r2
 80014fa:	d012      	beq.n	8001522 <HAL_GPIO_Init+0x1ce>
 80014fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001500:	4290      	cmp	r0, r2
 8001502:	d010      	beq.n	8001526 <HAL_GPIO_Init+0x1d2>
 8001504:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001508:	4290      	cmp	r0, r2
 800150a:	f43f af55 	beq.w	80013b8 <HAL_GPIO_Init+0x64>
 800150e:	2208      	movs	r2, #8
 8001510:	e755      	b.n	80013be <HAL_GPIO_Init+0x6a>
 8001512:	2201      	movs	r2, #1
 8001514:	e753      	b.n	80013be <HAL_GPIO_Init+0x6a>
 8001516:	2202      	movs	r2, #2
 8001518:	e751      	b.n	80013be <HAL_GPIO_Init+0x6a>
 800151a:	2203      	movs	r2, #3
 800151c:	e74f      	b.n	80013be <HAL_GPIO_Init+0x6a>
 800151e:	2204      	movs	r2, #4
 8001520:	e74d      	b.n	80013be <HAL_GPIO_Init+0x6a>
 8001522:	2205      	movs	r2, #5
 8001524:	e74b      	b.n	80013be <HAL_GPIO_Init+0x6a>
 8001526:	2206      	movs	r2, #6
 8001528:	e749      	b.n	80013be <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 800152a:	b002      	add	sp, #8
 800152c:	bd70      	pop	{r4, r5, r6, pc}
 800152e:	4770      	bx	lr
 8001530:	40013800 	.word	0x40013800
 8001534:	40013c00 	.word	0x40013c00
 8001538:	40023800 	.word	0x40023800
 800153c:	40020000 	.word	0x40020000

08001540 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001540:	b10a      	cbz	r2, 8001546 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	6181      	str	r1, [r0, #24]
 8001544:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001546:	0409      	lsls	r1, r1, #16
 8001548:	6181      	str	r1, [r0, #24]
  }
}
 800154a:	4770      	bx	lr

0800154c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800154c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800154e:	6806      	ldr	r6, [r0, #0]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8001550:	6a34      	ldr	r4, [r6, #32]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8001552:	f004 070f 	and.w	r7, r4, #15
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8001556:	f3c4 4343 	ubfx	r3, r4, #17, #4
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800155a:	f3c4 140a 	ubfx	r4, r4, #4, #11

  switch (pktsts)
 800155e:	2b02      	cmp	r3, #2
 8001560:	d000      	beq.n	8001564 <HCD_RXQLVL_IRQHandler+0x18>
    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
  }
}
 8001562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001564:	4605      	mov	r5, r0
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001566:	2c00      	cmp	r4, #0
 8001568:	d0fb      	beq.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>
 800156a:	232c      	movs	r3, #44	; 0x2c
 800156c:	fb03 0307 	mla	r3, r3, r7, r0
 8001570:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001572:	2900      	cmp	r1, #0
 8001574:	d0f5      	beq.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8001576:	232c      	movs	r3, #44	; 0x2c
 8001578:	fb03 0307 	mla	r3, r3, r7, r0
 800157c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800157e:	4422      	add	r2, r4
 8001580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001582:	429a      	cmp	r2, r3
 8001584:	d906      	bls.n	8001594 <HCD_RXQLVL_IRQHandler+0x48>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001586:	232c      	movs	r3, #44	; 0x2c
 8001588:	fb03 0507 	mla	r5, r3, r7, r0
 800158c:	2304      	movs	r3, #4
 800158e:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
}
 8001592:	e7e6      	b.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>
          (void)USB_ReadPacket(hhcd->Instance,
 8001594:	4622      	mov	r2, r4
 8001596:	4630      	mov	r0, r6
 8001598:	f001 feb1 	bl	80032fe <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 800159c:	232c      	movs	r3, #44	; 0x2c
 800159e:	fb03 5307 	mla	r3, r3, r7, r5
 80015a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80015a4:	4422      	add	r2, r4
 80015a6:	645a      	str	r2, [r3, #68]	; 0x44
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80015a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015aa:	4422      	add	r2, r4
 80015ac:	651a      	str	r2, [r3, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80015ae:	eb06 1647 	add.w	r6, r6, r7, lsl #5
 80015b2:	f8d6 2510 	ldr.w	r2, [r6, #1296]	; 0x510
 80015b6:	f3c2 42c9 	ubfx	r2, r2, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80015ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015be:	42a3      	cmp	r3, r4
 80015c0:	d1cf      	bne.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	d0cd      	beq.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80015c6:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80015ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80015ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80015d2:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80015d6:	232c      	movs	r3, #44	; 0x2c
 80015d8:	fb03 5307 	mla	r3, r3, r7, r5
 80015dc:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80015e0:	f082 0201 	eor.w	r2, r2, #1
 80015e4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80015e8:	e7bb      	b.n	8001562 <HCD_RXQLVL_IRQHandler+0x16>

080015ea <HAL_HCD_HC_Init>:
{
 80015ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ec:	b085      	sub	sp, #20
 80015ee:	4604      	mov	r4, r0
 80015f0:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 80015f4:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80015f8:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 80015fc:	f890 02f8 	ldrb.w	r0, [r0, #760]	; 0x2f8
 8001600:	2801      	cmp	r0, #1
 8001602:	d037      	beq.n	8001674 <HAL_HCD_HC_Init+0x8a>
 8001604:	2001      	movs	r0, #1
 8001606:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800160a:	202c      	movs	r0, #44	; 0x2c
 800160c:	fb00 4001 	mla	r0, r0, r1, r4
 8001610:	f04f 0c00 	mov.w	ip, #0
 8001614:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001618:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 800161c:	f8a0 7040 	strh.w	r7, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8001620:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8001624:	f880 603f 	strb.w	r6, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001628:	f002 0c7f 	and.w	ip, r2, #127	; 0x7f
 800162c:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if ((epnum & 0x80U) == 0x80U)
 8001630:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001634:	d116      	bne.n	8001664 <HAL_HCD_HC_Init+0x7a>
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001636:	202c      	movs	r0, #44	; 0x2c
 8001638:	fb00 4001 	mla	r0, r0, r1, r4
 800163c:	f04f 0c00 	mov.w	ip, #0
 8001640:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
  hhcd->hc[ch_num].speed = speed;
 8001644:	202c      	movs	r0, #44	; 0x2c
 8001646:	fb00 4001 	mla	r0, r0, r1, r4
 800164a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  status =  USB_HC_Init(hhcd->Instance,
 800164e:	9702      	str	r7, [sp, #8]
 8001650:	9601      	str	r6, [sp, #4]
 8001652:	9500      	str	r5, [sp, #0]
 8001654:	6820      	ldr	r0, [r4, #0]
 8001656:	f001 ff9c 	bl	8003592 <USB_HC_Init>
  __HAL_UNLOCK(hhcd);
 800165a:	2300      	movs	r3, #0
 800165c:	f884 32f8 	strb.w	r3, [r4, #760]	; 0x2f8
}
 8001660:	b005      	add	sp, #20
 8001662:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001664:	202c      	movs	r0, #44	; 0x2c
 8001666:	fb00 4001 	mla	r0, r0, r1, r4
 800166a:	f04f 0c01 	mov.w	ip, #1
 800166e:	f880 c03b 	strb.w	ip, [r0, #59]	; 0x3b
 8001672:	e7e7      	b.n	8001644 <HAL_HCD_HC_Init+0x5a>
  __HAL_LOCK(hhcd);
 8001674:	2002      	movs	r0, #2
 8001676:	e7f3      	b.n	8001660 <HAL_HCD_HC_Init+0x76>

08001678 <HAL_HCD_HC_Halt>:
  __HAL_LOCK(hhcd);
 8001678:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800167c:	2b01      	cmp	r3, #1
 800167e:	d00b      	beq.n	8001698 <HAL_HCD_HC_Halt+0x20>
{
 8001680:	b510      	push	{r4, lr}
 8001682:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8001684:	2301      	movs	r3, #1
 8001686:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800168a:	6800      	ldr	r0, [r0, #0]
 800168c:	f002 f819 	bl	80036c2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001690:	2000      	movs	r0, #0
 8001692:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8001696:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8001698:	2002      	movs	r0, #2
}
 800169a:	4770      	bx	lr

0800169c <HAL_HCD_Init>:
  if (hhcd == NULL)
 800169c:	2800      	cmp	r0, #0
 800169e:	d04d      	beq.n	800173c <HAL_HCD_Init+0xa0>
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	4604      	mov	r4, r0
  USBx = hhcd->Instance;
 80016a6:	6805      	ldr	r5, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80016a8:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d040      	beq.n	8001732 <HAL_HCD_Init+0x96>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80016b0:	2303      	movs	r3, #3
 80016b2:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80016b6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80016b8:	f413 7f80 	tst.w	r3, #256	; 0x100
 80016bc:	d101      	bne.n	80016c2 <HAL_HCD_Init+0x26>
    hhcd->Init.dma_enable = 0U;
 80016be:	2300      	movs	r3, #0
 80016c0:	6123      	str	r3, [r4, #16]
  __HAL_HCD_DISABLE(hhcd);
 80016c2:	6820      	ldr	r0, [r4, #0]
 80016c4:	f001 fdaf 	bl	8003226 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80016c8:	46a4      	mov	ip, r4
 80016ca:	f85c 6b10 	ldr.w	r6, [ip], #16
 80016ce:	46ee      	mov	lr, sp
 80016d0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80016d4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80016d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80016dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80016e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80016e4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80016e8:	1d25      	adds	r5, r4, #4
 80016ea:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 80016ee:	4630      	mov	r0, r6
 80016f0:	f001 fd4e 	bl	8003190 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80016f4:	2101      	movs	r1, #1
 80016f6:	6820      	ldr	r0, [r4, #0]
 80016f8:	f001 fe2c 	bl	8003354 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80016fc:	46a4      	mov	ip, r4
 80016fe:	f85c 6b10 	ldr.w	r6, [ip], #16
 8001702:	46ee      	mov	lr, sp
 8001704:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001708:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800170c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001710:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8001714:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8001718:	e88e 0003 	stmia.w	lr, {r0, r1}
 800171c:	e895 000e 	ldmia.w	r5, {r1, r2, r3}
 8001720:	4630      	mov	r0, r6
 8001722:	f001 fe49 	bl	80033b8 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8001726:	2301      	movs	r3, #1
 8001728:	f884 32f9 	strb.w	r3, [r4, #761]	; 0x2f9
  return HAL_OK;
 800172c:	2000      	movs	r0, #0
}
 800172e:	b00a      	add	sp, #40	; 0x28
 8001730:	bd70      	pop	{r4, r5, r6, pc}
    hhcd->Lock = HAL_UNLOCKED;
 8001732:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 8001736:	f003 faaf 	bl	8004c98 <HAL_HCD_MspInit>
 800173a:	e7b9      	b.n	80016b0 <HAL_HCD_Init+0x14>
    return HAL_ERROR;
 800173c:	2001      	movs	r0, #1
}
 800173e:	4770      	bx	lr

08001740 <HAL_HCD_HC_SubmitRequest>:
{
 8001740:	b570      	push	{r4, r5, r6, lr}
 8001742:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8001746:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 800174a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 800174e:	fb0c 0c01 	mla	ip, ip, r1, r0
 8001752:	f88c 203b 	strb.w	r2, [ip, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001756:	f88c 303f 	strb.w	r3, [ip, #63]	; 0x3f
  if (token == 0U)
 800175a:	b97d      	cbnz	r5, 800177c <HAL_HCD_HC_SubmitRequest+0x3c>
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800175c:	4664      	mov	r4, ip
 800175e:	f04f 0c03 	mov.w	ip, #3
 8001762:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8001766:	f89d c01c 	ldrb.w	ip, [sp, #28]
 800176a:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  switch (ep_type)
 800176e:	2b03      	cmp	r3, #3
 8001770:	f200 8081 	bhi.w	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
 8001774:	e8df f003 	tbb	[pc, r3]
 8001778:	5129790a 	.word	0x5129790a
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800177c:	242c      	movs	r4, #44	; 0x2c
 800177e:	fb04 0401 	mla	r4, r4, r1, r0
 8001782:	f04f 0c02 	mov.w	ip, #2
 8001786:	f884 c042 	strb.w	ip, [r4, #66]	; 0x42
 800178a:	e7f0      	b.n	800176e <HAL_HCD_HC_SubmitRequest+0x2e>
      if ((token == 1U) && (direction == 0U)) /*send data */
 800178c:	2d01      	cmp	r5, #1
 800178e:	d172      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
 8001790:	2a00      	cmp	r2, #0
 8001792:	d170      	bne.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
        if (length == 0U)
 8001794:	b92e      	cbnz	r6, 80017a2 <HAL_HCD_HC_SubmitRequest+0x62>
          hhcd->hc[ch_num].toggle_out = 1U;
 8001796:	232c      	movs	r3, #44	; 0x2c
 8001798:	fb03 0301 	mla	r3, r3, r1, r0
 800179c:	2201      	movs	r2, #1
 800179e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017a2:	232c      	movs	r3, #44	; 0x2c
 80017a4:	fb03 0301 	mla	r3, r3, r1, r0
 80017a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017ac:	b933      	cbnz	r3, 80017bc <HAL_HCD_HC_SubmitRequest+0x7c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017ae:	232c      	movs	r3, #44	; 0x2c
 80017b0:	fb03 0301 	mla	r3, r3, r1, r0
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017ba:	e05c      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017bc:	232c      	movs	r3, #44	; 0x2c
 80017be:	fb03 0301 	mla	r3, r3, r1, r0
 80017c2:	2202      	movs	r2, #2
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017c8:	e055      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 80017ca:	b992      	cbnz	r2, 80017f2 <HAL_HCD_HC_SubmitRequest+0xb2>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80017cc:	232c      	movs	r3, #44	; 0x2c
 80017ce:	fb03 0301 	mla	r3, r3, r1, r0
 80017d2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80017d6:	b92b      	cbnz	r3, 80017e4 <HAL_HCD_HC_SubmitRequest+0xa4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d8:	232c      	movs	r3, #44	; 0x2c
 80017da:	fb03 0301 	mla	r3, r3, r1, r0
 80017de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017e2:	e048      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017e4:	232c      	movs	r3, #44	; 0x2c
 80017e6:	fb03 0301 	mla	r3, r3, r1, r0
 80017ea:	2202      	movs	r2, #2
 80017ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80017f0:	e041      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80017f2:	232c      	movs	r3, #44	; 0x2c
 80017f4:	fb03 0301 	mla	r3, r3, r1, r0
 80017f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80017fc:	b933      	cbnz	r3, 800180c <HAL_HCD_HC_SubmitRequest+0xcc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017fe:	232c      	movs	r3, #44	; 0x2c
 8001800:	fb03 0301 	mla	r3, r3, r1, r0
 8001804:	2200      	movs	r2, #0
 8001806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800180a:	e034      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800180c:	232c      	movs	r3, #44	; 0x2c
 800180e:	fb03 0301 	mla	r3, r3, r1, r0
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001818:	e02d      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
      if (direction == 0U)
 800181a:	b992      	cbnz	r2, 8001842 <HAL_HCD_HC_SubmitRequest+0x102>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800181c:	232c      	movs	r3, #44	; 0x2c
 800181e:	fb03 0301 	mla	r3, r3, r1, r0
 8001822:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001826:	b92b      	cbnz	r3, 8001834 <HAL_HCD_HC_SubmitRequest+0xf4>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001828:	232c      	movs	r3, #44	; 0x2c
 800182a:	fb03 0301 	mla	r3, r3, r1, r0
 800182e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001832:	e020      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001834:	232c      	movs	r3, #44	; 0x2c
 8001836:	fb03 0301 	mla	r3, r3, r1, r0
 800183a:	2202      	movs	r2, #2
 800183c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001840:	e019      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001842:	232c      	movs	r3, #44	; 0x2c
 8001844:	fb03 0301 	mla	r3, r3, r1, r0
 8001848:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800184c:	b933      	cbnz	r3, 800185c <HAL_HCD_HC_SubmitRequest+0x11c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800184e:	232c      	movs	r3, #44	; 0x2c
 8001850:	fb03 0301 	mla	r3, r3, r1, r0
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800185a:	e00c      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800185c:	232c      	movs	r3, #44	; 0x2c
 800185e:	fb03 0301 	mla	r3, r3, r1, r0
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001868:	e005      	b.n	8001876 <HAL_HCD_HC_SubmitRequest+0x136>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800186a:	232c      	movs	r3, #44	; 0x2c
 800186c:	fb03 0301 	mla	r3, r3, r1, r0
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001876:	232c      	movs	r3, #44	; 0x2c
 8001878:	fb01 f303 	mul.w	r3, r1, r3
 800187c:	18c2      	adds	r2, r0, r3
 800187e:	9c05      	ldr	r4, [sp, #20]
 8001880:	6454      	str	r4, [r2, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8001882:	64d6      	str	r6, [r2, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001884:	2400      	movs	r4, #0
 8001886:	f882 4060 	strb.w	r4, [r2, #96]	; 0x60
  hhcd->hc[ch_num].xfer_count = 0U;
 800188a:	6514      	str	r4, [r2, #80]	; 0x50
  hhcd->hc[ch_num].ch_num = ch_num;
 800188c:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;
 8001890:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001894:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001898:	7c02      	ldrb	r2, [r0, #16]
 800189a:	4401      	add	r1, r0
 800189c:	6800      	ldr	r0, [r0, #0]
 800189e:	f001 ff95 	bl	80037cc <USB_HC_StartXfer>
}
 80018a2:	bd70      	pop	{r4, r5, r6, pc}

080018a4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80018a4:	b530      	push	{r4, r5, lr}
 80018a6:	b083      	sub	sp, #12
 80018a8:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80018aa:	6805      	ldr	r5, [r0, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80018ac:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80018b0:	9301      	str	r3, [sp, #4]
  hprt0_dup = USBx_HPRT0;
 80018b2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80018b6:	9300      	str	r3, [sp, #0]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80018b8:	9b00      	ldr	r3, [sp, #0]
 80018ba:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80018be:	9300      	str	r3, [sp, #0]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80018c0:	9b01      	ldr	r3, [sp, #4]
 80018c2:	f013 0f02 	tst.w	r3, #2
 80018c6:	d007      	beq.n	80018d8 <HCD_Port_IRQHandler+0x34>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80018c8:	9b01      	ldr	r3, [sp, #4]
 80018ca:	f013 0f01 	tst.w	r3, #1
 80018ce:	d125      	bne.n	800191c <HCD_Port_IRQHandler+0x78>
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80018d0:	9b00      	ldr	r3, [sp, #0]
 80018d2:	f043 0302 	orr.w	r3, r3, #2
 80018d6:	9300      	str	r3, [sp, #0]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80018d8:	9b01      	ldr	r3, [sp, #4]
 80018da:	f013 0f08 	tst.w	r3, #8
 80018de:	d010      	beq.n	8001902 <HCD_Port_IRQHandler+0x5e>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80018e0:	9b00      	ldr	r3, [sp, #0]
 80018e2:	f043 0308 	orr.w	r3, r3, #8
 80018e6:	9300      	str	r3, [sp, #0]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80018e8:	9b01      	ldr	r3, [sp, #4]
 80018ea:	f013 0f04 	tst.w	r3, #4
 80018ee:	d02d      	beq.n	800194c <HCD_Port_IRQHandler+0xa8>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80018f0:	69a3      	ldr	r3, [r4, #24]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d015      	beq.n	8001922 <HCD_Port_IRQHandler+0x7e>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80018f6:	68e3      	ldr	r3, [r4, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d022      	beq.n	8001942 <HCD_Port_IRQHandler+0x9e>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80018fc:	4620      	mov	r0, r4
 80018fe:	f003 fa28 	bl	8004d52 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8001902:	9b01      	ldr	r3, [sp, #4]
 8001904:	f013 0f20 	tst.w	r3, #32
 8001908:	d003      	beq.n	8001912 <HCD_Port_IRQHandler+0x6e>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800190a:	9b00      	ldr	r3, [sp, #0]
 800190c:	f043 0320 	orr.w	r3, r3, #32
 8001910:	9300      	str	r3, [sp, #0]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8001912:	9b00      	ldr	r3, [sp, #0]
 8001914:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
}
 8001918:	b003      	add	sp, #12
 800191a:	bd30      	pop	{r4, r5, pc}
      HAL_HCD_Connect_Callback(hhcd);
 800191c:	f003 fa0c 	bl	8004d38 <HAL_HCD_Connect_Callback>
 8001920:	e7d6      	b.n	80018d0 <HCD_Port_IRQHandler+0x2c>
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8001928:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800192c:	d004      	beq.n	8001938 <HCD_Port_IRQHandler+0x94>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800192e:	2101      	movs	r1, #1
 8001930:	6820      	ldr	r0, [r4, #0]
 8001932:	f001 fdbd 	bl	80034b0 <USB_InitFSLSPClkSel>
 8001936:	e7e1      	b.n	80018fc <HCD_Port_IRQHandler+0x58>
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8001938:	2102      	movs	r1, #2
 800193a:	6820      	ldr	r0, [r4, #0]
 800193c:	f001 fdb8 	bl	80034b0 <USB_InitFSLSPClkSel>
 8001940:	e7dc      	b.n	80018fc <HCD_Port_IRQHandler+0x58>
          USBx_HOST->HFIR = 60000U;
 8001942:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001946:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 800194a:	e7d7      	b.n	80018fc <HCD_Port_IRQHandler+0x58>
      HAL_HCD_PortDisabled_Callback(hhcd);
 800194c:	4620      	mov	r0, r4
 800194e:	f003 fa06 	bl	8004d5e <HAL_HCD_PortDisabled_Callback>
 8001952:	e7d6      	b.n	8001902 <HCD_Port_IRQHandler+0x5e>

08001954 <HCD_HC_IN_IRQHandler>:
{
 8001954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001956:	4604      	mov	r4, r0
 8001958:	460e      	mov	r6, r1
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800195a:	6807      	ldr	r7, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800195c:	eb07 1741 	add.w	r7, r7, r1, lsl #5
 8001960:	f507 65a0 	add.w	r5, r7, #1280	; 0x500
 8001964:	68ab      	ldr	r3, [r5, #8]
 8001966:	f013 0f04 	tst.w	r3, #4
 800196a:	d10a      	bne.n	8001982 <HCD_HC_IN_IRQHandler+0x2e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800196c:	68ab      	ldr	r3, [r5, #8]
 800196e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001972:	d149      	bne.n	8001a08 <HCD_HC_IN_IRQHandler+0xb4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001974:	68ab      	ldr	r3, [r5, #8]
 8001976:	f013 0f20 	tst.w	r3, #32
 800197a:	d052      	beq.n	8001a22 <HCD_HC_IN_IRQHandler+0xce>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800197c:	2320      	movs	r3, #32
 800197e:	60ab      	str	r3, [r5, #8]
 8001980:	e00a      	b.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001982:	2304      	movs	r3, #4
 8001984:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001986:	232c      	movs	r3, #44	; 0x2c
 8001988:	fb03 0301 	mla	r3, r3, r1, r0
 800198c:	2206      	movs	r2, #6
 800198e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001992:	6800      	ldr	r0, [r0, #0]
 8001994:	f001 fe95 	bl	80036c2 <USB_HC_Halt>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001998:	68ab      	ldr	r3, [r5, #8]
 800199a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800199e:	d171      	bne.n	8001a84 <HCD_HC_IN_IRQHandler+0x130>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80019a0:	68ab      	ldr	r3, [r5, #8]
 80019a2:	f013 0f01 	tst.w	r3, #1
 80019a6:	f000 809d 	beq.w	8001ae4 <HCD_HC_IN_IRQHandler+0x190>
    if (hhcd->Init.dma_enable != 0U)
 80019aa:	6923      	ldr	r3, [r4, #16]
 80019ac:	b143      	cbz	r3, 80019c0 <HCD_HC_IN_IRQHandler+0x6c>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019ae:	232c      	movs	r3, #44	; 0x2c
 80019b0:	fb03 4306 	mla	r3, r3, r6, r4
 80019b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80019b6:	6929      	ldr	r1, [r5, #16]
 80019b8:	f3c1 0112 	ubfx	r1, r1, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80019bc:	1a52      	subs	r2, r2, r1
 80019be:	651a      	str	r2, [r3, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 80019c0:	232c      	movs	r3, #44	; 0x2c
 80019c2:	fb03 4306 	mla	r3, r3, r6, r4
 80019c6:	2201      	movs	r2, #1
 80019c8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 80019cc:	2100      	movs	r1, #0
 80019ce:	65d9      	str	r1, [r3, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80019d0:	60aa      	str	r2, [r5, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80019d2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d05c      	beq.n	8001a94 <HCD_HC_IN_IRQHandler+0x140>
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d05a      	beq.n	8001a94 <HCD_HC_IN_IRQHandler+0x140>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d001      	beq.n	80019e6 <HCD_HC_IN_IRQHandler+0x92>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d15c      	bne.n	8001aa0 <HCD_HC_IN_IRQHandler+0x14c>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80019e6:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 80019ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80019ee:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80019f2:	232c      	movs	r3, #44	; 0x2c
 80019f4:	fb03 4306 	mla	r3, r3, r6, r4
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80019fe:	4631      	mov	r1, r6
 8001a00:	4620      	mov	r0, r4
 8001a02:	f003 f9a5 	bl	8004d50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001a06:	e04b      	b.n	8001aa0 <HCD_HC_IN_IRQHandler+0x14c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a0c:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001a0e:	232c      	movs	r3, #44	; 0x2c
 8001a10:	fb03 0301 	mla	r3, r3, r1, r0
 8001a14:	2207      	movs	r2, #7
 8001a16:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a1a:	6800      	ldr	r0, [r0, #0]
 8001a1c:	f001 fe51 	bl	80036c2 <USB_HC_Halt>
 8001a20:	e7ba      	b.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001a22:	68ab      	ldr	r3, [r5, #8]
 8001a24:	f013 0f08 	tst.w	r3, #8
 8001a28:	d113      	bne.n	8001a52 <HCD_HC_IN_IRQHandler+0xfe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001a2a:	68ab      	ldr	r3, [r5, #8]
 8001a2c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a30:	d11b      	bne.n	8001a6a <HCD_HC_IN_IRQHandler+0x116>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001a32:	68ab      	ldr	r3, [r5, #8]
 8001a34:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001a38:	d0ae      	beq.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a3a:	2380      	movs	r3, #128	; 0x80
 8001a3c:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001a3e:	232c      	movs	r3, #44	; 0x2c
 8001a40:	fb03 0301 	mla	r3, r3, r1, r0
 8001a44:	2206      	movs	r2, #6
 8001a46:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a4a:	6800      	ldr	r0, [r0, #0]
 8001a4c:	f001 fe39 	bl	80036c2 <USB_HC_Halt>
 8001a50:	e7a2      	b.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001a52:	2308      	movs	r3, #8
 8001a54:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001a56:	232c      	movs	r3, #44	; 0x2c
 8001a58:	fb03 0301 	mla	r3, r3, r1, r0
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a62:	6800      	ldr	r0, [r0, #0]
 8001a64:	f001 fe2d 	bl	80036c2 <USB_HC_Halt>
 8001a68:	e796      	b.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001a70:	232c      	movs	r3, #44	; 0x2c
 8001a72:	fb03 0301 	mla	r3, r3, r1, r0
 8001a76:	2208      	movs	r2, #8
 8001a78:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7c:	6800      	ldr	r0, [r0, #0]
 8001a7e:	f001 fe20 	bl	80036c2 <USB_HC_Halt>
 8001a82:	e789      	b.n	8001998 <HCD_HC_IN_IRQHandler+0x44>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a84:	4631      	mov	r1, r6
 8001a86:	6820      	ldr	r0, [r4, #0]
 8001a88:	f001 fe1b 	bl	80036c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001a8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a90:	60ab      	str	r3, [r5, #8]
}
 8001a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a94:	4631      	mov	r1, r6
 8001a96:	6820      	ldr	r0, [r4, #0]
 8001a98:	f001 fe13 	bl	80036c2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	60ab      	str	r3, [r5, #8]
    if (hhcd->Init.dma_enable == 1U)
 8001aa0:	6923      	ldr	r3, [r4, #16]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d009      	beq.n	8001aba <HCD_HC_IN_IRQHandler+0x166>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001aa6:	232c      	movs	r3, #44	; 0x2c
 8001aa8:	fb03 4306 	mla	r3, r3, r6, r4
 8001aac:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001ab0:	f082 0201 	eor.w	r2, r2, #1
 8001ab4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001ab8:	e7eb      	b.n	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8001aba:	232c      	movs	r3, #44	; 0x2c
 8001abc:	fb03 4306 	mla	r3, r3, r6, r4
 8001ac0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ac2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aca:	f013 0f01 	tst.w	r3, #1
 8001ace:	d0e0      	beq.n	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8001ad0:	232c      	movs	r3, #44	; 0x2c
 8001ad2:	fb03 4306 	mla	r3, r3, r6, r4
 8001ad6:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8001ada:	f082 0201 	eor.w	r2, r2, #1
 8001ade:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001ae2:	e7d6      	b.n	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001ae4:	68ab      	ldr	r3, [r5, #8]
 8001ae6:	f013 0f02 	tst.w	r3, #2
 8001aea:	d05e      	beq.n	8001baa <HCD_HC_IN_IRQHandler+0x256>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001aec:	232c      	movs	r3, #44	; 0x2c
 8001aee:	fb03 4306 	mla	r3, r3, r6, r4
 8001af2:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d007      	beq.n	8001b0a <HCD_HC_IN_IRQHandler+0x1b6>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001afa:	3b03      	subs	r3, #3
 8001afc:	2b05      	cmp	r3, #5
 8001afe:	d80a      	bhi.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
 8001b00:	e8df f003 	tbb	[pc, r3]
 8001b04:	1c15093a 	.word	0x1c15093a
 8001b08:	1c49      	.short	0x1c49
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001b0a:	232c      	movs	r3, #44	; 0x2c
 8001b0c:	fb03 4306 	mla	r3, r3, r6, r4
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001b16:	2302      	movs	r3, #2
 8001b18:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001b1a:	232c      	movs	r3, #44	; 0x2c
 8001b1c:	fb03 4306 	mla	r3, r3, r6, r4
 8001b20:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001b24:	4631      	mov	r1, r6
 8001b26:	4620      	mov	r0, r4
 8001b28:	f003 f912 	bl	8004d50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001b2c:	e7b1      	b.n	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8001b2e:	232c      	movs	r3, #44	; 0x2c
 8001b30:	fb03 4306 	mla	r3, r3, r6, r4
 8001b34:	2205      	movs	r2, #5
 8001b36:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001b3a:	e7ec      	b.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
      hhcd->hc[ch_num].ErrCnt++;
 8001b3c:	222c      	movs	r2, #44	; 0x2c
 8001b3e:	fb02 4206 	mla	r2, r2, r6, r4
 8001b42:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001b44:	3301      	adds	r3, #1
 8001b46:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	d906      	bls.n	8001b5a <HCD_HC_IN_IRQHandler+0x206>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001b52:	2204      	movs	r2, #4
 8001b54:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001b58:	e7dd      	b.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001b5a:	232c      	movs	r3, #44	; 0x2c
 8001b5c:	fb03 4306 	mla	r3, r3, r6, r4
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b66:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b72:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001b76:	e7ce      	b.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001b78:	232c      	movs	r3, #44	; 0x2c
 8001b7a:	fb03 4306 	mla	r3, r3, r6, r4
 8001b7e:	2202      	movs	r2, #2
 8001b80:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001b84:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001b88:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001b8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001b90:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
 8001b94:	e7bf      	b.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
      hhcd->hc[ch_num].ErrCnt++;
 8001b96:	232c      	movs	r3, #44	; 0x2c
 8001b98:	fb03 4306 	mla	r3, r3, r6, r4
 8001b9c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b9e:	3201      	adds	r2, #1
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ba2:	2204      	movs	r2, #4
 8001ba4:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001ba8:	e7b5      	b.n	8001b16 <HCD_HC_IN_IRQHandler+0x1c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001baa:	68ab      	ldr	r3, [r5, #8]
 8001bac:	f013 0f10 	tst.w	r3, #16
 8001bb0:	f43f af6f 	beq.w	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001bb4:	232c      	movs	r3, #44	; 0x2c
 8001bb6:	fb03 4306 	mla	r3, r3, r6, r4
 8001bba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d00c      	beq.n	8001bdc <HCD_HC_IN_IRQHandler+0x288>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001bc2:	b10b      	cbz	r3, 8001bc8 <HCD_HC_IN_IRQHandler+0x274>
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d106      	bne.n	8001bd6 <HCD_HC_IN_IRQHandler+0x282>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001bc8:	232c      	movs	r3, #44	; 0x2c
 8001bca:	fb03 4306 	mla	r3, r3, r6, r4
 8001bce:	2200      	movs	r2, #0
 8001bd0:	65da      	str	r2, [r3, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8001bd2:	6923      	ldr	r3, [r4, #16]
 8001bd4:	b163      	cbz	r3, 8001bf0 <HCD_HC_IN_IRQHandler+0x29c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	60ab      	str	r3, [r5, #8]
}
 8001bda:	e75a      	b.n	8001a92 <HCD_HC_IN_IRQHandler+0x13e>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001bdc:	232c      	movs	r3, #44	; 0x2c
 8001bde:	fb03 4306 	mla	r3, r3, r6, r4
 8001be2:	2200      	movs	r2, #0
 8001be4:	65da      	str	r2, [r3, #92]	; 0x5c
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001be6:	4631      	mov	r1, r6
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	f001 fd6a 	bl	80036c2 <USB_HC_Halt>
 8001bee:	e7f2      	b.n	8001bd6 <HCD_HC_IN_IRQHandler+0x282>
        hhcd->hc[ch_num].state = HC_NAK;
 8001bf0:	232c      	movs	r3, #44	; 0x2c
 8001bf2:	fb03 4306 	mla	r3, r3, r6, r4
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bfc:	4631      	mov	r1, r6
 8001bfe:	6820      	ldr	r0, [r4, #0]
 8001c00:	f001 fd5f 	bl	80036c2 <USB_HC_Halt>
 8001c04:	e7e7      	b.n	8001bd6 <HCD_HC_IN_IRQHandler+0x282>

08001c06 <HCD_HC_OUT_IRQHandler>:
{
 8001c06:	b538      	push	{r3, r4, r5, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001c08:	6803      	ldr	r3, [r0, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001c0a:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 8001c0e:	f502 65a0 	add.w	r5, r2, #1280	; 0x500
 8001c12:	68ac      	ldr	r4, [r5, #8]
 8001c14:	f014 0f04 	tst.w	r4, #4
 8001c18:	d119      	bne.n	8001c4e <HCD_HC_OUT_IRQHandler+0x48>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001c1a:	68ac      	ldr	r4, [r5, #8]
 8001c1c:	f014 0f20 	tst.w	r4, #32
 8001c20:	d021      	beq.n	8001c66 <HCD_HC_OUT_IRQHandler+0x60>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001c22:	2320      	movs	r3, #32
 8001c24:	60ab      	str	r3, [r5, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001c26:	232c      	movs	r3, #44	; 0x2c
 8001c28:	fb03 0301 	mla	r3, r3, r1, r0
 8001c2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d117      	bne.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].do_ping = 0U;
 8001c34:	232c      	movs	r3, #44	; 0x2c
 8001c36:	fb03 0301 	mla	r3, r3, r1, r0
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001c40:	2202      	movs	r2, #2
 8001c42:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c46:	6800      	ldr	r0, [r0, #0]
 8001c48:	f001 fd3b 	bl	80036c2 <USB_HC_Halt>
 8001c4c:	e00a      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001c4e:	2304      	movs	r3, #4
 8001c50:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001c52:	232c      	movs	r3, #44	; 0x2c
 8001c54:	fb03 0301 	mla	r3, r3, r1, r0
 8001c58:	2206      	movs	r2, #6
 8001c5a:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c5e:	6800      	ldr	r0, [r0, #0]
 8001c60:	f001 fd2f 	bl	80036c2 <USB_HC_Halt>
}
 8001c64:	bd38      	pop	{r3, r4, r5, pc}
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c66:	68ac      	ldr	r4, [r5, #8]
 8001c68:	f414 7f00 	tst.w	r4, #512	; 0x200
 8001c6c:	d11f      	bne.n	8001cae <HCD_HC_OUT_IRQHandler+0xa8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001c6e:	68ac      	ldr	r4, [r5, #8]
 8001c70:	f014 0f01 	tst.w	r4, #1
 8001c74:	d022      	beq.n	8001cbc <HCD_HC_OUT_IRQHandler+0xb6>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c76:	232c      	movs	r3, #44	; 0x2c
 8001c78:	fb03 0301 	mla	r3, r3, r1, r0
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	65da      	str	r2, [r3, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c80:	68ab      	ldr	r3, [r5, #8]
 8001c82:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001c86:	d007      	beq.n	8001c98 <HCD_HC_OUT_IRQHandler+0x92>
      hhcd->hc[ch_num].do_ping = 1U;
 8001c88:	232c      	movs	r3, #44	; 0x2c
 8001c8a:	fb03 0301 	mla	r3, r3, r1, r0
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001c94:	2340      	movs	r3, #64	; 0x40
 8001c96:	60ab      	str	r3, [r5, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	60aa      	str	r2, [r5, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001c9c:	232c      	movs	r3, #44	; 0x2c
 8001c9e:	fb03 0301 	mla	r3, r3, r1, r0
 8001ca2:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca6:	6800      	ldr	r0, [r0, #0]
 8001ca8:	f001 fd0b 	bl	80036c2 <USB_HC_Halt>
 8001cac:	e7da      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cb2:	60ab      	str	r3, [r5, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001cb4:	6800      	ldr	r0, [r0, #0]
 8001cb6:	f001 fd04 	bl	80036c2 <USB_HC_Halt>
 8001cba:	e7d3      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001cbc:	68ac      	ldr	r4, [r5, #8]
 8001cbe:	f014 0f40 	tst.w	r4, #64	; 0x40
 8001cc2:	d124      	bne.n	8001d0e <HCD_HC_OUT_IRQHandler+0x108>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001cc4:	68ac      	ldr	r4, [r5, #8]
 8001cc6:	f014 0f08 	tst.w	r4, #8
 8001cca:	d131      	bne.n	8001d30 <HCD_HC_OUT_IRQHandler+0x12a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001ccc:	68ac      	ldr	r4, [r5, #8]
 8001cce:	f014 0f10 	tst.w	r4, #16
 8001cd2:	d039      	beq.n	8001d48 <HCD_HC_OUT_IRQHandler+0x142>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001cd4:	222c      	movs	r2, #44	; 0x2c
 8001cd6:	fb02 0201 	mla	r2, r2, r1, r0
 8001cda:	2400      	movs	r4, #0
 8001cdc:	65d4      	str	r4, [r2, #92]	; 0x5c
    hhcd->hc[ch_num].state = HC_NAK;
 8001cde:	2403      	movs	r4, #3
 8001ce0:	f882 4061 	strb.w	r4, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001ce4:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8001ce8:	b95a      	cbnz	r2, 8001d02 <HCD_HC_OUT_IRQHandler+0xfc>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8001cea:	222c      	movs	r2, #44	; 0x2c
 8001cec:	fb02 0201 	mla	r2, r2, r1, r0
 8001cf0:	f892 203c 	ldrb.w	r2, [r2, #60]	; 0x3c
 8001cf4:	b92a      	cbnz	r2, 8001d02 <HCD_HC_OUT_IRQHandler+0xfc>
        hhcd->hc[ch_num].do_ping = 1U;
 8001cf6:	222c      	movs	r2, #44	; 0x2c
 8001cf8:	fb02 0201 	mla	r2, r2, r1, r0
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 fcdd 	bl	80036c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001d08:	2310      	movs	r3, #16
 8001d0a:	60ab      	str	r3, [r5, #8]
 8001d0c:	e7aa      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
    hhcd->hc[ch_num].state = HC_NYET;
 8001d0e:	222c      	movs	r2, #44	; 0x2c
 8001d10:	fb02 0201 	mla	r2, r2, r1, r0
 8001d14:	2004      	movs	r0, #4
 8001d16:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d20:	2000      	movs	r0, #0
 8001d22:	65d0      	str	r0, [r2, #92]	; 0x5c
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d24:	4618      	mov	r0, r3
 8001d26:	f001 fccc 	bl	80036c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001d2a:	2340      	movs	r3, #64	; 0x40
 8001d2c:	60ab      	str	r3, [r5, #8]
 8001d2e:	e799      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001d30:	2308      	movs	r3, #8
 8001d32:	60ab      	str	r3, [r5, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001d34:	232c      	movs	r3, #44	; 0x2c
 8001d36:	fb03 0301 	mla	r3, r3, r1, r0
 8001d3a:	2205      	movs	r2, #5
 8001d3c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d40:	6800      	ldr	r0, [r0, #0]
 8001d42:	f001 fcbe 	bl	80036c2 <USB_HC_Halt>
 8001d46:	e78d      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001d48:	68ac      	ldr	r4, [r5, #8]
 8001d4a:	f014 0f80 	tst.w	r4, #128	; 0x80
 8001d4e:	d025      	beq.n	8001d9c <HCD_HC_OUT_IRQHandler+0x196>
    if (hhcd->Init.dma_enable == 0U)
 8001d50:	6902      	ldr	r2, [r0, #16]
 8001d52:	b182      	cbz	r2, 8001d76 <HCD_HC_OUT_IRQHandler+0x170>
      hhcd->hc[ch_num].ErrCnt++;
 8001d54:	222c      	movs	r2, #44	; 0x2c
 8001d56:	fb02 0201 	mla	r2, r2, r1, r0
 8001d5a:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	65d3      	str	r3, [r2, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d812      	bhi.n	8001d8a <HCD_HC_OUT_IRQHandler+0x184>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001d64:	232c      	movs	r3, #44	; 0x2c
 8001d66:	fb03 0301 	mla	r3, r3, r1, r0
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001d70:	2380      	movs	r3, #128	; 0x80
 8001d72:	60ab      	str	r3, [r5, #8]
 8001d74:	e776      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8001d76:	222c      	movs	r2, #44	; 0x2c
 8001d78:	fb02 0201 	mla	r2, r2, r1, r0
 8001d7c:	2006      	movs	r0, #6
 8001d7e:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fc9d 	bl	80036c2 <USB_HC_Halt>
 8001d88:	e7f2      	b.n	8001d70 <HCD_HC_OUT_IRQHandler+0x16a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	65da      	str	r2, [r3, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001d90:	2204      	movs	r2, #4
 8001d92:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001d96:	f002 ffdb 	bl	8004d50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001d9a:	e7e9      	b.n	8001d70 <HCD_HC_OUT_IRQHandler+0x16a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001d9c:	68ac      	ldr	r4, [r5, #8]
 8001d9e:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8001da2:	d113      	bne.n	8001dcc <HCD_HC_OUT_IRQHandler+0x1c6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001da4:	68ab      	ldr	r3, [r5, #8]
 8001da6:	f013 0f02 	tst.w	r3, #2
 8001daa:	f43f af5b 	beq.w	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001dae:	232c      	movs	r3, #44	; 0x2c
 8001db0:	fb03 0301 	mla	r3, r3, r1, r0
 8001db4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d014      	beq.n	8001de6 <HCD_HC_OUT_IRQHandler+0x1e0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	2b05      	cmp	r3, #5
 8001dc0:	d81d      	bhi.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
 8001dc2:	e8df f003 	tbb	[pc, r3]
 8001dc6:	564f      	.short	0x564f
 8001dc8:	641c645d 	.word	0x641c645d
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001dcc:	222c      	movs	r2, #44	; 0x2c
 8001dce:	fb02 0201 	mla	r2, r2, r1, r0
 8001dd2:	2008      	movs	r0, #8
 8001dd4:	f882 0061 	strb.w	r0, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f001 fc72 	bl	80036c2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de2:	60ab      	str	r3, [r5, #8]
 8001de4:	e73e      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001de6:	232c      	movs	r3, #44	; 0x2c
 8001de8:	fb03 0301 	mla	r3, r3, r1, r0
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8001df2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001df6:	3b02      	subs	r3, #2
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d909      	bls.n	8001e12 <HCD_HC_OUT_IRQHandler+0x20c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001dfe:	2302      	movs	r3, #2
 8001e00:	60ab      	str	r3, [r5, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e02:	232c      	movs	r3, #44	; 0x2c
 8001e04:	fb03 0301 	mla	r3, r3, r1, r0
 8001e08:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8001e0c:	f002 ffa0 	bl	8004d50 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001e10:	e728      	b.n	8001c64 <HCD_HC_OUT_IRQHandler+0x5e>
        if (hhcd->Init.dma_enable == 0U)
 8001e12:	6904      	ldr	r4, [r0, #16]
 8001e14:	b944      	cbnz	r4, 8001e28 <HCD_HC_OUT_IRQHandler+0x222>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8001e16:	232c      	movs	r3, #44	; 0x2c
 8001e18:	fb03 0301 	mla	r3, r3, r1, r0
 8001e1c:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001e20:	f082 0201 	eor.w	r2, r2, #1
 8001e24:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8001e28:	2c01      	cmp	r4, #1
 8001e2a:	d1e8      	bne.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
 8001e2c:	232c      	movs	r3, #44	; 0x2c
 8001e2e:	fb03 0301 	mla	r3, r3, r1, r0
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0e2      	beq.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8001e38:	222c      	movs	r2, #44	; 0x2c
 8001e3a:	fb02 0201 	mla	r2, r2, r1, r0
 8001e3e:	f8b2 2040 	ldrh.w	r2, [r2, #64]	; 0x40
 8001e42:	4413      	add	r3, r2
 8001e44:	3b01      	subs	r3, #1
 8001e46:	fbb3 f3f2 	udiv	r3, r3, r2
          if ((num_packets & 1U) != 0U)
 8001e4a:	f013 0f01 	tst.w	r3, #1
 8001e4e:	d0d6      	beq.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8001e50:	232c      	movs	r3, #44	; 0x2c
 8001e52:	fb03 0301 	mla	r3, r3, r1, r0
 8001e56:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 8001e5a:	f082 0201 	eor.w	r2, r2, #1
 8001e5e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 8001e62:	e7cc      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001e64:	232c      	movs	r3, #44	; 0x2c
 8001e66:	fb03 0301 	mla	r3, r3, r1, r0
 8001e6a:	2202      	movs	r2, #2
 8001e6c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001e70:	e7c5      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001e72:	232c      	movs	r3, #44	; 0x2c
 8001e74:	fb03 0301 	mla	r3, r3, r1, r0
 8001e78:	2202      	movs	r2, #2
 8001e7a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001e7e:	e7be      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001e80:	232c      	movs	r3, #44	; 0x2c
 8001e82:	fb03 0301 	mla	r3, r3, r1, r0
 8001e86:	2205      	movs	r2, #5
 8001e88:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 8001e8c:	e7b7      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
      hhcd->hc[ch_num].ErrCnt++;
 8001e8e:	242c      	movs	r4, #44	; 0x2c
 8001e90:	fb04 0401 	mla	r4, r4, r1, r0
 8001e94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001e96:	3301      	adds	r3, #1
 8001e98:	65e3      	str	r3, [r4, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d905      	bls.n	8001eaa <HCD_HC_OUT_IRQHandler+0x2a4>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	65e2      	str	r2, [r4, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
 8001ea8:	e7a9      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001eaa:	232c      	movs	r3, #44	; 0x2c
 8001eac:	fb03 0301 	mla	r3, r3, r1, r0
 8001eb0:	2402      	movs	r4, #2
 8001eb2:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001eb6:	f8d2 3500 	ldr.w	r3, [r2, #1280]	; 0x500
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001eba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001ebe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001ec2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
 8001ec6:	e79a      	b.n	8001dfe <HCD_HC_OUT_IRQHandler+0x1f8>

08001ec8 <HAL_HCD_IRQHandler>:
{
 8001ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eca:	4604      	mov	r4, r0
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ecc:	6805      	ldr	r5, [r0, #0]
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ece:	4628      	mov	r0, r5
 8001ed0:	f001 fa3c 	bl	800334c <USB_GetMode>
 8001ed4:	2801      	cmp	r0, #1
 8001ed6:	d000      	beq.n	8001eda <HAL_HCD_IRQHandler+0x12>
}
 8001ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001eda:	6820      	ldr	r0, [r4, #0]
 8001edc:	f001 fa32 	bl	8003344 <USB_ReadInterrupts>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	d0f9      	beq.n	8001ed8 <HAL_HCD_IRQHandler+0x10>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ee4:	6820      	ldr	r0, [r4, #0]
 8001ee6:	f001 fa2d 	bl	8003344 <USB_ReadInterrupts>
 8001eea:	f410 1f00 	tst.w	r0, #2097152	; 0x200000
 8001eee:	d003      	beq.n	8001ef8 <HAL_HCD_IRQHandler+0x30>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001ef6:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001ef8:	6820      	ldr	r0, [r4, #0]
 8001efa:	f001 fa23 	bl	8003344 <USB_ReadInterrupts>
 8001efe:	f410 1f80 	tst.w	r0, #1048576	; 0x100000
 8001f02:	d003      	beq.n	8001f0c <HAL_HCD_IRQHandler+0x44>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f0a:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f0c:	6820      	ldr	r0, [r4, #0]
 8001f0e:	f001 fa19 	bl	8003344 <USB_ReadInterrupts>
 8001f12:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8001f16:	d003      	beq.n	8001f20 <HAL_HCD_IRQHandler+0x58>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f18:	6823      	ldr	r3, [r4, #0]
 8001f1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f1e:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	f001 fa0f 	bl	8003344 <USB_ReadInterrupts>
 8001f26:	f010 0f02 	tst.w	r0, #2
 8001f2a:	d002      	beq.n	8001f32 <HAL_HCD_IRQHandler+0x6a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001f32:	6820      	ldr	r0, [r4, #0]
 8001f34:	f001 fa06 	bl	8003344 <USB_ReadInterrupts>
 8001f38:	f010 5f00 	tst.w	r0, #536870912	; 0x20000000
 8001f3c:	d008      	beq.n	8001f50 <HAL_HCD_IRQHandler+0x88>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001f3e:	6823      	ldr	r3, [r4, #0]
 8001f40:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001f44:	615a      	str	r2, [r3, #20]
      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001f46:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8001f4a:	f013 0f01 	tst.w	r3, #1
 8001f4e:	d01d      	beq.n	8001f8c <HAL_HCD_IRQHandler+0xc4>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f001 f9f7 	bl	8003344 <USB_ReadInterrupts>
 8001f56:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8001f5a:	d126      	bne.n	8001faa <HAL_HCD_IRQHandler+0xe2>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f5c:	6820      	ldr	r0, [r4, #0]
 8001f5e:	f001 f9f1 	bl	8003344 <USB_ReadInterrupts>
 8001f62:	f010 0f08 	tst.w	r0, #8
 8001f66:	d124      	bne.n	8001fb2 <HAL_HCD_IRQHandler+0xea>
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001f68:	6820      	ldr	r0, [r4, #0]
 8001f6a:	f001 f9eb 	bl	8003344 <USB_ReadInterrupts>
 8001f6e:	f010 0f10 	tst.w	r0, #16
 8001f72:	d125      	bne.n	8001fc0 <HAL_HCD_IRQHandler+0xf8>
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f74:	6820      	ldr	r0, [r4, #0]
 8001f76:	f001 f9e5 	bl	8003344 <USB_ReadInterrupts>
 8001f7a:	f010 7f00 	tst.w	r0, #33554432	; 0x2000000
 8001f7e:	d0ab      	beq.n	8001ed8 <HAL_HCD_IRQHandler+0x10>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f80:	6820      	ldr	r0, [r4, #0]
 8001f82:	f001 fb99 	bl	80036b8 <USB_HC_ReadInterrupt>
 8001f86:	4607      	mov	r7, r0
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f88:	2600      	movs	r6, #0
 8001f8a:	e02c      	b.n	8001fe6 <HAL_HCD_IRQHandler+0x11e>
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4628      	mov	r0, r5
 8001f90:	f001 f950 	bl	8003234 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001f94:	4628      	mov	r0, r5
 8001f96:	f001 f975 	bl	8003284 <USB_FlushRxFifo>
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	6820      	ldr	r0, [r4, #0]
 8001f9e:	f001 fa87 	bl	80034b0 <USB_InitFSLSPClkSel>
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f002 fece 	bl	8004d44 <HAL_HCD_Disconnect_Callback>
 8001fa8:	e7d2      	b.n	8001f50 <HAL_HCD_IRQHandler+0x88>
      HCD_Port_IRQHandler(hhcd);
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7ff fc7a 	bl	80018a4 <HCD_Port_IRQHandler>
 8001fb0:	e7d4      	b.n	8001f5c <HAL_HCD_IRQHandler+0x94>
      HAL_HCD_SOF_Callback(hhcd);
 8001fb2:	4620      	mov	r0, r4
 8001fb4:	f002 feba 	bl	8004d2c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001fb8:	6823      	ldr	r3, [r4, #0]
 8001fba:	2208      	movs	r2, #8
 8001fbc:	615a      	str	r2, [r3, #20]
 8001fbe:	e7d3      	b.n	8001f68 <HAL_HCD_IRQHandler+0xa0>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fc0:	6822      	ldr	r2, [r4, #0]
 8001fc2:	6993      	ldr	r3, [r2, #24]
 8001fc4:	f023 0310 	bic.w	r3, r3, #16
 8001fc8:	6193      	str	r3, [r2, #24]
      HCD_RXQLVL_IRQHandler(hhcd);
 8001fca:	4620      	mov	r0, r4
 8001fcc:	f7ff fabe 	bl	800154c <HCD_RXQLVL_IRQHandler>
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fd0:	6822      	ldr	r2, [r4, #0]
 8001fd2:	6993      	ldr	r3, [r2, #24]
 8001fd4:	f043 0310 	orr.w	r3, r3, #16
 8001fd8:	6193      	str	r3, [r2, #24]
 8001fda:	e7cb      	b.n	8001f74 <HAL_HCD_IRQHandler+0xac>
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001fdc:	b2f1      	uxtb	r1, r6
 8001fde:	4620      	mov	r0, r4
 8001fe0:	f7ff fe11 	bl	8001c06 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fe4:	3601      	adds	r6, #1
 8001fe6:	68a3      	ldr	r3, [r4, #8]
 8001fe8:	42b3      	cmp	r3, r6
 8001fea:	d912      	bls.n	8002012 <HAL_HCD_IRQHandler+0x14a>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001fec:	f006 030f 	and.w	r3, r6, #15
 8001ff0:	fa27 f303 	lsr.w	r3, r7, r3
 8001ff4:	f013 0f01 	tst.w	r3, #1
 8001ff8:	d0f4      	beq.n	8001fe4 <HAL_HCD_IRQHandler+0x11c>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001ffa:	eb05 1346 	add.w	r3, r5, r6, lsl #5
 8001ffe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 8002002:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8002006:	d0e9      	beq.n	8001fdc <HAL_HCD_IRQHandler+0x114>
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002008:	b2f1      	uxtb	r1, r6
 800200a:	4620      	mov	r0, r4
 800200c:	f7ff fca2 	bl	8001954 <HCD_HC_IN_IRQHandler>
 8002010:	e7e8      	b.n	8001fe4 <HAL_HCD_IRQHandler+0x11c>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002018:	615a      	str	r2, [r3, #20]
 800201a:	e75d      	b.n	8001ed8 <HAL_HCD_IRQHandler+0x10>

0800201c <HAL_HCD_Start>:
  __HAL_LOCK(hhcd);
 800201c:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002020:	2b01      	cmp	r3, #1
 8002022:	d00e      	beq.n	8002042 <HAL_HCD_Start+0x26>
{
 8002024:	b510      	push	{r4, lr}
 8002026:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002028:	2101      	movs	r1, #1
 800202a:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800202e:	6800      	ldr	r0, [r0, #0]
 8002030:	f001 fa7c 	bl	800352c <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002034:	6820      	ldr	r0, [r4, #0]
 8002036:	f001 f8f0 	bl	800321a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800203a:	2000      	movs	r0, #0
 800203c:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002040:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002042:	2002      	movs	r0, #2
}
 8002044:	4770      	bx	lr

08002046 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 8002046:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00b      	beq.n	8002066 <HAL_HCD_Stop+0x20>
{
 800204e:	b510      	push	{r4, lr}
 8002050:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002052:	2301      	movs	r3, #1
 8002054:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002058:	6800      	ldr	r0, [r0, #0]
 800205a:	f001 fc6b 	bl	8003934 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800205e:	2000      	movs	r0, #0
 8002060:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002064:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002066:	2002      	movs	r0, #2
}
 8002068:	4770      	bx	lr

0800206a <HAL_HCD_ResetPort>:
{
 800206a:	b508      	push	{r3, lr}
  return (USB_ResetPort(hhcd->Instance));
 800206c:	6800      	ldr	r0, [r0, #0]
 800206e:	f001 fa3e 	bl	80034ee <USB_ResetPort>
}
 8002072:	bd08      	pop	{r3, pc}

08002074 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002074:	232c      	movs	r3, #44	; 0x2c
 8002076:	fb03 0001 	mla	r0, r3, r1, r0
}
 800207a:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 800207e:	4770      	bx	lr

08002080 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002080:	232c      	movs	r3, #44	; 0x2c
 8002082:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002086:	6d00      	ldr	r0, [r0, #80]	; 0x50
 8002088:	4770      	bx	lr

0800208a <HAL_HCD_GetCurrentFrame>:
{
 800208a:	b508      	push	{r3, lr}
  return (USB_GetCurrentFrame(hhcd->Instance));
 800208c:	6800      	ldr	r0, [r0, #0]
 800208e:	f001 fa7b 	bl	8003588 <USB_GetCurrentFrame>
}
 8002092:	bd08      	pop	{r3, pc}

08002094 <HAL_HCD_GetCurrentSpeed>:
{
 8002094:	b508      	push	{r3, lr}
  return (USB_GetHostSpeed(hhcd->Instance));
 8002096:	6800      	ldr	r0, [r0, #0]
 8002098:	f001 fa6b 	bl	8003572 <USB_GetHostSpeed>
}
 800209c:	bd08      	pop	{r3, pc}
	...

080020a0 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020a0:	2800      	cmp	r0, #0
 80020a2:	f000 80cc 	beq.w	800223e <HAL_I2C_Init+0x19e>
{
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	4604      	mov	r4, r0
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020aa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d077      	beq.n	80021a2 <HAL_I2C_Init+0x102>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020b2:	2324      	movs	r3, #36	; 0x24
 80020b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020b8:	6822      	ldr	r2, [r4, #0]
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	6013      	str	r3, [r2, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80020c2:	6822      	ldr	r2, [r4, #0]
 80020c4:	6813      	ldr	r3, [r2, #0]
 80020c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020ca:	6013      	str	r3, [r2, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020cc:	6822      	ldr	r2, [r4, #0]
 80020ce:	6813      	ldr	r3, [r2, #0]
 80020d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80020d4:	6013      	str	r3, [r2, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020d6:	f000 fedf 	bl	8002e98 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020da:	6862      	ldr	r2, [r4, #4]
 80020dc:	4b5a      	ldr	r3, [pc, #360]	; (8002248 <HAL_I2C_Init+0x1a8>)
 80020de:	429a      	cmp	r2, r3
 80020e0:	d864      	bhi.n	80021ac <HAL_I2C_Init+0x10c>
 80020e2:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_I2C_Init+0x1ac>)
 80020e4:	4298      	cmp	r0, r3
 80020e6:	bf8c      	ite	hi
 80020e8:	2300      	movhi	r3, #0
 80020ea:	2301      	movls	r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f040 80a8 	bne.w	8002242 <HAL_I2C_Init+0x1a2>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020f2:	4957      	ldr	r1, [pc, #348]	; (8002250 <HAL_I2C_Init+0x1b0>)
 80020f4:	fba1 3100 	umull	r3, r1, r1, r0
 80020f8:	0c8b      	lsrs	r3, r1, #18

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020fa:	6825      	ldr	r5, [r4, #0]
 80020fc:	686a      	ldr	r2, [r5, #4]
 80020fe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002102:	ea42 4291 	orr.w	r2, r2, r1, lsr #18
 8002106:	606a      	str	r2, [r5, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002108:	6821      	ldr	r1, [r4, #0]
 800210a:	6a0a      	ldr	r2, [r1, #32]
 800210c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002110:	6866      	ldr	r6, [r4, #4]
 8002112:	4d4d      	ldr	r5, [pc, #308]	; (8002248 <HAL_I2C_Init+0x1a8>)
 8002114:	42ae      	cmp	r6, r5
 8002116:	d84f      	bhi.n	80021b8 <HAL_I2C_Init+0x118>
 8002118:	3301      	adds	r3, #1
 800211a:	4313      	orrs	r3, r2
 800211c:	620b      	str	r3, [r1, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800211e:	6821      	ldr	r1, [r4, #0]
 8002120:	69ca      	ldr	r2, [r1, #28]
 8002122:	f422 424f 	bic.w	r2, r2, #52992	; 0xcf00
 8002126:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800212a:	6865      	ldr	r5, [r4, #4]
 800212c:	4b46      	ldr	r3, [pc, #280]	; (8002248 <HAL_I2C_Init+0x1a8>)
 800212e:	429d      	cmp	r5, r3
 8002130:	d84c      	bhi.n	80021cc <HAL_I2C_Init+0x12c>
 8002132:	1e43      	subs	r3, r0, #1
 8002134:	006d      	lsls	r5, r5, #1
 8002136:	fbb3 f3f5 	udiv	r3, r3, r5
 800213a:	3301      	adds	r3, #1
 800213c:	f640 70fc 	movw	r0, #4092	; 0xffc
 8002140:	4203      	tst	r3, r0
 8002142:	d078      	beq.n	8002236 <HAL_I2C_Init+0x196>
 8002144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002148:	431a      	orrs	r2, r3
 800214a:	61ca      	str	r2, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800214c:	6821      	ldr	r1, [r4, #0]
 800214e:	680b      	ldr	r3, [r1, #0]
 8002150:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002154:	69e2      	ldr	r2, [r4, #28]
 8002156:	6a20      	ldr	r0, [r4, #32]
 8002158:	4302      	orrs	r2, r0
 800215a:	4313      	orrs	r3, r2
 800215c:	600b      	str	r3, [r1, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800215e:	6821      	ldr	r1, [r4, #0]
 8002160:	688b      	ldr	r3, [r1, #8]
 8002162:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002166:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800216a:	6922      	ldr	r2, [r4, #16]
 800216c:	68e0      	ldr	r0, [r4, #12]
 800216e:	4302      	orrs	r2, r0
 8002170:	4313      	orrs	r3, r2
 8002172:	608b      	str	r3, [r1, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002174:	6821      	ldr	r1, [r4, #0]
 8002176:	68cb      	ldr	r3, [r1, #12]
 8002178:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800217c:	6962      	ldr	r2, [r4, #20]
 800217e:	69a0      	ldr	r0, [r4, #24]
 8002180:	4302      	orrs	r2, r0
 8002182:	4313      	orrs	r3, r2
 8002184:	60cb      	str	r3, [r1, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002186:	6822      	ldr	r2, [r4, #0]
 8002188:	6813      	ldr	r3, [r2, #0]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002190:	2000      	movs	r0, #0
 8002192:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002194:	2320      	movs	r3, #32
 8002196:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800219c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
}
 80021a0:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80021a2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80021a6:	f7fe fec9 	bl	8000f3c <HAL_I2C_MspInit>
 80021aa:	e782      	b.n	80020b2 <HAL_I2C_Init+0x12>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ac:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_I2C_Init+0x1b4>)
 80021ae:	4298      	cmp	r0, r3
 80021b0:	bf8c      	ite	hi
 80021b2:	2300      	movhi	r3, #0
 80021b4:	2301      	movls	r3, #1
 80021b6:	e799      	b.n	80020ec <HAL_I2C_Init+0x4c>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021b8:	f44f 7596 	mov.w	r5, #300	; 0x12c
 80021bc:	fb05 f303 	mul.w	r3, r5, r3
 80021c0:	4d25      	ldr	r5, [pc, #148]	; (8002258 <HAL_I2C_Init+0x1b8>)
 80021c2:	fba5 5303 	umull	r5, r3, r5, r3
 80021c6:	099b      	lsrs	r3, r3, #6
 80021c8:	3301      	adds	r3, #1
 80021ca:	e7a6      	b.n	800211a <HAL_I2C_Init+0x7a>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021cc:	68a6      	ldr	r6, [r4, #8]
 80021ce:	b9be      	cbnz	r6, 8002200 <HAL_I2C_Init+0x160>
 80021d0:	1e43      	subs	r3, r0, #1
 80021d2:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 80021d6:	fbb3 f3fc 	udiv	r3, r3, ip
 80021da:	3301      	adds	r3, #1
 80021dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	bb43      	cbnz	r3, 800223a <HAL_I2C_Init+0x19a>
 80021e8:	b9c6      	cbnz	r6, 800221c <HAL_I2C_Init+0x17c>
 80021ea:	1e43      	subs	r3, r0, #1
 80021ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80021f0:	fbb3 f3f5 	udiv	r3, r3, r5
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fe:	e7a3      	b.n	8002148 <HAL_I2C_Init+0xa8>
 8002200:	1e43      	subs	r3, r0, #1
 8002202:	eb05 0c85 	add.w	ip, r5, r5, lsl #2
 8002206:	eb0c 0c8c 	add.w	ip, ip, ip, lsl #2
 800220a:	fbb3 f3fc 	udiv	r3, r3, ip
 800220e:	3301      	adds	r3, #1
 8002210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	095b      	lsrs	r3, r3, #5
 800221a:	e7e4      	b.n	80021e6 <HAL_I2C_Init+0x146>
 800221c:	1e43      	subs	r3, r0, #1
 800221e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002222:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8002226:	fbb3 f3f5 	udiv	r3, r3, r5
 800222a:	3301      	adds	r3, #1
 800222c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002234:	e788      	b.n	8002148 <HAL_I2C_Init+0xa8>
 8002236:	2304      	movs	r3, #4
 8002238:	e786      	b.n	8002148 <HAL_I2C_Init+0xa8>
 800223a:	2301      	movs	r3, #1
 800223c:	e784      	b.n	8002148 <HAL_I2C_Init+0xa8>
    return HAL_ERROR;
 800223e:	2001      	movs	r0, #1
}
 8002240:	4770      	bx	lr
    return HAL_ERROR;
 8002242:	2001      	movs	r0, #1
 8002244:	e7ac      	b.n	80021a0 <HAL_I2C_Init+0x100>
 8002246:	bf00      	nop
 8002248:	000186a0 	.word	0x000186a0
 800224c:	001e847f 	.word	0x001e847f
 8002250:	431bde83 	.word	0x431bde83
 8002254:	003d08ff 	.word	0x003d08ff
 8002258:	10624dd3 	.word	0x10624dd3

0800225c <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800225c:	2800      	cmp	r0, #0
 800225e:	f000 80bf 	beq.w	80023e0 <HAL_I2S_Init+0x184>
{
 8002262:	b538      	push	{r3, r4, r5, lr}
 8002264:	4604      	mov	r4, r0
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002266:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800226a:	2b00      	cmp	r3, #0
 800226c:	d051      	beq.n	8002312 <HAL_I2S_Init+0xb6>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800226e:	2202      	movs	r2, #2
 8002270:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002274:	6821      	ldr	r1, [r4, #0]
 8002276:	69cb      	ldr	r3, [r1, #28]
 8002278:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800227c:	f023 030f 	bic.w	r3, r3, #15
 8002280:	61cb      	str	r3, [r1, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002282:	6823      	ldr	r3, [r4, #0]
 8002284:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002286:	6963      	ldr	r3, [r4, #20]
 8002288:	4293      	cmp	r3, r2
 800228a:	d063      	beq.n	8002354 <HAL_I2S_Init+0xf8>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800228c:	68e3      	ldr	r3, [r4, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d146      	bne.n	8002320 <HAL_I2S_Init+0xc4>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002292:	2510      	movs	r5, #16
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002294:	68a3      	ldr	r3, [r4, #8]
 8002296:	2b20      	cmp	r3, #32
 8002298:	d800      	bhi.n	800229c <HAL_I2S_Init+0x40>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800229a:	006d      	lsls	r5, r5, #1
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800229c:	2001      	movs	r0, #1
 800229e:	f000 feb5 	bl	800300c <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80022a2:	6923      	ldr	r3, [r4, #16]
 80022a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022a8:	d03c      	beq.n	8002324 <HAL_I2S_Init+0xc8>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80022aa:	fbb0 f0f5 	udiv	r0, r0, r5
 80022ae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022b2:	0043      	lsls	r3, r0, #1
 80022b4:	6962      	ldr	r2, [r4, #20]
 80022b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80022ba:	3305      	adds	r3, #5
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80022bc:	4a49      	ldr	r2, [pc, #292]	; (80023e4 <HAL_I2S_Init+0x188>)
 80022be:	fba2 2303 	umull	r2, r3, r2, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80022c2:	f3c3 02c0 	ubfx	r2, r3, #3, #1

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80022c6:	ebc2 03d3 	rsb	r3, r2, r3, lsr #3
 80022ca:	085b      	lsrs	r3, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80022cc:	0211      	lsls	r1, r2, #8
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80022ce:	1e9a      	subs	r2, r3, #2
 80022d0:	2afd      	cmp	r2, #253	; 0xfd
 80022d2:	d841      	bhi.n	8002358 <HAL_I2S_Init+0xfc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80022d4:	6922      	ldr	r2, [r4, #16]
 80022d6:	430a      	orrs	r2, r1
 80022d8:	6821      	ldr	r1, [r4, #0]
 80022da:	431a      	orrs	r2, r3
 80022dc:	620a      	str	r2, [r1, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022de:	6821      	ldr	r1, [r4, #0]
 80022e0:	69cb      	ldr	r3, [r1, #28]
 80022e2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80022e6:	f023 030f 	bic.w	r3, r3, #15
 80022ea:	6862      	ldr	r2, [r4, #4]
 80022ec:	68a0      	ldr	r0, [r4, #8]
 80022ee:	4302      	orrs	r2, r0
 80022f0:	68e0      	ldr	r0, [r4, #12]
 80022f2:	4302      	orrs	r2, r0
 80022f4:	69a0      	ldr	r0, [r4, #24]
 80022f6:	4302      	orrs	r2, r0
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022fe:	61cb      	str	r3, [r1, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002300:	6a23      	ldr	r3, [r4, #32]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d02e      	beq.n	8002364 <HAL_I2S_Init+0x108>
    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002306:	2000      	movs	r0, #0
 8002308:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800230a:	2301      	movs	r3, #1
 800230c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  return HAL_OK;
}
 8002310:	bd38      	pop	{r3, r4, r5, pc}
    hi2s->Lock = HAL_UNLOCKED;
 8002312:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002316:	4b34      	ldr	r3, [pc, #208]	; (80023e8 <HAL_I2S_Init+0x18c>)
 8002318:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 800231a:	f7fe fe47 	bl	8000fac <HAL_I2S_MspInit>
 800231e:	e7a6      	b.n	800226e <HAL_I2S_Init+0x12>
      packetlength = 32U;
 8002320:	2520      	movs	r5, #32
 8002322:	e7b7      	b.n	8002294 <HAL_I2S_Init+0x38>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002324:	68e3      	ldr	r3, [r4, #12]
 8002326:	b153      	cbz	r3, 800233e <HAL_I2S_Init+0xe2>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002328:	00ad      	lsls	r5, r5, #2
 800232a:	fbb0 f0f5 	udiv	r0, r0, r5
 800232e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002332:	0043      	lsls	r3, r0, #1
 8002334:	6962      	ldr	r2, [r4, #20]
 8002336:	fbb3 f3f2 	udiv	r3, r3, r2
 800233a:	3305      	adds	r3, #5
 800233c:	e7be      	b.n	80022bc <HAL_I2S_Init+0x60>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800233e:	00ed      	lsls	r5, r5, #3
 8002340:	fbb0 f0f5 	udiv	r0, r0, r5
 8002344:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002348:	0043      	lsls	r3, r0, #1
 800234a:	6962      	ldr	r2, [r4, #20]
 800234c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002350:	3305      	adds	r3, #5
 8002352:	e7b3      	b.n	80022bc <HAL_I2S_Init+0x60>
    i2sodd = 0U;
 8002354:	2100      	movs	r1, #0
 8002356:	e7ba      	b.n	80022ce <HAL_I2S_Init+0x72>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002358:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800235a:	f043 0310 	orr.w	r3, r3, #16
 800235e:	6463      	str	r3, [r4, #68]	; 0x44
    return  HAL_ERROR;
 8002360:	2001      	movs	r0, #1
 8002362:	e7d5      	b.n	8002310 <HAL_I2S_Init+0xb4>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_I2S_Init+0x190>)
 8002366:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002368:	6822      	ldr	r2, [r4, #0]
 800236a:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_I2S_Init+0x194>)
 800236c:	429a      	cmp	r2, r3
 800236e:	d01f      	beq.n	80023b0 <HAL_I2S_Init+0x154>
 8002370:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002374:	69d3      	ldr	r3, [r2, #28]
 8002376:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800237a:	f023 030f 	bic.w	r3, r3, #15
 800237e:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002380:	6822      	ldr	r2, [r4, #0]
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_I2S_Init+0x194>)
 8002384:	429a      	cmp	r2, r3
 8002386:	d015      	beq.n	80023b4 <HAL_I2S_Init+0x158>
 8002388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800238c:	2202      	movs	r2, #2
 800238e:	621a      	str	r2, [r3, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002390:	6822      	ldr	r2, [r4, #0]
 8002392:	4b17      	ldr	r3, [pc, #92]	; (80023f0 <HAL_I2S_Init+0x194>)
 8002394:	429a      	cmp	r2, r3
 8002396:	d010      	beq.n	80023ba <HAL_I2S_Init+0x15e>
 8002398:	f04f 2540 	mov.w	r5, #1073758208	; 0x40004000
 800239c:	69eb      	ldr	r3, [r5, #28]
 800239e:	b29b      	uxth	r3, r3
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80023a0:	6862      	ldr	r2, [r4, #4]
 80023a2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80023a6:	d00a      	beq.n	80023be <HAL_I2S_Init+0x162>
 80023a8:	b9c2      	cbnz	r2, 80023dc <HAL_I2S_Init+0x180>
      tmp = I2S_MODE_SLAVE_RX;
 80023aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023ae:	e008      	b.n	80023c2 <HAL_I2S_Init+0x166>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80023b0:	4a10      	ldr	r2, [pc, #64]	; (80023f4 <HAL_I2S_Init+0x198>)
 80023b2:	e7df      	b.n	8002374 <HAL_I2S_Init+0x118>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80023b4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80023b8:	e7e8      	b.n	800238c <HAL_I2S_Init+0x130>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80023ba:	4d0e      	ldr	r5, [pc, #56]	; (80023f4 <HAL_I2S_Init+0x198>)
 80023bc:	e7ee      	b.n	800239c <HAL_I2S_Init+0x140>
      tmp = I2S_MODE_SLAVE_RX;
 80023be:	f44f 7080 	mov.w	r0, #256	; 0x100
                         (uint16_t)hi2s->Init.Standard   | \
 80023c2:	f8b4 c008 	ldrh.w	ip, [r4, #8]
                         (uint16_t)hi2s->Init.DataFormat | \
 80023c6:	89a1      	ldrh	r1, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL);
 80023c8:	8b22      	ldrh	r2, [r4, #24]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80023ca:	ea40 000c 	orr.w	r0, r0, ip
 80023ce:	4301      	orrs	r1, r0
 80023d0:	430a      	orrs	r2, r1
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80023d8:	61eb      	str	r3, [r5, #28]
 80023da:	e794      	b.n	8002306 <HAL_I2S_Init+0xaa>
      tmp = I2S_MODE_SLAVE_TX;
 80023dc:	2000      	movs	r0, #0
 80023de:	e7f0      	b.n	80023c2 <HAL_I2S_Init+0x166>
    return HAL_ERROR;
 80023e0:	2001      	movs	r0, #1
}
 80023e2:	4770      	bx	lr
 80023e4:	cccccccd 	.word	0xcccccccd
 80023e8:	0800246f 	.word	0x0800246f
 80023ec:	08002681 	.word	0x08002681
 80023f0:	40003800 	.word	0x40003800
 80023f4:	40003400 	.word	0x40003400

080023f8 <HAL_I2S_TxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80023f8:	4770      	bx	lr

080023fa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80023fa:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80023fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80023fe:	6803      	ldr	r3, [r0, #0]
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002404:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002406:	3302      	adds	r3, #2
 8002408:	6243      	str	r3, [r0, #36]	; 0x24
  hi2s->TxXferCount--;
 800240a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	3b01      	subs	r3, #1
 8002410:	b29b      	uxth	r3, r3
 8002412:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002414:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	b103      	cbz	r3, 800241c <I2S_Transmit_IT+0x22>
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800241a:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800241c:	6802      	ldr	r2, [r0, #0]
 800241e:	6853      	ldr	r3, [r2, #4]
 8002420:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002424:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002426:	2301      	movs	r3, #1
 8002428:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 800242c:	f7ff ffe4 	bl	80023f8 <HAL_I2S_TxCpltCallback>
}
 8002430:	e7f3      	b.n	800241a <I2S_Transmit_IT+0x20>

08002432 <HAL_I2S_RxCpltCallback>:
}
 8002432:	4770      	bx	lr

08002434 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002434:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002436:	6803      	ldr	r3, [r0, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800243c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800243e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002440:	3302      	adds	r3, #2
 8002442:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002444:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002446:	b29b      	uxth	r3, r3
 8002448:	3b01      	subs	r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800244e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002450:	b29b      	uxth	r3, r3
 8002452:	b103      	cbz	r3, 8002456 <I2S_Receive_IT+0x22>
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002454:	bd08      	pop	{r3, pc}
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002456:	6802      	ldr	r2, [r0, #0]
 8002458:	6853      	ldr	r3, [r2, #4]
 800245a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800245e:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8002460:	2301      	movs	r3, #1
 8002462:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8002466:	f7ff ffe4 	bl	8002432 <HAL_I2S_RxCpltCallback>
}
 800246a:	e7f3      	b.n	8002454 <I2S_Receive_IT+0x20>

0800246c <HAL_I2S_ErrorCallback>:
}
 800246c:	4770      	bx	lr

0800246e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800246e:	b510      	push	{r4, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002474:	6802      	ldr	r2, [r0, #0]
 8002476:	6893      	ldr	r3, [r2, #8]
 8002478:	9303      	str	r3, [sp, #12]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800247a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b04      	cmp	r3, #4
 8002482:	d006      	beq.n	8002492 <I2S_IRQHandler+0x24>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002484:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b03      	cmp	r3, #3
 800248c:	d02c      	beq.n	80024e8 <I2S_IRQHandler+0x7a>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800248e:	b004      	add	sp, #16
 8002490:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002492:	9b03      	ldr	r3, [sp, #12]
 8002494:	f013 0f01 	tst.w	r3, #1
 8002498:	d003      	beq.n	80024a2 <I2S_IRQHandler+0x34>
 800249a:	6853      	ldr	r3, [r2, #4]
 800249c:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024a0:	d11f      	bne.n	80024e2 <I2S_IRQHandler+0x74>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024a2:	9b03      	ldr	r3, [sp, #12]
 80024a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80024a8:	d0ec      	beq.n	8002484 <I2S_IRQHandler+0x16>
 80024aa:	6823      	ldr	r3, [r4, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	f012 0f20 	tst.w	r2, #32
 80024b2:	d0e7      	beq.n	8002484 <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80024ba:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80024bc:	2300      	movs	r3, #0
 80024be:	9301      	str	r3, [sp, #4]
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	68da      	ldr	r2, [r3, #12]
 80024c4:	9201      	str	r2, [sp, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80024d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80024da:	4620      	mov	r0, r4
 80024dc:	f7ff ffc6 	bl	800246c <HAL_I2S_ErrorCallback>
 80024e0:	e7d0      	b.n	8002484 <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 80024e2:	f7ff ffa7 	bl	8002434 <I2S_Receive_IT>
 80024e6:	e7dc      	b.n	80024a2 <I2S_IRQHandler+0x34>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80024e8:	9b03      	ldr	r3, [sp, #12]
 80024ea:	f013 0f02 	tst.w	r3, #2
 80024ee:	d004      	beq.n	80024fa <I2S_IRQHandler+0x8c>
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024f8:	d11d      	bne.n	8002536 <I2S_IRQHandler+0xc8>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80024fa:	9b03      	ldr	r3, [sp, #12]
 80024fc:	f013 0f08 	tst.w	r3, #8
 8002500:	d0c5      	beq.n	800248e <I2S_IRQHandler+0x20>
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	f012 0f20 	tst.w	r2, #32
 800250a:	d0c0      	beq.n	800248e <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800250c:	685a      	ldr	r2, [r3, #4]
 800250e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002512:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002514:	2300      	movs	r3, #0
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	6823      	ldr	r3, [r4, #0]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	9302      	str	r3, [sp, #8]
 800251e:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8002520:	2301      	movs	r3, #1
 8002522:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002526:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800252e:	4620      	mov	r0, r4
 8002530:	f7ff ff9c 	bl	800246c <HAL_I2S_ErrorCallback>
}
 8002534:	e7ab      	b.n	800248e <I2S_IRQHandler+0x20>
      I2S_Transmit_IT(hi2s);
 8002536:	4620      	mov	r0, r4
 8002538:	f7ff ff5f 	bl	80023fa <I2S_Transmit_IT>
 800253c:	e7dd      	b.n	80024fa <I2S_IRQHandler+0x8c>

0800253e <HAL_I2SEx_TxRxCpltCallback>:
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800253e:	4770      	bx	lr

08002540 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002540:	b508      	push	{r3, lr}
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002542:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002544:	1c9a      	adds	r2, r3, #2
 8002546:	6242      	str	r2, [r0, #36]	; 0x24
 8002548:	6802      	ldr	r2, [r0, #0]
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800254e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29b      	uxth	r3, r3
 8002556:	8543      	strh	r3, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002558:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800255a:	b29b      	uxth	r3, r3
 800255c:	b93b      	cbnz	r3, 800256e <I2SEx_TxISR_I2S+0x2e>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800255e:	6802      	ldr	r2, [r0, #0]
 8002560:	6853      	ldr	r3, [r2, #4]
 8002562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002566:	6053      	str	r3, [r2, #4]

    if (hi2s->RxXferCount == 0U)
 8002568:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800256a:	b29b      	uxth	r3, r3
 800256c:	b103      	cbz	r3, 8002570 <I2SEx_TxISR_I2S+0x30>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800256e:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8002570:	2301      	movs	r3, #1
 8002572:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002576:	f7ff ffe2 	bl	800253e <HAL_I2SEx_TxRxCpltCallback>
}
 800257a:	e7f8      	b.n	800256e <I2SEx_TxISR_I2S+0x2e>

0800257c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800257c:	b508      	push	{r3, lr}
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800257e:	6802      	ldr	r2, [r0, #0]
 8002580:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <I2SEx_RxISR_I2SExt+0x5c>)
 8002582:	429a      	cmp	r2, r3
 8002584:	d01c      	beq.n	80025c0 <I2SEx_RxISR_I2SExt+0x44>
 8002586:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800258e:	1c99      	adds	r1, r3, #2
 8002590:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002592:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002594:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002596:	b29b      	uxth	r3, r3
 8002598:	3b01      	subs	r3, #1
 800259a:	b29b      	uxth	r3, r3
 800259c:	8643      	strh	r3, [r0, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800259e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	b963      	cbnz	r3, 80025be <I2SEx_RxISR_I2SExt+0x42>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025a4:	6802      	ldr	r2, [r0, #0]
 80025a6:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <I2SEx_RxISR_I2SExt+0x5c>)
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d00c      	beq.n	80025c6 <I2SEx_RxISR_I2SExt+0x4a>
 80025ac:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80025b0:	6853      	ldr	r3, [r2, #4]
 80025b2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80025b6:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 80025b8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025ba:	b29b      	uxth	r3, r3
 80025bc:	b12b      	cbz	r3, 80025ca <I2SEx_RxISR_I2SExt+0x4e>
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025be:	bd08      	pop	{r3, pc}
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80025c0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80025c4:	e7e1      	b.n	800258a <I2SEx_RxISR_I2SExt+0xe>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025c6:	4a05      	ldr	r2, [pc, #20]	; (80025dc <I2SEx_RxISR_I2SExt+0x60>)
 80025c8:	e7f2      	b.n	80025b0 <I2SEx_RxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80025d0:	f7ff ffb5 	bl	800253e <HAL_I2SEx_TxRxCpltCallback>
}
 80025d4:	e7f3      	b.n	80025be <I2SEx_RxISR_I2SExt+0x42>
 80025d6:	bf00      	nop
 80025d8:	40003800 	.word	0x40003800
 80025dc:	40003400 	.word	0x40003400

080025e0 <I2SEx_TxISR_I2SExt>:
{
 80025e0:	b508      	push	{r3, lr}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80025e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025e4:	1c9a      	adds	r2, r3, #2
 80025e6:	6242      	str	r2, [r0, #36]	; 0x24
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	6801      	ldr	r1, [r0, #0]
 80025ec:	4b13      	ldr	r3, [pc, #76]	; (800263c <I2SEx_TxISR_I2SExt+0x5c>)
 80025ee:	4299      	cmp	r1, r3
 80025f0:	d018      	beq.n	8002624 <I2SEx_TxISR_I2SExt+0x44>
 80025f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f6:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025f8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	3b01      	subs	r3, #1
 80025fe:	b29b      	uxth	r3, r3
 8002600:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8002602:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8002604:	b29b      	uxth	r3, r3
 8002606:	b963      	cbnz	r3, 8002622 <I2SEx_TxISR_I2SExt+0x42>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002608:	6802      	ldr	r2, [r0, #0]
 800260a:	4b0c      	ldr	r3, [pc, #48]	; (800263c <I2SEx_TxISR_I2SExt+0x5c>)
 800260c:	429a      	cmp	r2, r3
 800260e:	d00c      	beq.n	800262a <I2SEx_TxISR_I2SExt+0x4a>
 8002610:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002614:	6853      	ldr	r3, [r2, #4]
 8002616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800261a:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 800261c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800261e:	b29b      	uxth	r3, r3
 8002620:	b12b      	cbz	r3, 800262e <I2SEx_TxISR_I2SExt+0x4e>
}
 8002622:	bd08      	pop	{r3, pc}
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002624:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002628:	e7e5      	b.n	80025f6 <I2SEx_TxISR_I2SExt+0x16>
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <I2SEx_TxISR_I2SExt+0x60>)
 800262c:	e7f2      	b.n	8002614 <I2SEx_TxISR_I2SExt+0x34>
      hi2s->State = HAL_I2S_STATE_READY;
 800262e:	2301      	movs	r3, #1
 8002630:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002634:	f7ff ff83 	bl	800253e <HAL_I2SEx_TxRxCpltCallback>
}
 8002638:	e7f3      	b.n	8002622 <I2SEx_TxISR_I2SExt+0x42>
 800263a:	bf00      	nop
 800263c:	40003800 	.word	0x40003800
 8002640:	40003400 	.word	0x40003400

08002644 <I2SEx_RxISR_I2S>:
{
 8002644:	b508      	push	{r3, lr}
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002646:	6803      	ldr	r3, [r0, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800264c:	1c99      	adds	r1, r3, #2
 800264e:	62c1      	str	r1, [r0, #44]	; 0x2c
 8002650:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002652:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29b      	uxth	r3, r3
 800265a:	8643      	strh	r3, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 800265c:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800265e:	b29b      	uxth	r3, r3
 8002660:	b93b      	cbnz	r3, 8002672 <I2SEx_RxISR_I2S+0x2e>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002662:	6802      	ldr	r2, [r0, #0]
 8002664:	6853      	ldr	r3, [r2, #4]
 8002666:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800266a:	6053      	str	r3, [r2, #4]
    if (hi2s->TxXferCount == 0U)
 800266c:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800266e:	b29b      	uxth	r3, r3
 8002670:	b103      	cbz	r3, 8002674 <I2SEx_RxISR_I2S+0x30>
}
 8002672:	bd08      	pop	{r3, pc}
      hi2s->State = HAL_I2S_STATE_READY;
 8002674:	2301      	movs	r3, #1
 8002676:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800267a:	f7ff ff60 	bl	800253e <HAL_I2SEx_TxRxCpltCallback>
}
 800267e:	e7f8      	b.n	8002672 <I2SEx_RxISR_I2S+0x2e>

08002680 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8002680:	b510      	push	{r4, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	4604      	mov	r4, r0
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002686:	6803      	ldr	r3, [r0, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	9205      	str	r2, [sp, #20]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800268c:	4a70      	ldr	r2, [pc, #448]	; (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d06f      	beq.n	8002772 <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
 8002692:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002696:	6891      	ldr	r1, [r2, #8]
 8002698:	9104      	str	r1, [sp, #16]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	9303      	str	r3, [sp, #12]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800269e:	6853      	ldr	r3, [r2, #4]
 80026a0:	9302      	str	r3, [sp, #8]
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80026a2:	6863      	ldr	r3, [r4, #4]
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a8:	d001      	beq.n	80026ae <HAL_I2SEx_FullDuplex_IRQHandler+0x2e>
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d170      	bne.n	8002790 <HAL_I2SEx_FullDuplex_IRQHandler+0x110>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80026ae:	9b05      	ldr	r3, [sp, #20]
 80026b0:	f013 0f02 	tst.w	r3, #2
 80026b4:	d003      	beq.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
 80026b6:	9b03      	ldr	r3, [sp, #12]
 80026b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80026bc:	d15c      	bne.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0xf8>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026be:	9b04      	ldr	r3, [sp, #16]
 80026c0:	f013 0f01 	tst.w	r3, #1
 80026c4:	d003      	beq.n	80026ce <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
 80026c6:	9b02      	ldr	r3, [sp, #8]
 80026c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026cc:	d158      	bne.n	8002780 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026ce:	9b04      	ldr	r3, [sp, #16]
 80026d0:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026d4:	d024      	beq.n	8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
 80026d6:	9b02      	ldr	r3, [sp, #8]
 80026d8:	f013 0f20 	tst.w	r3, #32
 80026dc:	d020      	beq.n	8002720 <HAL_I2SEx_FullDuplex_IRQHandler+0xa0>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026de:	6822      	ldr	r2, [r4, #0]
 80026e0:	4b5b      	ldr	r3, [pc, #364]	; (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d050      	beq.n	8002788 <HAL_I2SEx_FullDuplex_IRQHandler+0x108>
 80026e6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80026ea:	6853      	ldr	r3, [r2, #4]
 80026ec:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80026f0:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80026f2:	6822      	ldr	r2, [r4, #0]
 80026f4:	6853      	ldr	r3, [r2, #4]
 80026f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80026fa:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80026fc:	2300      	movs	r3, #0
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	68da      	ldr	r2, [r3, #12]
 8002704:	9200      	str	r2, [sp, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 800270c:	2301      	movs	r3, #1
 800270e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002712:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002714:	f043 0302 	orr.w	r3, r3, #2
 8002718:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800271a:	4620      	mov	r0, r4
 800271c:	f7ff fea6 	bl	800246c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002720:	9b05      	ldr	r3, [sp, #20]
 8002722:	f013 0f08 	tst.w	r3, #8
 8002726:	d022      	beq.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 8002728:	9b03      	ldr	r3, [sp, #12]
 800272a:	f013 0f20 	tst.w	r3, #32
 800272e:	d01e      	beq.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002730:	6822      	ldr	r2, [r4, #0]
 8002732:	6853      	ldr	r3, [r2, #4]
 8002734:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002738:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800273a:	6822      	ldr	r2, [r4, #0]
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 800273e:	429a      	cmp	r2, r3
 8002740:	d024      	beq.n	800278c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002742:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002746:	6853      	ldr	r3, [r2, #4]
 8002748:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800274c:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800274e:	2300      	movs	r3, #0
 8002750:	9301      	str	r3, [sp, #4]
 8002752:	6823      	ldr	r3, [r4, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	9301      	str	r3, [sp, #4]
 8002758:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800275a:	2301      	movs	r3, #1
 800275c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002760:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002762:	f043 0304 	orr.w	r3, r3, #4
 8002766:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8002768:	4620      	mov	r0, r4
 800276a:	f7ff fe7f 	bl	800246c <HAL_I2S_ErrorCallback>
}
 800276e:	b006      	add	sp, #24
 8002770:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002772:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8002776:	e78e      	b.n	8002696 <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_TxISR_I2S(hi2s);
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff fee1 	bl	8002540 <I2SEx_TxISR_I2S>
 800277e:	e79e      	b.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x3e>
      I2SEx_RxISR_I2SExt(hi2s);
 8002780:	4620      	mov	r0, r4
 8002782:	f7ff fefb 	bl	800257c <I2SEx_RxISR_I2SExt>
 8002786:	e7a2      	b.n	80026ce <HAL_I2SEx_FullDuplex_IRQHandler+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002788:	4a32      	ldr	r2, [pc, #200]	; (8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800278a:	e7ae      	b.n	80026ea <HAL_I2SEx_FullDuplex_IRQHandler+0x6a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800278c:	4a31      	ldr	r2, [pc, #196]	; (8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800278e:	e7da      	b.n	8002746 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002790:	9b04      	ldr	r3, [sp, #16]
 8002792:	f013 0f02 	tst.w	r3, #2
 8002796:	d003      	beq.n	80027a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
 8002798:	9b02      	ldr	r3, [sp, #8]
 800279a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800279e:	d14a      	bne.n	8002836 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b6>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027a0:	9b05      	ldr	r3, [sp, #20]
 80027a2:	f013 0f01 	tst.w	r3, #1
 80027a6:	d003      	beq.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
 80027a8:	9b03      	ldr	r3, [sp, #12]
 80027aa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027ae:	d146      	bne.n	800283e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027b0:	9b05      	ldr	r3, [sp, #20]
 80027b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80027b6:	d01c      	beq.n	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
 80027b8:	9b03      	ldr	r3, [sp, #12]
 80027ba:	f013 0f20 	tst.w	r3, #32
 80027be:	d018      	beq.n	80027f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x172>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c0:	6822      	ldr	r2, [r4, #0]
 80027c2:	6853      	ldr	r3, [r2, #4]
 80027c4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80027c8:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80027ca:	6822      	ldr	r2, [r4, #0]
 80027cc:	4b20      	ldr	r3, [pc, #128]	; (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d039      	beq.n	8002846 <HAL_I2SEx_FullDuplex_IRQHandler+0x1c6>
 80027d2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80027d6:	6853      	ldr	r3, [r2, #4]
 80027d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027dc:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 80027de:	2301      	movs	r3, #1
 80027e0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80027e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027e6:	f043 0302 	orr.w	r3, r3, #2
 80027ea:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff fe3d 	bl	800246c <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80027f2:	9b04      	ldr	r3, [sp, #16]
 80027f4:	f013 0f08 	tst.w	r3, #8
 80027f8:	d0b9      	beq.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	f013 0f20 	tst.w	r3, #32
 8002800:	d0b5      	beq.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d0>)
 8002806:	429a      	cmp	r2, r3
 8002808:	d01f      	beq.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x1ca>
 800280a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800280e:	6853      	ldr	r3, [r2, #4]
 8002810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002814:	6053      	str	r3, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002816:	6822      	ldr	r2, [r4, #0]
 8002818:	6853      	ldr	r3, [r2, #4]
 800281a:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800281e:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8002820:	2301      	movs	r3, #1
 8002822:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002828:	f043 0304 	orr.w	r3, r3, #4
 800282c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800282e:	4620      	mov	r0, r4
 8002830:	f7ff fe1c 	bl	800246c <HAL_I2S_ErrorCallback>
}
 8002834:	e79b      	b.n	800276e <HAL_I2SEx_FullDuplex_IRQHandler+0xee>
      I2SEx_TxISR_I2SExt(hi2s);
 8002836:	4620      	mov	r0, r4
 8002838:	f7ff fed2 	bl	80025e0 <I2SEx_TxISR_I2SExt>
 800283c:	e7b0      	b.n	80027a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x120>
      I2SEx_RxISR_I2S(hi2s);
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff ff00 	bl	8002644 <I2SEx_RxISR_I2S>
 8002844:	e7b4      	b.n	80027b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x130>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002846:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 8002848:	e7c5      	b.n	80027d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800284a:	4a02      	ldr	r2, [pc, #8]	; (8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x1d4>)
 800284c:	e7df      	b.n	800280e <HAL_I2SEx_FullDuplex_IRQHandler+0x18e>
 800284e:	bf00      	nop
 8002850:	40003800 	.word	0x40003800
 8002854:	40003400 	.word	0x40003400

08002858 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002858:	2800      	cmp	r0, #0
 800285a:	f000 81e0 	beq.w	8002c1e <HAL_RCC_OscConfig+0x3c6>
{
 800285e:	b570      	push	{r4, r5, r6, lr}
 8002860:	b082      	sub	sp, #8
 8002862:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002864:	6803      	ldr	r3, [r0, #0]
 8002866:	f013 0f01 	tst.w	r3, #1
 800286a:	d03b      	beq.n	80028e4 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800286c:	4b9f      	ldr	r3, [pc, #636]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d02c      	beq.n	80028d2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002878:	4b9c      	ldr	r3, [pc, #624]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002880:	2b08      	cmp	r3, #8
 8002882:	d021      	beq.n	80028c8 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	6863      	ldr	r3, [r4, #4]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800288a:	d04f      	beq.n	800292c <HAL_RCC_OscConfig+0xd4>
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d052      	beq.n	8002938 <HAL_RCC_OscConfig+0xe0>
 8002892:	4b96      	ldr	r3, [pc, #600]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028a2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028a4:	6863      	ldr	r3, [r4, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d050      	beq.n	800294c <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028aa:	f7fe fccd 	bl	8001248 <HAL_GetTick>
 80028ae:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b0:	4b8e      	ldr	r3, [pc, #568]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028b8:	d114      	bne.n	80028e4 <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ba:	f7fe fcc5 	bl	8001248 <HAL_GetTick>
 80028be:	1b40      	subs	r0, r0, r5
 80028c0:	2864      	cmp	r0, #100	; 0x64
 80028c2:	d9f5      	bls.n	80028b0 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 80028c4:	2003      	movs	r0, #3
 80028c6:	e1b1      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028c8:	4b88      	ldr	r3, [pc, #544]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80028d0:	d0d8      	beq.n	8002884 <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d2:	4b86      	ldr	r3, [pc, #536]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80028da:	d003      	beq.n	80028e4 <HAL_RCC_OscConfig+0x8c>
 80028dc:	6863      	ldr	r3, [r4, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 819f 	beq.w	8002c22 <HAL_RCC_OscConfig+0x3ca>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	f013 0f02 	tst.w	r3, #2
 80028ea:	d054      	beq.n	8002996 <HAL_RCC_OscConfig+0x13e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ec:	4b7f      	ldr	r3, [pc, #508]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f013 0f0c 	tst.w	r3, #12
 80028f4:	d03e      	beq.n	8002974 <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f6:	4b7d      	ldr	r3, [pc, #500]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d033      	beq.n	800296a <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002902:	68e3      	ldr	r3, [r4, #12]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d068      	beq.n	80029da <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002908:	4b79      	ldr	r3, [pc, #484]	; (8002af0 <HAL_RCC_OscConfig+0x298>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fc9b 	bl	8001248 <HAL_GetTick>
 8002912:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b75      	ldr	r3, [pc, #468]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f013 0f02 	tst.w	r3, #2
 800291c:	d154      	bne.n	80029c8 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291e:	f7fe fc93 	bl	8001248 <HAL_GetTick>
 8002922:	1b40      	subs	r0, r0, r5
 8002924:	2802      	cmp	r0, #2
 8002926:	d9f5      	bls.n	8002914 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8002928:	2003      	movs	r0, #3
 800292a:	e17f      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800292c:	4a6f      	ldr	r2, [pc, #444]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 800292e:	6813      	ldr	r3, [r2, #0]
 8002930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002934:	6013      	str	r3, [r2, #0]
 8002936:	e7b5      	b.n	80028a4 <HAL_RCC_OscConfig+0x4c>
 8002938:	4b6c      	ldr	r3, [pc, #432]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	e7ab      	b.n	80028a4 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 800294c:	f7fe fc7c 	bl	8001248 <HAL_GetTick>
 8002950:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002952:	4b66      	ldr	r3, [pc, #408]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800295a:	d0c3      	beq.n	80028e4 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fc74 	bl	8001248 <HAL_GetTick>
 8002960:	1b40      	subs	r0, r0, r5
 8002962:	2864      	cmp	r0, #100	; 0x64
 8002964:	d9f5      	bls.n	8002952 <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 8002966:	2003      	movs	r0, #3
 8002968:	e160      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296a:	4b60      	ldr	r3, [pc, #384]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002972:	d1c6      	bne.n	8002902 <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002974:	4b5d      	ldr	r3, [pc, #372]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f013 0f02 	tst.w	r3, #2
 800297c:	d003      	beq.n	8002986 <HAL_RCC_OscConfig+0x12e>
 800297e:	68e3      	ldr	r3, [r4, #12]
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 8150 	bne.w	8002c26 <HAL_RCC_OscConfig+0x3ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002986:	4a59      	ldr	r2, [pc, #356]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002988:	6813      	ldr	r3, [r2, #0]
 800298a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800298e:	6921      	ldr	r1, [r4, #16]
 8002990:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002994:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	f013 0f08 	tst.w	r3, #8
 800299c:	d042      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800299e:	6963      	ldr	r3, [r4, #20]
 80029a0:	b36b      	cbz	r3, 80029fe <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029a2:	4b53      	ldr	r3, [pc, #332]	; (8002af0 <HAL_RCC_OscConfig+0x298>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fc4d 	bl	8001248 <HAL_GetTick>
 80029ae:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b0:	4b4e      	ldr	r3, [pc, #312]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f013 0f02 	tst.w	r3, #2
 80029b8:	d134      	bne.n	8002a24 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ba:	f7fe fc45 	bl	8001248 <HAL_GetTick>
 80029be:	1b40      	subs	r0, r0, r5
 80029c0:	2802      	cmp	r0, #2
 80029c2:	d9f5      	bls.n	80029b0 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 80029c4:	2003      	movs	r0, #3
 80029c6:	e131      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4a48      	ldr	r2, [pc, #288]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80029d0:	6921      	ldr	r1, [r4, #16]
 80029d2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e7dd      	b.n	8002996 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_DISABLE();
 80029da:	4b45      	ldr	r3, [pc, #276]	; (8002af0 <HAL_RCC_OscConfig+0x298>)
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029e0:	f7fe fc32 	bl	8001248 <HAL_GetTick>
 80029e4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b41      	ldr	r3, [pc, #260]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f013 0f02 	tst.w	r3, #2
 80029ee:	d0d2      	beq.n	8002996 <HAL_RCC_OscConfig+0x13e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029f0:	f7fe fc2a 	bl	8001248 <HAL_GetTick>
 80029f4:	1b40      	subs	r0, r0, r5
 80029f6:	2802      	cmp	r0, #2
 80029f8:	d9f5      	bls.n	80029e6 <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80029fa:	2003      	movs	r0, #3
 80029fc:	e116      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b3c      	ldr	r3, [pc, #240]	; (8002af0 <HAL_RCC_OscConfig+0x298>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a06:	f7fe fc1f 	bl	8001248 <HAL_GetTick>
 8002a0a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a0c:	4b37      	ldr	r3, [pc, #220]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f013 0f02 	tst.w	r3, #2
 8002a14:	d006      	beq.n	8002a24 <HAL_RCC_OscConfig+0x1cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a16:	f7fe fc17 	bl	8001248 <HAL_GetTick>
 8002a1a:	1b40      	subs	r0, r0, r5
 8002a1c:	2802      	cmp	r0, #2
 8002a1e:	d9f5      	bls.n	8002a0c <HAL_RCC_OscConfig+0x1b4>
        {
          return HAL_TIMEOUT;
 8002a20:	2003      	movs	r0, #3
 8002a22:	e103      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	6823      	ldr	r3, [r4, #0]
 8002a26:	f013 0f04 	tst.w	r3, #4
 8002a2a:	d077      	beq.n	8002b1c <HAL_RCC_OscConfig+0x2c4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002a34:	d133      	bne.n	8002a9e <HAL_RCC_OscConfig+0x246>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	4b2c      	ldr	r3, [pc, #176]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002a3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a4e:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b28      	ldr	r3, [pc, #160]	; (8002af4 <HAL_RCC_OscConfig+0x29c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a58:	d023      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x24a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d034      	beq.n	8002aca <HAL_RCC_OscConfig+0x272>
 8002a60:	2b05      	cmp	r3, #5
 8002a62:	d038      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x27e>
 8002a64:	4b21      	ldr	r3, [pc, #132]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002a66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	671a      	str	r2, [r3, #112]	; 0x70
 8002a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a70:	f022 0204 	bic.w	r2, r2, #4
 8002a74:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a76:	68a3      	ldr	r3, [r4, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d03d      	beq.n	8002af8 <HAL_RCC_OscConfig+0x2a0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a7c:	f7fe fbe4 	bl	8001248 <HAL_GetTick>
 8002a80:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a82:	4b1a      	ldr	r3, [pc, #104]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	f013 0f02 	tst.w	r3, #2
 8002a8a:	d146      	bne.n	8002b1a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8c:	f7fe fbdc 	bl	8001248 <HAL_GetTick>
 8002a90:	1b80      	subs	r0, r0, r6
 8002a92:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a96:	4298      	cmp	r0, r3
 8002a98:	d9f3      	bls.n	8002a82 <HAL_RCC_OscConfig+0x22a>
        {
          return HAL_TIMEOUT;
 8002a9a:	2003      	movs	r0, #3
 8002a9c:	e0c6      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 8002a9e:	2500      	movs	r5, #0
 8002aa0:	e7d6      	b.n	8002a50 <HAL_RCC_OscConfig+0x1f8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aa2:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <HAL_RCC_OscConfig+0x29c>)
 8002aa4:	6813      	ldr	r3, [r2, #0]
 8002aa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aaa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002aac:	f7fe fbcc 	bl	8001248 <HAL_GetTick>
 8002ab0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab2:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <HAL_RCC_OscConfig+0x29c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002aba:	d1ce      	bne.n	8002a5a <HAL_RCC_OscConfig+0x202>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fbc4 	bl	8001248 <HAL_GetTick>
 8002ac0:	1b80      	subs	r0, r0, r6
 8002ac2:	2802      	cmp	r0, #2
 8002ac4:	d9f5      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x25a>
          return HAL_TIMEOUT;
 8002ac6:	2003      	movs	r0, #3
 8002ac8:	e0b0      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aca:	4a08      	ldr	r2, [pc, #32]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002acc:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad4:	e7cf      	b.n	8002a76 <HAL_RCC_OscConfig+0x21e>
 8002ad6:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_OscConfig+0x294>)
 8002ad8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ada:	f042 0204 	orr.w	r2, r2, #4
 8002ade:	671a      	str	r2, [r3, #112]	; 0x70
 8002ae0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	671a      	str	r2, [r3, #112]	; 0x70
 8002ae8:	e7c5      	b.n	8002a76 <HAL_RCC_OscConfig+0x21e>
 8002aea:	bf00      	nop
 8002aec:	40023800 	.word	0x40023800
 8002af0:	42470000 	.word	0x42470000
 8002af4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7fe fba6 	bl	8001248 <HAL_GetTick>
 8002afc:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	4b52      	ldr	r3, [pc, #328]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b02:	f013 0f02 	tst.w	r3, #2
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b08:	f7fe fb9e 	bl	8001248 <HAL_GetTick>
 8002b0c:	1b80      	subs	r0, r0, r6
 8002b0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b12:	4298      	cmp	r0, r3
 8002b14:	d9f3      	bls.n	8002afe <HAL_RCC_OscConfig+0x2a6>
        {
          return HAL_TIMEOUT;
 8002b16:	2003      	movs	r0, #3
 8002b18:	e088      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b1a:	b9ed      	cbnz	r5, 8002b58 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b1c:	69a3      	ldr	r3, [r4, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f000 8083 	beq.w	8002c2a <HAL_RCC_OscConfig+0x3d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b24:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	f002 020c 	and.w	r2, r2, #12
 8002b2c:	2a08      	cmp	r2, #8
 8002b2e:	d051      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x37c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d017      	beq.n	8002b64 <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b34:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <HAL_RCC_OscConfig+0x3f4>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b3a:	f7fe fb85 	bl	8001248 <HAL_GetTick>
 8002b3e:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b40:	4b41      	ldr	r3, [pc, #260]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b48:	d042      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe fb7d 	bl	8001248 <HAL_GetTick>
 8002b4e:	1b00      	subs	r0, r0, r4
 8002b50:	2802      	cmp	r0, #2
 8002b52:	d9f5      	bls.n	8002b40 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002b54:	2003      	movs	r0, #3
 8002b56:	e069      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4a3b      	ldr	r2, [pc, #236]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002b5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002b5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b60:	6413      	str	r3, [r2, #64]	; 0x40
 8002b62:	e7db      	b.n	8002b1c <HAL_RCC_OscConfig+0x2c4>
        __HAL_RCC_PLL_DISABLE();
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x3f4>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002b6a:	f7fe fb6d 	bl	8001248 <HAL_GetTick>
 8002b6e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b70:	4b35      	ldr	r3, [pc, #212]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002b78:	d006      	beq.n	8002b88 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fb65 	bl	8001248 <HAL_GetTick>
 8002b7e:	1b40      	subs	r0, r0, r5
 8002b80:	2802      	cmp	r0, #2
 8002b82:	d9f5      	bls.n	8002b70 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 8002b84:	2003      	movs	r0, #3
 8002b86:	e051      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b88:	69e3      	ldr	r3, [r4, #28]
 8002b8a:	6a22      	ldr	r2, [r4, #32]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002b90:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002b94:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002b96:	0852      	lsrs	r2, r2, #1
 8002b98:	3a01      	subs	r2, #1
 8002b9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002ba0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002ba4:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002ba6:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_OscConfig+0x3f4>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002bae:	f7fe fb4b 	bl	8001248 <HAL_GetTick>
 8002bb2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	4b24      	ldr	r3, [pc, #144]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bbe:	f7fe fb43 	bl	8001248 <HAL_GetTick>
 8002bc2:	1b00      	subs	r0, r0, r4
 8002bc4:	2802      	cmp	r0, #2
 8002bc6:	d9f5      	bls.n	8002bb4 <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002bc8:	2003      	movs	r0, #3
 8002bca:	e02f      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002bcc:	2000      	movs	r0, #0
 8002bce:	e02d      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	e02b      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d02b      	beq.n	8002c30 <HAL_RCC_OscConfig+0x3d8>
        pll_config = RCC->PLLCFGR;
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x3f0>)
 8002bda:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bdc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8002be0:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be2:	4291      	cmp	r1, r2
 8002be4:	d126      	bne.n	8002c34 <HAL_RCC_OscConfig+0x3dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002be6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bea:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bec:	428a      	cmp	r2, r1
 8002bee:	d123      	bne.n	8002c38 <HAL_RCC_OscConfig+0x3e0>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bf2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002bfc:	d11e      	bne.n	8002c3c <HAL_RCC_OscConfig+0x3e4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bfe:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002c02:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002c04:	0852      	lsrs	r2, r2, #1
 8002c06:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c08:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3e8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c0e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002c12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c14:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8002c18:	d114      	bne.n	8002c44 <HAL_RCC_OscConfig+0x3ec>
  return HAL_OK;
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	e006      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
    return HAL_ERROR;
 8002c1e:	2001      	movs	r0, #1
}
 8002c20:	4770      	bx	lr
        return HAL_ERROR;
 8002c22:	2001      	movs	r0, #1
 8002c24:	e002      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
        return HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
 8002c28:	e000      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
  return HAL_OK;
 8002c2a:	2000      	movs	r0, #0
}
 8002c2c:	b002      	add	sp, #8
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002c30:	2001      	movs	r0, #1
 8002c32:	e7fb      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
          return HAL_ERROR;
 8002c34:	2001      	movs	r0, #1
 8002c36:	e7f9      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002c38:	2001      	movs	r0, #1
 8002c3a:	e7f7      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002c3c:	2001      	movs	r0, #1
 8002c3e:	e7f5      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002c40:	2001      	movs	r0, #1
 8002c42:	e7f3      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002c44:	2001      	movs	r0, #1
 8002c46:	e7f1      	b.n	8002c2c <HAL_RCC_OscConfig+0x3d4>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	42470000 	.word	0x42470000

08002c50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b508      	push	{r3, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c52:	4b33      	ldr	r3, [pc, #204]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d05b      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0xc6>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d15b      	bne.n	8002d1a <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c62:	4b2f      	ldr	r3, [pc, #188]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002c70:	d02c      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b2b      	ldr	r3, [pc, #172]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c74:	6858      	ldr	r0, [r3, #4]
 8002c76:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002c7a:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002c7e:	ebbc 0c00 	subs.w	ip, ip, r0
 8002c82:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002c86:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002c8a:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002c8e:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002c92:	ebb1 010c 	subs.w	r1, r1, ip
 8002c96:	eb63 030e 	sbc.w	r3, r3, lr
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ca0:	00c9      	lsls	r1, r1, #3
 8002ca2:	eb11 0c00 	adds.w	ip, r1, r0
 8002ca6:	f143 0300 	adc.w	r3, r3, #0
 8002caa:	0259      	lsls	r1, r3, #9
 8002cac:	2300      	movs	r3, #0
 8002cae:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8002cb2:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8002cb6:	f7fd fdbd 	bl	8000834 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002cba:	4b19      	ldr	r3, [pc, #100]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8002cc6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002cca:	e027      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xcc>
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ccc:	4b14      	ldr	r3, [pc, #80]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cce:	6858      	ldr	r0, [r3, #4]
 8002cd0:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8002cd4:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8002cd8:	ebbc 0c00 	subs.w	ip, ip, r0
 8002cdc:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8002ce0:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8002ce4:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8002ce8:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8002cec:	ebb1 010c 	subs.w	r1, r1, ip
 8002cf0:	eb63 030e 	sbc.w	r3, r3, lr
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cfa:	00c9      	lsls	r1, r1, #3
 8002cfc:	eb11 0c00 	adds.w	ip, r1, r0
 8002d00:	f143 0300 	adc.w	r3, r3, #0
 8002d04:	0299      	lsls	r1, r3, #10
 8002d06:	2300      	movs	r3, #0
 8002d08:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8002d0c:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8002d10:	f7fd fd90 	bl	8000834 <__aeabi_uldivmod>
 8002d14:	e7d1      	b.n	8002cba <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8002d16:	4803      	ldr	r0, [pc, #12]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002d18:	e000      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0xcc>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1a:	4803      	ldr	r0, [pc, #12]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xd8>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002d1c:	bd08      	pop	{r3, pc}
 8002d1e:	bf00      	nop
 8002d20:	40023800 	.word	0x40023800
 8002d24:	007a1200 	.word	0x007a1200
 8002d28:	00f42400 	.word	0x00f42400

08002d2c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002d2c:	2800      	cmp	r0, #0
 8002d2e:	f000 809b 	beq.w	8002e68 <HAL_RCC_ClockConfig+0x13c>
{
 8002d32:	b570      	push	{r4, r5, r6, lr}
 8002d34:	460d      	mov	r5, r1
 8002d36:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d38:	4b4f      	ldr	r3, [pc, #316]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	428b      	cmp	r3, r1
 8002d42:	d208      	bcs.n	8002d56 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d44:	b2cb      	uxtb	r3, r1
 8002d46:	4a4c      	ldr	r2, [pc, #304]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002d48:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	6813      	ldr	r3, [r2, #0]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	428b      	cmp	r3, r1
 8002d52:	f040 808b 	bne.w	8002e6c <HAL_RCC_ClockConfig+0x140>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d56:	6823      	ldr	r3, [r4, #0]
 8002d58:	f013 0f02 	tst.w	r3, #2
 8002d5c:	d017      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d5e:	f013 0f04 	tst.w	r3, #4
 8002d62:	d004      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d64:	4a45      	ldr	r2, [pc, #276]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d66:	6893      	ldr	r3, [r2, #8]
 8002d68:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d6c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6e:	6823      	ldr	r3, [r4, #0]
 8002d70:	f013 0f08 	tst.w	r3, #8
 8002d74:	d004      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d76:	4a41      	ldr	r2, [pc, #260]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d7e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d80:	4a3e      	ldr	r2, [pc, #248]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002d82:	6893      	ldr	r3, [r2, #8]
 8002d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d88:	68a1      	ldr	r1, [r4, #8]
 8002d8a:	430b      	orrs	r3, r1
 8002d8c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	6823      	ldr	r3, [r4, #0]
 8002d90:	f013 0f01 	tst.w	r3, #1
 8002d94:	d032      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xd0>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d96:	6863      	ldr	r3, [r4, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d021      	beq.n	8002de0 <HAL_RCC_ClockConfig+0xb4>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d9c:	1e9a      	subs	r2, r3, #2
 8002d9e:	2a01      	cmp	r2, #1
 8002da0:	d925      	bls.n	8002dee <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da2:	4a36      	ldr	r2, [pc, #216]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	f012 0f02 	tst.w	r2, #2
 8002daa:	d061      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dac:	4933      	ldr	r1, [pc, #204]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002dae:	688a      	ldr	r2, [r1, #8]
 8002db0:	f022 0203 	bic.w	r2, r2, #3
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002db8:	f7fe fa46 	bl	8001248 <HAL_GetTick>
 8002dbc:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	4b2f      	ldr	r3, [pc, #188]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
 8002dc6:	6862      	ldr	r2, [r4, #4]
 8002dc8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002dcc:	d016      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xd0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dce:	f7fe fa3b 	bl	8001248 <HAL_GetTick>
 8002dd2:	1b80      	subs	r0, r0, r6
 8002dd4:	f241 3388 	movw	r3, #5000	; 0x1388
 8002dd8:	4298      	cmp	r0, r3
 8002dda:	d9f0      	bls.n	8002dbe <HAL_RCC_ClockConfig+0x92>
        return HAL_TIMEOUT;
 8002ddc:	2003      	movs	r0, #3
 8002dde:	e042      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de0:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002de2:	6812      	ldr	r2, [r2, #0]
 8002de4:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8002de8:	d1e0      	bne.n	8002dac <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002dea:	2001      	movs	r0, #1
 8002dec:	e03b      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dee:	4a23      	ldr	r2, [pc, #140]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002df6:	d1d9      	bne.n	8002dac <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8002df8:	2001      	movs	r0, #1
 8002dfa:	e034      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	42ab      	cmp	r3, r5
 8002e06:	d907      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e08:	b2ea      	uxtb	r2, r5
 8002e0a:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_RCC_ClockConfig+0x14c>)
 8002e0c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	42ab      	cmp	r3, r5
 8002e16:	d12d      	bne.n	8002e74 <HAL_RCC_ClockConfig+0x148>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	6823      	ldr	r3, [r4, #0]
 8002e1a:	f013 0f04 	tst.w	r3, #4
 8002e1e:	d006      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x102>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e20:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e22:	6893      	ldr	r3, [r2, #8]
 8002e24:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e28:	68e1      	ldr	r1, [r4, #12]
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	6823      	ldr	r3, [r4, #0]
 8002e30:	f013 0f08 	tst.w	r3, #8
 8002e34:	d007      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x11a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e36:	4a11      	ldr	r2, [pc, #68]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e38:	6893      	ldr	r3, [r2, #8]
 8002e3a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002e3e:	6921      	ldr	r1, [r4, #16]
 8002e40:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e44:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e46:	f7ff ff03 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002e4a:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <HAL_RCC_ClockConfig+0x150>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e52:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <HAL_RCC_ClockConfig+0x154>)
 8002e54:	5cd3      	ldrb	r3, [r2, r3]
 8002e56:	40d8      	lsrs	r0, r3
 8002e58:	4b0a      	ldr	r3, [pc, #40]	; (8002e84 <HAL_RCC_ClockConfig+0x158>)
 8002e5a:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002e5c:	4b0a      	ldr	r3, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x15c>)
 8002e5e:	6818      	ldr	r0, [r3, #0]
 8002e60:	f7fe f9a6 	bl	80011b0 <HAL_InitTick>
  return HAL_OK;
 8002e64:	2000      	movs	r0, #0
}
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8002e68:	2001      	movs	r0, #1
}
 8002e6a:	4770      	bx	lr
      return HAL_ERROR;
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	e7fa      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
 8002e72:	e7f8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8002e74:	2001      	movs	r0, #1
 8002e76:	e7f6      	b.n	8002e66 <HAL_RCC_ClockConfig+0x13a>
 8002e78:	40023c00 	.word	0x40023c00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	080051b4 	.word	0x080051b4
 8002e84:	20000000 	.word	0x20000000
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002e8c:	4b01      	ldr	r3, [pc, #4]	; (8002e94 <HAL_RCC_GetHCLKFreq+0x8>)
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000000 	.word	0x20000000

08002e98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e98:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e9a:	f7ff fff7 	bl	8002e8c <HAL_RCC_GetHCLKFreq>
 8002e9e:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002ea6:	4a03      	ldr	r2, [pc, #12]	; (8002eb4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ea8:	5cd3      	ldrb	r3, [r2, r3]
}
 8002eaa:	40d8      	lsrs	r0, r3
 8002eac:	bd08      	pop	{r3, pc}
 8002eae:	bf00      	nop
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	080051c4 	.word	0x080051c4

08002eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002eb8:	b530      	push	{r4, r5, lr}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ebe:	6803      	ldr	r3, [r0, #0]
 8002ec0:	f013 0f05 	tst.w	r3, #5
 8002ec4:	d106      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ec6:	6823      	ldr	r3, [r4, #0]
 8002ec8:	f013 0f02 	tst.w	r3, #2
 8002ecc:	d12e      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ece:	2000      	movs	r0, #0
}
 8002ed0:	b003      	add	sp, #12
 8002ed2:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8002ed4:	4b4a      	ldr	r3, [pc, #296]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002eda:	f7fe f9b5 	bl	8001248 <HAL_GetTick>
 8002ede:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ee0:	4b48      	ldr	r3, [pc, #288]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002ee8:	d006      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002eea:	f7fe f9ad 	bl	8001248 <HAL_GetTick>
 8002eee:	1b43      	subs	r3, r0, r5
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d9f5      	bls.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 8002ef4:	2003      	movs	r0, #3
 8002ef6:	e7eb      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002ef8:	6862      	ldr	r2, [r4, #4]
 8002efa:	68a3      	ldr	r3, [r4, #8]
 8002efc:	071b      	lsls	r3, r3, #28
 8002efe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002f02:	4a40      	ldr	r2, [pc, #256]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f04:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002f08:	4b3d      	ldr	r3, [pc, #244]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8002f0e:	f7fe f99b 	bl	8001248 <HAL_GetTick>
 8002f12:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002f14:	4b3b      	ldr	r3, [pc, #236]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002f1c:	d1d3      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f1e:	f7fe f993 	bl	8001248 <HAL_GetTick>
 8002f22:	1b43      	subs	r3, r0, r5
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d9f5      	bls.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002f28:	2003      	movs	r0, #3
 8002f2a:	e7d1      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	9301      	str	r3, [sp, #4]
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f40:	9301      	str	r3, [sp, #4]
 8002f42:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002f44:	4a30      	ldr	r2, [pc, #192]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f4c:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002f4e:	f7fe f97b 	bl	8001248 <HAL_GetTick>
 8002f52:	4605      	mov	r5, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002f54:	4b2c      	ldr	r3, [pc, #176]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002f5c:	d106      	bne.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002f5e:	f7fe f973 	bl	8001248 <HAL_GetTick>
 8002f62:	1b43      	subs	r3, r0, r5
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d9f5      	bls.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002f68:	2003      	movs	r0, #3
 8002f6a:	e7b1      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f70:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002f74:	d014      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f76:	68e2      	ldr	r2, [r4, #12]
 8002f78:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d00f      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f80:	4b20      	ldr	r3, [pc, #128]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f84:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f88:	491d      	ldr	r1, [pc, #116]	; (8003000 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f90:	2000      	movs	r0, #0
 8002f92:	f8c1 0e40 	str.w	r0, [r1, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8002f96:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9a:	f013 0f01 	tst.w	r3, #1
 8002f9e:	d113      	bne.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fa0:	68e3      	ldr	r3, [r4, #12]
 8002fa2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8002fa6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002faa:	d01e      	beq.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x132>
 8002fac:	4a15      	ldr	r2, [pc, #84]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fae:	6893      	ldr	r3, [r2, #8]
 8002fb0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fb4:	6093      	str	r3, [r2, #8]
 8002fb6:	4913      	ldr	r1, [pc, #76]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fb8:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8002fba:	68e2      	ldr	r2, [r4, #12]
 8002fbc:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 8002fc4:	2000      	movs	r0, #0
 8002fc6:	e783      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f93e 	bl	8001248 <HAL_GetTick>
 8002fcc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	4b0d      	ldr	r3, [pc, #52]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	f013 0f02 	tst.w	r3, #2
 8002fd6:	d1e3      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd8:	f7fe f936 	bl	8001248 <HAL_GetTick>
 8002fdc:	1b40      	subs	r0, r0, r5
 8002fde:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fe2:	4298      	cmp	r0, r3
 8002fe4:	d9f3      	bls.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
 8002fe6:	2003      	movs	r0, #3
 8002fe8:	e772      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fea:	4906      	ldr	r1, [pc, #24]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fec:	688a      	ldr	r2, [r1, #8]
 8002fee:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002ff2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	608b      	str	r3, [r1, #8]
 8002ffe:	e7da      	b.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003000:	42470000 	.word	0x42470000
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000

0800300c <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 800300c:	2801      	cmp	r0, #1
 800300e:	d001      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
  uint32_t frequency = 0U;
 8003010:	2000      	movs	r0, #0
 8003012:	4770      	bx	lr
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003014:	4b16      	ldr	r3, [pc, #88]	; (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003016:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 8003018:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 800301c:	d003      	beq.n	8003026 <HAL_RCCEx_GetPeriphCLKFreq+0x1a>
 800301e:	2b01      	cmp	r3, #1
 8003020:	d123      	bne.n	800306a <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 8003022:	4814      	ldr	r0, [pc, #80]	; (8003074 <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8003024:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800302e:	d014      	beq.n	800305a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003030:	4b0f      	ldr	r3, [pc, #60]	; (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800303a:	fbb3 f3f2 	udiv	r3, r3, r2
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800303e:	4a0c      	ldr	r2, [pc, #48]	; (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8003040:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8003044:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8003048:	fb03 f000 	mul.w	r0, r3, r0
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800304c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8003050:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8003054:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 8003058:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8003064:	fbb3 f3f2 	udiv	r3, r3, r2
 8003068:	e7e9      	b.n	800303e <HAL_RCCEx_GetPeriphCLKFreq+0x32>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800306a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	40023800 	.word	0x40023800
 8003074:	00bb8000 	.word	0x00bb8000
 8003078:	007a1200 	.word	0x007a1200
 800307c:	00f42400 	.word	0x00f42400

08003080 <HAL_SPI_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003080:	2800      	cmp	r0, #0
 8003082:	d05a      	beq.n	800313a <HAL_SPI_Init+0xba>
{
 8003084:	b510      	push	{r4, lr}
 8003086:	4604      	mov	r4, r0
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003088:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800308a:	b933      	cbnz	r3, 800309a <HAL_SPI_Init+0x1a>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800308c:	6843      	ldr	r3, [r0, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003092:	d005      	beq.n	80030a0 <HAL_SPI_Init+0x20>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003094:	2300      	movs	r3, #0
 8003096:	61c3      	str	r3, [r0, #28]
 8003098:	e002      	b.n	80030a0 <HAL_SPI_Init+0x20>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800309a:	2300      	movs	r3, #0
 800309c:	6103      	str	r3, [r0, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800309e:	6143      	str	r3, [r0, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030a0:	2300      	movs	r3, #0
 80030a2:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030a4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d040      	beq.n	800312e <HAL_SPI_Init+0xae>
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030ac:	2302      	movs	r3, #2
 80030ae:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
 80030b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030ba:	6013      	str	r3, [r2, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030bc:	6863      	ldr	r3, [r4, #4]
 80030be:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80030c2:	68a2      	ldr	r2, [r4, #8]
 80030c4:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 80030c8:	4313      	orrs	r3, r2
 80030ca:	68e2      	ldr	r2, [r4, #12]
 80030cc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80030d0:	4313      	orrs	r3, r2
 80030d2:	6922      	ldr	r2, [r4, #16]
 80030d4:	f002 0202 	and.w	r2, r2, #2
 80030d8:	4313      	orrs	r3, r2
 80030da:	6962      	ldr	r2, [r4, #20]
 80030dc:	f002 0201 	and.w	r2, r2, #1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	69a2      	ldr	r2, [r4, #24]
 80030e4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80030e8:	4313      	orrs	r3, r2
 80030ea:	69e2      	ldr	r2, [r4, #28]
 80030ec:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80030f0:	4313      	orrs	r3, r2
 80030f2:	6a22      	ldr	r2, [r4, #32]
 80030f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80030f8:	4313      	orrs	r3, r2
 80030fa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80030fc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003100:	6821      	ldr	r1, [r4, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003106:	8b63      	ldrh	r3, [r4, #26]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800310e:	f002 0210 	and.w	r2, r2, #16
 8003112:	6821      	ldr	r1, [r4, #0]
 8003114:	4313      	orrs	r3, r2
 8003116:	604b      	str	r3, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	69d3      	ldr	r3, [r2, #28]
 800311c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003120:	61d3      	str	r3, [r2, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003122:	2000      	movs	r0, #0
 8003124:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003126:	2301      	movs	r3, #1
 8003128:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800312c:	bd10      	pop	{r4, pc}
    hspi->Lock = HAL_UNLOCKED;
 800312e:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003132:	4620      	mov	r0, r4
 8003134:	f7fd ff9a 	bl	800106c <HAL_SPI_MspInit>
 8003138:	e7b8      	b.n	80030ac <HAL_SPI_Init+0x2c>
    return HAL_ERROR;
 800313a:	2001      	movs	r0, #1
}
 800313c:	4770      	bx	lr
	...

08003140 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003140:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	9301      	str	r3, [sp, #4]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003146:	9b01      	ldr	r3, [sp, #4]
 8003148:	3301      	adds	r3, #1
 800314a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 800314c:	9a01      	ldr	r2, [sp, #4]
 800314e:	4b0f      	ldr	r3, [pc, #60]	; (800318c <USB_CoreReset+0x4c>)
 8003150:	429a      	cmp	r2, r3
 8003152:	d815      	bhi.n	8003180 <USB_CoreReset+0x40>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003154:	6903      	ldr	r3, [r0, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	daf5      	bge.n	8003146 <USB_CoreReset+0x6>

  /* Core Soft Reset */
  count = 0U;
 800315a:	2300      	movs	r3, #0
 800315c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800315e:	6903      	ldr	r3, [r0, #16]
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6103      	str	r3, [r0, #16]

  do
  {
    count++;
 8003166:	9b01      	ldr	r3, [sp, #4]
 8003168:	3301      	adds	r3, #1
 800316a:	9301      	str	r3, [sp, #4]

    if (count > 200000U)
 800316c:	9a01      	ldr	r2, [sp, #4]
 800316e:	4b07      	ldr	r3, [pc, #28]	; (800318c <USB_CoreReset+0x4c>)
 8003170:	429a      	cmp	r2, r3
 8003172:	d808      	bhi.n	8003186 <USB_CoreReset+0x46>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003174:	6903      	ldr	r3, [r0, #16]
 8003176:	f013 0f01 	tst.w	r3, #1
 800317a:	d1f4      	bne.n	8003166 <USB_CoreReset+0x26>

  return HAL_OK;
 800317c:	2000      	movs	r0, #0
 800317e:	e000      	b.n	8003182 <USB_CoreReset+0x42>
      return HAL_TIMEOUT;
 8003180:	2003      	movs	r0, #3
}
 8003182:	b002      	add	sp, #8
 8003184:	4770      	bx	lr
      return HAL_TIMEOUT;
 8003186:	2003      	movs	r0, #3
 8003188:	e7fb      	b.n	8003182 <USB_CoreReset+0x42>
 800318a:	bf00      	nop
 800318c:	00030d40 	.word	0x00030d40

08003190 <USB_CoreInit>:
{
 8003190:	b084      	sub	sp, #16
 8003192:	b510      	push	{r4, lr}
 8003194:	4604      	mov	r4, r0
 8003196:	a803      	add	r0, sp, #12
 8003198:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800319c:	9b08      	ldr	r3, [sp, #32]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d11f      	bne.n	80031e2 <USB_CoreInit+0x52>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a8:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80031aa:	68e3      	ldr	r3, [r4, #12]
 80031ac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80031b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031b4:	60e3      	str	r3, [r4, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80031b6:	68e3      	ldr	r3, [r4, #12]
 80031b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80031bc:	60e3      	str	r3, [r4, #12]
    if (cfg.use_external_vbus == 1U)
 80031be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d009      	beq.n	80031d8 <USB_CoreInit+0x48>
    ret = USB_CoreReset(USBx);
 80031c4:	4620      	mov	r0, r4
 80031c6:	f7ff ffbb 	bl	8003140 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80031ca:	9b06      	ldr	r3, [sp, #24]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d01b      	beq.n	8003208 <USB_CoreInit+0x78>
}
 80031d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031d4:	b004      	add	sp, #16
 80031d6:	4770      	bx	lr
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80031d8:	68e3      	ldr	r3, [r4, #12]
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031de:	60e3      	str	r3, [r4, #12]
 80031e0:	e7f0      	b.n	80031c4 <USB_CoreInit+0x34>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80031e2:	68e3      	ldr	r3, [r4, #12]
 80031e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e8:	60e3      	str	r3, [r4, #12]
    ret = USB_CoreReset(USBx);
 80031ea:	4620      	mov	r0, r4
 80031ec:	f7ff ffa8 	bl	8003140 <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 80031f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031f2:	b923      	cbnz	r3, 80031fe <USB_CoreInit+0x6e>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80031f4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	63a3      	str	r3, [r4, #56]	; 0x38
 80031fc:	e7e5      	b.n	80031ca <USB_CoreInit+0x3a>
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80031fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003204:	63a3      	str	r3, [r4, #56]	; 0x38
 8003206:	e7e0      	b.n	80031ca <USB_CoreInit+0x3a>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003208:	68a3      	ldr	r3, [r4, #8]
 800320a:	f043 0306 	orr.w	r3, r3, #6
 800320e:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	f043 0320 	orr.w	r3, r3, #32
 8003216:	60a3      	str	r3, [r4, #8]
 8003218:	e7da      	b.n	80031d0 <USB_CoreInit+0x40>

0800321a <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800321a:	6883      	ldr	r3, [r0, #8]
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6083      	str	r3, [r0, #8]
}
 8003222:	2000      	movs	r0, #0
 8003224:	4770      	bx	lr

08003226 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003226:	6883      	ldr	r3, [r0, #8]
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	6083      	str	r3, [r0, #8]
}
 800322e:	2000      	movs	r0, #0
 8003230:	4770      	bx	lr
	...

08003234 <USB_FlushTxFifo>:
{
 8003234:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	9301      	str	r3, [sp, #4]
    count++;
 800323a:	9b01      	ldr	r3, [sp, #4]
 800323c:	3301      	adds	r3, #1
 800323e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003240:	9a01      	ldr	r2, [sp, #4]
 8003242:	4b0f      	ldr	r3, [pc, #60]	; (8003280 <USB_FlushTxFifo+0x4c>)
 8003244:	429a      	cmp	r2, r3
 8003246:	d815      	bhi.n	8003274 <USB_FlushTxFifo+0x40>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003248:	6903      	ldr	r3, [r0, #16]
 800324a:	2b00      	cmp	r3, #0
 800324c:	daf5      	bge.n	800323a <USB_FlushTxFifo+0x6>
  count = 0U;
 800324e:	2300      	movs	r3, #0
 8003250:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003252:	0189      	lsls	r1, r1, #6
 8003254:	f041 0120 	orr.w	r1, r1, #32
 8003258:	6101      	str	r1, [r0, #16]
    count++;
 800325a:	9b01      	ldr	r3, [sp, #4]
 800325c:	3301      	adds	r3, #1
 800325e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003260:	9a01      	ldr	r2, [sp, #4]
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <USB_FlushTxFifo+0x4c>)
 8003264:	429a      	cmp	r2, r3
 8003266:	d808      	bhi.n	800327a <USB_FlushTxFifo+0x46>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003268:	6903      	ldr	r3, [r0, #16]
 800326a:	f013 0f20 	tst.w	r3, #32
 800326e:	d1f4      	bne.n	800325a <USB_FlushTxFifo+0x26>
  return HAL_OK;
 8003270:	2000      	movs	r0, #0
 8003272:	e000      	b.n	8003276 <USB_FlushTxFifo+0x42>
      return HAL_TIMEOUT;
 8003274:	2003      	movs	r0, #3
}
 8003276:	b002      	add	sp, #8
 8003278:	4770      	bx	lr
      return HAL_TIMEOUT;
 800327a:	2003      	movs	r0, #3
 800327c:	e7fb      	b.n	8003276 <USB_FlushTxFifo+0x42>
 800327e:	bf00      	nop
 8003280:	00030d40 	.word	0x00030d40

08003284 <USB_FlushRxFifo>:
{
 8003284:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	9301      	str	r3, [sp, #4]
    count++;
 800328a:	9b01      	ldr	r3, [sp, #4]
 800328c:	3301      	adds	r3, #1
 800328e:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8003290:	9a01      	ldr	r2, [sp, #4]
 8003292:	4b0e      	ldr	r3, [pc, #56]	; (80032cc <USB_FlushRxFifo+0x48>)
 8003294:	429a      	cmp	r2, r3
 8003296:	d813      	bhi.n	80032c0 <USB_FlushRxFifo+0x3c>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003298:	6903      	ldr	r3, [r0, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	daf5      	bge.n	800328a <USB_FlushRxFifo+0x6>
  count = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032a2:	2310      	movs	r3, #16
 80032a4:	6103      	str	r3, [r0, #16]
    count++;
 80032a6:	9b01      	ldr	r3, [sp, #4]
 80032a8:	3301      	adds	r3, #1
 80032aa:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 80032ac:	9a01      	ldr	r2, [sp, #4]
 80032ae:	4b07      	ldr	r3, [pc, #28]	; (80032cc <USB_FlushRxFifo+0x48>)
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d808      	bhi.n	80032c6 <USB_FlushRxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032b4:	6903      	ldr	r3, [r0, #16]
 80032b6:	f013 0f10 	tst.w	r3, #16
 80032ba:	d1f4      	bne.n	80032a6 <USB_FlushRxFifo+0x22>
  return HAL_OK;
 80032bc:	2000      	movs	r0, #0
 80032be:	e000      	b.n	80032c2 <USB_FlushRxFifo+0x3e>
      return HAL_TIMEOUT;
 80032c0:	2003      	movs	r0, #3
}
 80032c2:	b002      	add	sp, #8
 80032c4:	4770      	bx	lr
      return HAL_TIMEOUT;
 80032c6:	2003      	movs	r0, #3
 80032c8:	e7fb      	b.n	80032c2 <USB_FlushRxFifo+0x3e>
 80032ca:	bf00      	nop
 80032cc:	00030d40 	.word	0x00030d40

080032d0 <USB_WritePacket>:
{
 80032d0:	b510      	push	{r4, lr}
 80032d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 80032d6:	b984      	cbnz	r4, 80032fa <USB_WritePacket+0x2a>
    count32b = ((uint32_t)len + 3U) / 4U;
 80032d8:	3303      	adds	r3, #3
 80032da:	ea4f 0e93 	mov.w	lr, r3, lsr #2
    for (i = 0U; i < count32b; i++)
 80032de:	f04f 0c00 	mov.w	ip, #0
 80032e2:	e008      	b.n	80032f6 <USB_WritePacket+0x26>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80032e4:	eb00 3302 	add.w	r3, r0, r2, lsl #12
 80032e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80032f0:	601c      	str	r4, [r3, #0]
    for (i = 0U; i < count32b; i++)
 80032f2:	f10c 0c01 	add.w	ip, ip, #1
 80032f6:	45f4      	cmp	ip, lr
 80032f8:	d3f4      	bcc.n	80032e4 <USB_WritePacket+0x14>
}
 80032fa:	2000      	movs	r0, #0
 80032fc:	bd10      	pop	{r4, pc}

080032fe <USB_ReadPacket>:
{
 80032fe:	b510      	push	{r4, lr}
 8003300:	4684      	mov	ip, r0
 8003302:	4608      	mov	r0, r1
  uint32_t count32b = (uint32_t)len >> 2U;
 8003304:	ea4f 0e92 	mov.w	lr, r2, lsr #2
  uint16_t remaining_bytes = len % 4U;
 8003308:	f002 0203 	and.w	r2, r2, #3
  for (i = 0U; i < count32b; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	e005      	b.n	800331c <USB_ReadPacket+0x1e>
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003310:	f50c 5180 	add.w	r1, ip, #4096	; 0x1000
 8003314:	6809      	ldr	r1, [r1, #0]
 8003316:	f840 1b04 	str.w	r1, [r0], #4
  for (i = 0U; i < count32b; i++)
 800331a:	3301      	adds	r3, #1
 800331c:	4573      	cmp	r3, lr
 800331e:	d3f7      	bcc.n	8003310 <USB_ReadPacket+0x12>
  if (remaining_bytes != 0U)
 8003320:	b17a      	cbz	r2, 8003342 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003322:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8003326:	f8dc 4000 	ldr.w	r4, [ip]
    i = 0U;
 800332a:	2100      	movs	r1, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800332c:	b2cb      	uxtb	r3, r1
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	fa24 f303 	lsr.w	r3, r4, r3
 8003334:	f800 3b01 	strb.w	r3, [r0], #1
      i++;
 8003338:	3101      	adds	r1, #1
      remaining_bytes--;
 800333a:	3a01      	subs	r2, #1
 800333c:	b292      	uxth	r2, r2
    } while (remaining_bytes != 0U);
 800333e:	2a00      	cmp	r2, #0
 8003340:	d1f4      	bne.n	800332c <USB_ReadPacket+0x2e>
}
 8003342:	bd10      	pop	{r4, pc}

08003344 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8003344:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8003346:	6980      	ldr	r0, [r0, #24]
}
 8003348:	4010      	ands	r0, r2
 800334a:	4770      	bx	lr

0800334c <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 800334c:	6940      	ldr	r0, [r0, #20]
}
 800334e:	f000 0001 	and.w	r0, r0, #1
 8003352:	4770      	bx	lr

08003354 <USB_SetCurrentMode>:
{
 8003354:	b538      	push	{r3, r4, r5, lr}
 8003356:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003358:	68c3      	ldr	r3, [r0, #12]
 800335a:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800335e:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8003360:	2901      	cmp	r1, #1
 8003362:	d013      	beq.n	800338c <USB_SetCurrentMode+0x38>
  else if (mode == USB_DEVICE_MODE)
 8003364:	bb19      	cbnz	r1, 80033ae <USB_SetCurrentMode+0x5a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003366:	68c3      	ldr	r3, [r0, #12]
 8003368:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800336c:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 800336e:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003370:	2001      	movs	r0, #1
 8003372:	f7fd ff6f 	bl	8001254 <HAL_Delay>
      ms++;
 8003376:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003378:	4628      	mov	r0, r5
 800337a:	f7ff ffe7 	bl	800334c <USB_GetMode>
 800337e:	b108      	cbz	r0, 8003384 <USB_SetCurrentMode+0x30>
 8003380:	2c31      	cmp	r4, #49	; 0x31
 8003382:	d9f5      	bls.n	8003370 <USB_SetCurrentMode+0x1c>
  if (ms == 50U)
 8003384:	2c32      	cmp	r4, #50	; 0x32
 8003386:	d014      	beq.n	80033b2 <USB_SetCurrentMode+0x5e>
  return HAL_OK;
 8003388:	2000      	movs	r0, #0
}
 800338a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800338c:	68c3      	ldr	r3, [r0, #12]
 800338e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003392:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8003394:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8003396:	2001      	movs	r0, #1
 8003398:	f7fd ff5c 	bl	8001254 <HAL_Delay>
      ms++;
 800339c:	3401      	adds	r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800339e:	4628      	mov	r0, r5
 80033a0:	f7ff ffd4 	bl	800334c <USB_GetMode>
 80033a4:	2801      	cmp	r0, #1
 80033a6:	d0ed      	beq.n	8003384 <USB_SetCurrentMode+0x30>
 80033a8:	2c31      	cmp	r4, #49	; 0x31
 80033aa:	d9f4      	bls.n	8003396 <USB_SetCurrentMode+0x42>
 80033ac:	e7ea      	b.n	8003384 <USB_SetCurrentMode+0x30>
    return HAL_ERROR;
 80033ae:	2001      	movs	r0, #1
 80033b0:	e7eb      	b.n	800338a <USB_SetCurrentMode+0x36>
    return HAL_ERROR;
 80033b2:	2001      	movs	r0, #1
 80033b4:	e7e9      	b.n	800338a <USB_SetCurrentMode+0x36>
	...

080033b8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033b8:	b084      	sub	sp, #16
 80033ba:	b538      	push	{r3, r4, r5, lr}
 80033bc:	4604      	mov	r4, r0
 80033be:	a805      	add	r0, sp, #20
 80033c0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80033ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033d0:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80033d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033d4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80033d8:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80033da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80033dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e0:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80033e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80033e4:	f413 7f80 	tst.w	r3, #256	; 0x100
 80033e8:	d010      	beq.n	800340c <USB_HostInit+0x54>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80033ea:	9b07      	ldr	r3, [sp, #28]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d006      	beq.n	80033fe <USB_HostInit+0x46>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80033f0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 80033f4:	f023 0304 	bic.w	r3, r3, #4
 80033f8:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 80033fc:	e00c      	b.n	8003418 <USB_HostInit+0x60>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80033fe:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003402:	f043 0304 	orr.w	r3, r3, #4
 8003406:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
 800340a:	e005      	b.n	8003418 <USB_HostInit+0x60>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800340c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003418:	2110      	movs	r1, #16
 800341a:	4620      	mov	r0, r4
 800341c:	f7ff ff0a 	bl	8003234 <USB_FlushTxFifo>
 8003420:	4605      	mov	r5, r0
 8003422:	b100      	cbz	r0, 8003426 <USB_HostInit+0x6e>
  {
    ret = HAL_ERROR;
 8003424:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003426:	4620      	mov	r0, r4
 8003428:	f7ff ff2c 	bl	8003284 <USB_FlushRxFifo>
 800342c:	b100      	cbz	r0, 8003430 <USB_HostInit+0x78>
  {
    ret = HAL_ERROR;
 800342e:	2501      	movs	r5, #1
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8003430:	2200      	movs	r2, #0
 8003432:	e009      	b.n	8003448 <USB_HostInit+0x90>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8003434:	eb04 1342 	add.w	r3, r4, r2, lsl #5
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    USBx_HC(i)->HCINTMSK = 0U;
 8003440:	2100      	movs	r1, #0
 8003442:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
  for (i = 0U; i < cfg.Host_channels; i++)
 8003446:	3201      	adds	r2, #1
 8003448:	9b06      	ldr	r3, [sp, #24]
 800344a:	4293      	cmp	r3, r2
 800344c:	d8f2      	bhi.n	8003434 <USB_HostInit+0x7c>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	61a3      	str	r3, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8003452:	f04f 33ff 	mov.w	r3, #4294967295
 8003456:	6163      	str	r3, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8003458:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800345a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800345e:	d017      	beq.n	8003490 <USB_HostInit+0xd8>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8003460:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003464:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8003466:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 800346a:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <USB_HostInit+0xec>)
 800346e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003472:	9b08      	ldr	r3, [sp, #32]
 8003474:	b91b      	cbnz	r3, 800347e <USB_HostInit+0xc6>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003476:	69a3      	ldr	r3, [r4, #24]
 8003478:	f043 0310 	orr.w	r3, r3, #16
 800347c:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800347e:	69a2      	ldr	r2, [r4, #24]
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <USB_HostInit+0xf0>)
 8003482:	4313      	orrs	r3, r2
 8003484:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8003486:	4628      	mov	r0, r5
 8003488:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800348c:	b004      	add	sp, #16
 800348e:	4770      	bx	lr
    USBx->GRXFSIZ  = 0x80U;
 8003490:	2380      	movs	r3, #128	; 0x80
 8003492:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8003494:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8003498:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800349a:	4b04      	ldr	r3, [pc, #16]	; (80034ac <USB_HostInit+0xf4>)
 800349c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
 80034a0:	e7e7      	b.n	8003472 <USB_HostInit+0xba>
 80034a2:	bf00      	nop
 80034a4:	00e00300 	.word	0x00e00300
 80034a8:	a3200008 	.word	0xa3200008
 80034ac:	004000e0 	.word	0x004000e0

080034b0 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80034b0:	f500 6c80 	add.w	ip, r0, #1024	; 0x400
 80034b4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80034b8:	f023 0303 	bic.w	r3, r3, #3
 80034bc:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80034c0:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 80034c4:	f001 0203 	and.w	r2, r1, #3
 80034c8:	4313      	orrs	r3, r2
 80034ca:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400

  if (freq == HCFG_48_MHZ)
 80034ce:	2901      	cmp	r1, #1
 80034d0:	d003      	beq.n	80034da <USB_InitFSLSPClkSel+0x2a>
  {
    USBx_HOST->HFIR = 48000U;
  }
  else if (freq == HCFG_6_MHZ)
 80034d2:	2902      	cmp	r1, #2
 80034d4:	d006      	beq.n	80034e4 <USB_InitFSLSPClkSel+0x34>
  {
    /* ... */
  }

  return HAL_OK;
}
 80034d6:	2000      	movs	r0, #0
 80034d8:	4770      	bx	lr
    USBx_HOST->HFIR = 48000U;
 80034da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80034de:	f8cc 3004 	str.w	r3, [ip, #4]
 80034e2:	e7f8      	b.n	80034d6 <USB_InitFSLSPClkSel+0x26>
    USBx_HOST->HFIR = 6000U;
 80034e4:	f241 7370 	movw	r3, #6000	; 0x1770
 80034e8:	f8cc 3004 	str.w	r3, [ip, #4]
 80034ec:	e7f3      	b.n	80034d6 <USB_InitFSLSPClkSel+0x26>

080034ee <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80034ee:	b530      	push	{r4, r5, lr}
 80034f0:	b083      	sub	sp, #12
 80034f2:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80034f4:	2500      	movs	r5, #0
 80034f6:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80034f8:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80034fc:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80034fe:	9b01      	ldr	r3, [sp, #4]
 8003500:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003504:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8003506:	9b01      	ldr	r3, [sp, #4]
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8003510:	2064      	movs	r0, #100	; 0x64
 8003512:	f7fd fe9f 	bl	8001254 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8003516:	9b01      	ldr	r3, [sp, #4]
 8003518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351c:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8003520:	200a      	movs	r0, #10
 8003522:	f7fd fe97 	bl	8001254 <HAL_Delay>

  return HAL_OK;
}
 8003526:	4628      	mov	r0, r5
 8003528:	b003      	add	sp, #12
 800352a:	bd30      	pop	{r4, r5, pc}

0800352c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800352c:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800352e:	2300      	movs	r3, #0
 8003530:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003532:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8003536:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8003538:	9b01      	ldr	r3, [sp, #4]
 800353a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800353e:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8003540:	9b01      	ldr	r3, [sp, #4]
 8003542:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003546:	d101      	bne.n	800354c <USB_DriveVbus+0x20>
 8003548:	2901      	cmp	r1, #1
 800354a:	d00c      	beq.n	8003566 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800354c:	9b01      	ldr	r3, [sp, #4]
 800354e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8003552:	d005      	beq.n	8003560 <USB_DriveVbus+0x34>
 8003554:	b921      	cbnz	r1, 8003560 <USB_DriveVbus+0x34>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8003556:	9b01      	ldr	r3, [sp, #4]
 8003558:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800355c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8003560:	2000      	movs	r0, #0
 8003562:	b002      	add	sp, #8
 8003564:	4770      	bx	lr
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8003566:	9b01      	ldr	r3, [sp, #4]
 8003568:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800356c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
 8003570:	e7ec      	b.n	800354c <USB_DriveVbus+0x20>

08003572 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003572:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8003578:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 800357c:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800357e:	9801      	ldr	r0, [sp, #4]
}
 8003580:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8003584:	b002      	add	sp, #8
 8003586:	4770      	bx	lr

08003588 <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8003588:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800358c:	6880      	ldr	r0, [r0, #8]
}
 800358e:	b280      	uxth	r0, r0
 8003590:	4770      	bx	lr

08003592 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8003592:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003596:	4691      	mov	r9, r2
 8003598:	461c      	mov	r4, r3
 800359a:	f89d 5024 	ldrb.w	r5, [sp, #36]	; 0x24
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800359e:	eb00 1641 	add.w	r6, r0, r1, lsl #5
 80035a2:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 80035a6:	f04f 32ff 	mov.w	r2, #4294967295
 80035aa:	609a      	str	r2, [r3, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80035ac:	2d03      	cmp	r5, #3
 80035ae:	d875      	bhi.n	800369c <USB_HC_Init+0x10a>
 80035b0:	e8df f005 	tbb	[pc, r5]
 80035b4:	18026602 	.word	0x18026602
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035b8:	f240 429d 	movw	r2, #1181	; 0x49d
 80035bc:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80035be:	f019 0f80 	tst.w	r9, #128	; 0x80
 80035c2:	d109      	bne.n	80035d8 <USB_HC_Init+0x46>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
      }
      else
      {
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80035c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80035c6:	f412 7f80 	tst.w	r2, #256	; 0x100
 80035ca:	d069      	beq.n	80036a0 <USB_HC_Init+0x10e>
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80035cc:	68da      	ldr	r2, [r3, #12]
 80035ce:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80035d2:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80035d4:	2700      	movs	r7, #0
 80035d6:	e00c      	b.n	80035f2 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80035d8:	68da      	ldr	r2, [r3, #12]
 80035da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035de:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80035e0:	2700      	movs	r7, #0
 80035e2:	e006      	b.n	80035f2 <USB_HC_Init+0x60>
        }
      }
      break;

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80035e4:	f240 629d 	movw	r2, #1693	; 0x69d
 80035e8:	60da      	str	r2, [r3, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80035ea:	f019 0f80 	tst.w	r9, #128	; 0x80
 80035ee:	d141      	bne.n	8003674 <USB_HC_Init+0xe2>
  HAL_StatusTypeDef ret = HAL_OK;
 80035f0:	2700      	movs	r7, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	f042 0202 	orr.w	r2, r2, #2
 80035f8:	60da      	str	r2, [r3, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80035fa:	f8d0 3418 	ldr.w	r3, [r0, #1048]	; 0x418
 80035fe:	f001 010f 	and.w	r1, r1, #15
 8003602:	2201      	movs	r2, #1
 8003604:	408a      	lsls	r2, r1
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c0 3418 	str.w	r3, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800360c:	6983      	ldr	r3, [r0, #24]
 800360e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003612:	6183      	str	r3, [r0, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8003614:	f019 0f80 	tst.w	r9, #128	; 0x80
 8003618:	d144      	bne.n	80036a4 <USB_HC_Init+0x112>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 800361a:	f04f 0800 	mov.w	r8, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800361e:	f7ff ffa8 	bl	8003572 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8003622:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8003626:	2b02      	cmp	r3, #2
 8003628:	d03f      	beq.n	80036aa <USB_HC_Init+0x118>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
  }
  else
  {
    HCcharLowSpeed = 0U;
 800362a:	2200      	movs	r2, #0
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800362c:	05a3      	lsls	r3, r4, #22
 800362e:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003632:	ea4f 29c9 	mov.w	r9, r9, lsl #11
 8003636:	f409 49f0 	and.w	r9, r9, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800363a:	ea43 0309 	orr.w	r3, r3, r9
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800363e:	04a9      	lsls	r1, r5, #18
 8003640:	f401 2140 	and.w	r1, r1, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8003644:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003646:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 800364a:	f3c1 010a 	ubfx	r1, r1, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800364e:	430b      	orrs	r3, r1
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8003650:	ea43 0308 	orr.w	r3, r3, r8
 8003654:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8003656:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800365a:	2d03      	cmp	r5, #3
 800365c:	d001      	beq.n	8003662 <USB_HC_Init+0xd0>
 800365e:	2d01      	cmp	r5, #1
 8003660:	d105      	bne.n	800366e <USB_HC_Init+0xdc>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003662:	f8d6 3500 	ldr.w	r3, [r6, #1280]	; 0x500
 8003666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800366a:	f8c6 3500 	str.w	r3, [r6, #1280]	; 0x500
  }

  return ret;
}
 800366e:	4638      	mov	r0, r7
 8003670:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800367a:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800367c:	2700      	movs	r7, #0
 800367e:	e7b8      	b.n	80035f2 <USB_HC_Init+0x60>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8003680:	f240 2225 	movw	r2, #549	; 0x225
 8003684:	60da      	str	r2, [r3, #12]
      if ((epnum & 0x80U) == 0x80U)
 8003686:	f019 0f80 	tst.w	r9, #128	; 0x80
 800368a:	d101      	bne.n	8003690 <USB_HC_Init+0xfe>
  HAL_StatusTypeDef ret = HAL_OK;
 800368c:	2700      	movs	r7, #0
 800368e:	e7b0      	b.n	80035f2 <USB_HC_Init+0x60>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003696:	60da      	str	r2, [r3, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003698:	2700      	movs	r7, #0
 800369a:	e7aa      	b.n	80035f2 <USB_HC_Init+0x60>
  switch (ep_type)
 800369c:	2701      	movs	r7, #1
 800369e:	e7a8      	b.n	80035f2 <USB_HC_Init+0x60>
  HAL_StatusTypeDef ret = HAL_OK;
 80036a0:	2700      	movs	r7, #0
 80036a2:	e7a6      	b.n	80035f2 <USB_HC_Init+0x60>
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80036a4:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 80036a8:	e7b9      	b.n	800361e <USB_HC_Init+0x8c>
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80036aa:	2802      	cmp	r0, #2
 80036ac:	d002      	beq.n	80036b4 <USB_HC_Init+0x122>
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80036ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036b2:	e7bb      	b.n	800362c <USB_HC_Init+0x9a>
    HCcharLowSpeed = 0U;
 80036b4:	2200      	movs	r2, #0
 80036b6:	e7b9      	b.n	800362c <USB_HC_Init+0x9a>

080036b8 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80036b8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80036bc:	6940      	ldr	r0, [r0, #20]
}
 80036be:	b280      	uxth	r0, r0
 80036c0:	4770      	bx	lr

080036c2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80036c2:	b410      	push	{r4}
 80036c4:	b083      	sub	sp, #12
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80036ca:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 80036ce:	f501 6ca0 	add.w	ip, r1, #1280	; 0x500
 80036d2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80036d6:	f3c3 4381 	ubfx	r3, r3, #18, #2
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80036da:	f8d1 2500 	ldr.w	r2, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80036de:	6884      	ldr	r4, [r0, #8]
 80036e0:	f014 0f20 	tst.w	r4, #32
 80036e4:	d002      	beq.n	80036ec <USB_HC_Halt+0x2a>
 80036e6:	0fd2      	lsrs	r2, r2, #31
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	d051      	beq.n	8003790 <USB_HC_Halt+0xce>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80036ec:	b323      	cbz	r3, 8003738 <USB_HC_Halt+0x76>
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d022      	beq.n	8003738 <USB_HC_Halt+0x76>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80036f2:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80036f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036fa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80036fe:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8003702:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8003706:	d148      	bne.n	800379a <USB_HC_Halt+0xd8>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003708:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800370c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003710:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003714:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003718:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800371c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      do
      {
        count++;
 8003720:	9b01      	ldr	r3, [sp, #4]
 8003722:	3301      	adds	r3, #1
 8003724:	9301      	str	r3, [sp, #4]

        if (count > 1000U)
 8003726:	9b01      	ldr	r3, [sp, #4]
 8003728:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800372c:	d830      	bhi.n	8003790 <USB_HC_Halt+0xce>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800372e:	f8dc 3000 	ldr.w	r3, [ip]
 8003732:	2b00      	cmp	r3, #0
 8003734:	dbf4      	blt.n	8003720 <USB_HC_Halt+0x5e>
 8003736:	e02b      	b.n	8003790 <USB_HC_Halt+0xce>
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8003738:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800373c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003740:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8003744:	6883      	ldr	r3, [r0, #8]
 8003746:	f013 0f20 	tst.w	r3, #32
 800374a:	d121      	bne.n	8003790 <USB_HC_Halt+0xce>
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800374c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800374e:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
 8003752:	d117      	bne.n	8003784 <USB_HC_Halt+0xc2>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8003754:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003758:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800375c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003760:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003764:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003768:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
          count++;
 800376c:	9b01      	ldr	r3, [sp, #4]
 800376e:	3301      	adds	r3, #1
 8003770:	9301      	str	r3, [sp, #4]
          if (count > 1000U)
 8003772:	9b01      	ldr	r3, [sp, #4]
 8003774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003778:	d80a      	bhi.n	8003790 <USB_HC_Halt+0xce>
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800377a:	f8dc 3000 	ldr.w	r3, [ip]
 800377e:	2b00      	cmp	r3, #0
 8003780:	dbf4      	blt.n	800376c <USB_HC_Halt+0xaa>
 8003782:	e005      	b.n	8003790 <USB_HC_Halt+0xce>
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8003784:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8003788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800378c:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8003790:	2000      	movs	r0, #0
 8003792:	b003      	add	sp, #12
 8003794:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003798:	4770      	bx	lr
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800379a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 800379e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80037a2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 80037a6:	e7f3      	b.n	8003790 <USB_HC_Halt+0xce>

080037a8 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80037a8:	eb00 1041 	add.w	r0, r0, r1, lsl #5
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <USB_DoPing+0x20>)
 80037ae:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80037b2:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80037be:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

  return HAL_OK;
}
 80037c2:	2000      	movs	r0, #0
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	80080000 	.word	0x80080000

080037cc <USB_HC_StartXfer>:
{
 80037cc:	b530      	push	{r4, r5, lr}
 80037ce:	b085      	sub	sp, #20
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80037d0:	784b      	ldrb	r3, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80037d2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80037d4:	f414 7f80 	tst.w	r4, #256	; 0x100
 80037d8:	d007      	beq.n	80037ea <USB_HC_StartXfer+0x1e>
 80037da:	790c      	ldrb	r4, [r1, #4]
 80037dc:	b92c      	cbnz	r4, 80037ea <USB_HC_StartXfer+0x1e>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80037de:	2a01      	cmp	r2, #1
 80037e0:	d016      	beq.n	8003810 <USB_HC_StartXfer+0x44>
    if ((dma == 0U) && (hc->do_ping == 1U))
 80037e2:	b912      	cbnz	r2, 80037ea <USB_HC_StartXfer+0x1e>
 80037e4:	794c      	ldrb	r4, [r1, #5]
 80037e6:	2c01      	cmp	r4, #1
 80037e8:	d01f      	beq.n	800382a <USB_HC_StartXfer+0x5e>
  if (hc->xfer_len > 0U)
 80037ea:	694c      	ldr	r4, [r1, #20]
 80037ec:	b30c      	cbz	r4, 8003832 <USB_HC_StartXfer+0x66>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80037ee:	890d      	ldrh	r5, [r1, #8]
 80037f0:	eb04 0c05 	add.w	ip, r4, r5
 80037f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80037f8:	fbbc fcf5 	udiv	ip, ip, r5
 80037fc:	fa1f fc8c 	uxth.w	ip, ip
    if (num_packets > max_hc_pkt_count)
 8003800:	f5bc 7f80 	cmp.w	ip, #256	; 0x100
 8003804:	d917      	bls.n	8003836 <USB_HC_StartXfer+0x6a>
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8003806:	022d      	lsls	r5, r5, #8
 8003808:	610d      	str	r5, [r1, #16]
      num_packets = max_hc_pkt_count;
 800380a:	f44f 7c80 	mov.w	ip, #256	; 0x100
 800380e:	e012      	b.n	8003836 <USB_HC_StartXfer+0x6a>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8003810:	79cc      	ldrb	r4, [r1, #7]
 8003812:	b10c      	cbz	r4, 8003818 <USB_HC_StartXfer+0x4c>
 8003814:	2c02      	cmp	r4, #2
 8003816:	d1e4      	bne.n	80037e2 <USB_HC_StartXfer+0x16>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8003818:	eb00 1443 	add.w	r4, r0, r3, lsl #5
 800381c:	f8d4 550c 	ldr.w	r5, [r4, #1292]	; 0x50c
 8003820:	f025 0570 	bic.w	r5, r5, #112	; 0x70
 8003824:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
 8003828:	e7db      	b.n	80037e2 <USB_HC_StartXfer+0x16>
      (void)USB_DoPing(USBx, hc->ch_num);
 800382a:	7849      	ldrb	r1, [r1, #1]
 800382c:	f7ff ffbc 	bl	80037a8 <USB_DoPing>
      return HAL_OK;
 8003830:	e06f      	b.n	8003912 <USB_HC_StartXfer+0x146>
    num_packets = 1U;
 8003832:	f04f 0c01 	mov.w	ip, #1
  if (hc->ep_is_in != 0U)
 8003836:	78cd      	ldrb	r5, [r1, #3]
 8003838:	2d00      	cmp	r5, #0
 800383a:	d051      	beq.n	80038e0 <USB_HC_StartXfer+0x114>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800383c:	890c      	ldrh	r4, [r1, #8]
 800383e:	fb04 f40c 	mul.w	r4, r4, ip
 8003842:	610c      	str	r4, [r1, #16]
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003844:	690c      	ldr	r4, [r1, #16]
 8003846:	f3c4 0412 	ubfx	r4, r4, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800384a:	4d39      	ldr	r5, [pc, #228]	; (8003930 <USB_HC_StartXfer+0x164>)
 800384c:	ea05 4ccc 	and.w	ip, r5, ip, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003850:	ea44 040c 	orr.w	r4, r4, ip
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8003854:	f891 c00a 	ldrb.w	ip, [r1, #10]
 8003858:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 800385c:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003860:	eb00 1343 	add.w	r3, r0, r3, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8003864:	ea44 040c 	orr.w	r4, r4, ip
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8003868:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
  if (dma != 0U)
 800386c:	b112      	cbz	r2, 8003874 <USB_HC_StartXfer+0xa8>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800386e:	68cc      	ldr	r4, [r1, #12]
 8003870:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8003874:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8003878:	68ac      	ldr	r4, [r5, #8]
 800387a:	f014 0f01 	tst.w	r4, #1
 800387e:	bf0c      	ite	eq
 8003880:	f04f 0c01 	moveq.w	ip, #1
 8003884:	f04f 0c00 	movne.w	ip, #0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8003888:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 800388c:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000
 8003890:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8003894:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 8003898:	ea44 744c 	orr.w	r4, r4, ip, lsl #29
 800389c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80038a0:	f8d3 4500 	ldr.w	r4, [r3, #1280]	; 0x500
 80038a4:	9403      	str	r4, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038a6:	9c03      	ldr	r4, [sp, #12]
 80038a8:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
 80038ac:	9403      	str	r4, [sp, #12]
  if (hc->ep_is_in != 0U)
 80038ae:	78cc      	ldrb	r4, [r1, #3]
 80038b0:	b1c4      	cbz	r4, 80038e4 <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80038b2:	9c03      	ldr	r4, [sp, #12]
 80038b4:	f444 4400 	orr.w	r4, r4, #32768	; 0x8000
 80038b8:	9403      	str	r4, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038ba:	9c03      	ldr	r4, [sp, #12]
 80038bc:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80038c0:	9403      	str	r4, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80038c2:	9c03      	ldr	r4, [sp, #12]
 80038c4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
  if (dma != 0U) /* dma mode */
 80038c8:	bb1a      	cbnz	r2, 8003912 <USB_HC_StartXfer+0x146>
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80038ca:	78cb      	ldrb	r3, [r1, #3]
 80038cc:	bb0b      	cbnz	r3, 8003912 <USB_HC_StartXfer+0x146>
 80038ce:	694b      	ldr	r3, [r1, #20]
 80038d0:	b1fb      	cbz	r3, 8003912 <USB_HC_StartXfer+0x146>
    switch (hc->ep_type)
 80038d2:	79ca      	ldrb	r2, [r1, #7]
 80038d4:	2a03      	cmp	r2, #3
 80038d6:	d815      	bhi.n	8003904 <USB_HC_StartXfer+0x138>
 80038d8:	e8df f002 	tbb	[pc, r2]
 80038dc:	1e091e09 	.word	0x1e091e09
    hc->XferSize = hc->xfer_len;
 80038e0:	610c      	str	r4, [r1, #16]
 80038e2:	e7af      	b.n	8003844 <USB_HC_StartXfer+0x78>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80038e4:	9c03      	ldr	r4, [sp, #12]
 80038e6:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 80038ea:	9403      	str	r4, [sp, #12]
 80038ec:	e7e5      	b.n	80038ba <USB_HC_StartXfer+0xee>
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80038ee:	3303      	adds	r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80038f0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80038f2:	b292      	uxth	r2, r2
 80038f4:	f3c3 038f 	ubfx	r3, r3, #2, #16
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d203      	bcs.n	8003904 <USB_HC_StartXfer+0x138>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80038fc:	6983      	ldr	r3, [r0, #24]
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	6183      	str	r3, [r0, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8003904:	2300      	movs	r3, #0
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	8a8b      	ldrh	r3, [r1, #20]
 800390a:	784a      	ldrb	r2, [r1, #1]
 800390c:	68c9      	ldr	r1, [r1, #12]
 800390e:	f7ff fcdf 	bl	80032d0 <USB_WritePacket>
}
 8003912:	2000      	movs	r0, #0
 8003914:	b005      	add	sp, #20
 8003916:	bd30      	pop	{r4, r5, pc}
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8003918:	3303      	adds	r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800391a:	692a      	ldr	r2, [r5, #16]
 800391c:	b292      	uxth	r2, r2
 800391e:	f3c3 038f 	ubfx	r3, r3, #2, #16
 8003922:	429a      	cmp	r2, r3
 8003924:	d2ee      	bcs.n	8003904 <USB_HC_StartXfer+0x138>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8003926:	6983      	ldr	r3, [r0, #24]
 8003928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800392c:	6183      	str	r3, [r0, #24]
 800392e:	e7e9      	b.n	8003904 <USB_HC_StartXfer+0x138>
 8003930:	1ff80000 	.word	0x1ff80000

08003934 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8003934:	b530      	push	{r4, r5, lr}
 8003936:	b083      	sub	sp, #12
 8003938:	4604      	mov	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	9301      	str	r3, [sp, #4]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800393e:	f7ff fc72 	bl	8003226 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003942:	2110      	movs	r1, #16
 8003944:	4620      	mov	r0, r4
 8003946:	f7ff fc75 	bl	8003234 <USB_FlushTxFifo>
 800394a:	4605      	mov	r5, r0
 800394c:	b100      	cbz	r0, 8003950 <USB_StopHost+0x1c>
  {
    ret = HAL_ERROR;
 800394e:	2501      	movs	r5, #1
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003950:	4620      	mov	r0, r4
 8003952:	f7ff fc97 	bl	8003284 <USB_FlushRxFifo>
 8003956:	b100      	cbz	r0, 800395a <USB_StopHost+0x26>
  {
    ret = HAL_ERROR;
 8003958:	2501      	movs	r5, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800395a:	2200      	movs	r2, #0
 800395c:	e00a      	b.n	8003974 <USB_StopHost+0x40>
  {
    value = USBx_HC(i)->HCCHAR;
 800395e:	eb04 1142 	add.w	r1, r4, r2, lsl #5
 8003962:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8003966:	f023 2380 	bic.w	r3, r3, #2147516416	; 0x80008000
 800396a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800396e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  for (i = 0U; i <= 15U; i++)
 8003972:	3201      	adds	r2, #1
 8003974:	2a0f      	cmp	r2, #15
 8003976:	d9f2      	bls.n	800395e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8003978:	2100      	movs	r1, #0
 800397a:	e000      	b.n	800397e <USB_StopHost+0x4a>
 800397c:	3101      	adds	r1, #1
 800397e:	290f      	cmp	r1, #15
 8003980:	d816      	bhi.n	80039b0 <USB_StopHost+0x7c>
  {
    value = USBx_HC(i)->HCCHAR;
 8003982:	eb04 1041 	add.w	r0, r4, r1, lsl #5
 8003986:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 800398a:	f8d0 3500 	ldr.w	r3, [r0, #1280]	; 0x500
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800398e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003992:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8003996:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500

    do
    {
      count++;
 800399a:	9b01      	ldr	r3, [sp, #4]
 800399c:	3301      	adds	r3, #1
 800399e:	9301      	str	r3, [sp, #4]

      if (count > 1000U)
 80039a0:	9b01      	ldr	r3, [sp, #4]
 80039a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039a6:	d8e9      	bhi.n	800397c <USB_StopHost+0x48>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80039a8:	6813      	ldr	r3, [r2, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	dbf5      	blt.n	800399a <USB_StopHost+0x66>
 80039ae:	e7e5      	b.n	800397c <USB_StopHost+0x48>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80039b0:	f04f 33ff 	mov.w	r3, #4294967295
 80039b4:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 80039b8:	6163      	str	r3, [r4, #20]

  (void)USB_EnableGlobalInt(USBx);
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff fc2d 	bl	800321a <USB_EnableGlobalInt>

  return ret;
}
 80039c0:	4628      	mov	r0, r5
 80039c2:	b003      	add	sp, #12
 80039c4:	bd30      	pop	{r4, r5, pc}

080039c6 <USBH_CDC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 80039c6:	2000      	movs	r0, #0
 80039c8:	4770      	bx	lr

080039ca <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80039ca:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80039cc:	2221      	movs	r2, #33	; 0x21
 80039ce:	7402      	strb	r2, [r0, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80039d0:	2220      	movs	r2, #32
 80039d2:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80039d4:	2200      	movs	r2, #0
 80039d6:	8242      	strh	r2, [r0, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80039d8:	8282      	strh	r2, [r0, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80039da:	2207      	movs	r2, #7
 80039dc:	82c2      	strh	r2, [r0, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80039de:	f000 ffad 	bl	800493c <USBH_CtlReq>
}
 80039e2:	bd08      	pop	{r3, pc}

080039e4 <GetLineCoding>:
{
 80039e4:	b508      	push	{r3, lr}
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80039e6:	22a1      	movs	r2, #161	; 0xa1
 80039e8:	7402      	strb	r2, [r0, #16]
  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80039ea:	2221      	movs	r2, #33	; 0x21
 80039ec:	7442      	strb	r2, [r0, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80039ee:	2200      	movs	r2, #0
 80039f0:	8242      	strh	r2, [r0, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80039f2:	8282      	strh	r2, [r0, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80039f4:	2207      	movs	r2, #7
 80039f6:	82c2      	strh	r2, [r0, #22]
  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80039f8:	f000 ffa0 	bl	800493c <USBH_CtlReq>
}
 80039fc:	bd08      	pop	{r3, pc}

080039fe <USBH_CDC_ClassRequest>:
{
 80039fe:	b538      	push	{r3, r4, r5, lr}
 8003a00:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a02:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003a06:	69d9      	ldr	r1, [r3, #28]
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8003a08:	3140      	adds	r1, #64	; 0x40
 8003a0a:	f7ff ffeb 	bl	80039e4 <GetLineCoding>
  if (status == USBH_OK)
 8003a0e:	4605      	mov	r5, r0
 8003a10:	b920      	cbnz	r0, 8003a1c <USBH_CDC_ClassRequest+0x1e>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8003a12:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8003a16:	2102      	movs	r1, #2
 8003a18:	4620      	mov	r0, r4
 8003a1a:	4798      	blx	r3
}
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	bd38      	pop	{r3, r4, r5, pc}

08003a20 <USBH_CDC_InterfaceDeInit>:
{
 8003a20:	b538      	push	{r3, r4, r5, lr}
 8003a22:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003a24:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003a28:	69dd      	ldr	r5, [r3, #28]
  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8003a2a:	7829      	ldrb	r1, [r5, #0]
 8003a2c:	b979      	cbnz	r1, 8003a4e <USBH_CDC_InterfaceDeInit+0x2e>
  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8003a2e:	7b29      	ldrb	r1, [r5, #12]
 8003a30:	b9b1      	cbnz	r1, 8003a60 <USBH_CDC_InterfaceDeInit+0x40>
  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8003a32:	7b69      	ldrb	r1, [r5, #13]
 8003a34:	b9f1      	cbnz	r1, 8003a74 <USBH_CDC_InterfaceDeInit+0x54>
  if ((phost->pActiveClass->pData) != NULL)
 8003a36:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003a3a:	69d8      	ldr	r0, [r3, #28]
 8003a3c:	b128      	cbz	r0, 8003a4a <USBH_CDC_InterfaceDeInit+0x2a>
    USBH_free(phost->pActiveClass->pData);
 8003a3e:	f001 fa69 	bl	8004f14 <free>
    phost->pActiveClass->pData = 0U;
 8003a42:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003a46:	2200      	movs	r2, #0
 8003a48:	61da      	str	r2, [r3, #28]
}
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003a4e:	f001 f8c2 	bl	8004bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8003a52:	7829      	ldrb	r1, [r5, #0]
 8003a54:	4620      	mov	r0, r4
 8003a56:	f001 f8d6 	bl	8004c06 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	702b      	strb	r3, [r5, #0]
 8003a5e:	e7e6      	b.n	8003a2e <USBH_CDC_InterfaceDeInit+0xe>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8003a60:	4620      	mov	r0, r4
 8003a62:	f001 f8b8 	bl	8004bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8003a66:	7b29      	ldrb	r1, [r5, #12]
 8003a68:	4620      	mov	r0, r4
 8003a6a:	f001 f8cc 	bl	8004c06 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8003a6e:	2300      	movs	r3, #0
 8003a70:	732b      	strb	r3, [r5, #12]
 8003a72:	e7de      	b.n	8003a32 <USBH_CDC_InterfaceDeInit+0x12>
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003a74:	4620      	mov	r0, r4
 8003a76:	f001 f8ae 	bl	8004bd6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8003a7a:	7b69      	ldrb	r1, [r5, #13]
 8003a7c:	4620      	mov	r0, r4
 8003a7e:	f001 f8c2 	bl	8004c06 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8003a82:	2300      	movs	r3, #0
 8003a84:	736b      	strb	r3, [r5, #13]
 8003a86:	e7d6      	b.n	8003a36 <USBH_CDC_InterfaceDeInit+0x16>

08003a88 <USBH_CDC_InterfaceInit>:
{
 8003a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	4604      	mov	r4, r0
  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8003a8e:	2301      	movs	r3, #1
 8003a90:	2202      	movs	r2, #2
 8003a92:	4611      	mov	r1, r2
 8003a94:	f000 fb42 	bl	800411c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8003a98:	2801      	cmp	r0, #1
 8003a9a:	f200 80ae 	bhi.w	8003bfa <USBH_CDC_InterfaceInit+0x172>
 8003a9e:	4606      	mov	r6, r0
  status = USBH_SelectInterface(phost, interface);
 8003aa0:	4601      	mov	r1, r0
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f000 fb30 	bl	8004108 <USBH_SelectInterface>
  if (status != USBH_OK)
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	2800      	cmp	r0, #0
 8003aac:	f040 80a9 	bne.w	8003c02 <USBH_CDC_InterfaceInit+0x17a>
  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8003ab0:	f8d4 537c 	ldr.w	r5, [r4, #892]	; 0x37c
 8003ab4:	2050      	movs	r0, #80	; 0x50
 8003ab6:	f001 fa25 	bl	8004f04 <malloc>
 8003aba:	61e8      	str	r0, [r5, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003abc:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8003ac0:	69dd      	ldr	r5, [r3, #28]
  if (CDC_Handle == NULL)
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	f000 809f 	beq.w	8003c06 <USBH_CDC_InterfaceInit+0x17e>
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8003ac8:	2250      	movs	r2, #80	; 0x50
 8003aca:	2100      	movs	r1, #0
 8003acc:	4628      	mov	r0, r5
 8003ace:	f001 fad5 	bl	800507c <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003ad2:	231a      	movs	r3, #26
 8003ad4:	fb03 4306 	mla	r3, r3, r6, r4
 8003ad8:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8003adc:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	db72      	blt.n	8003bca <USBH_CDC_InterfaceInit+0x142>
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8003ae4:	7869      	ldrb	r1, [r5, #1]
 8003ae6:	4620      	mov	r0, r4
 8003ae8:	f001 f87a 	bl	8004be0 <USBH_AllocPipe>
 8003aec:	4601      	mov	r1, r0
 8003aee:	7028      	strb	r0, [r5, #0]
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8003af0:	786a      	ldrb	r2, [r5, #1]
 8003af2:	896b      	ldrh	r3, [r5, #10]
 8003af4:	9302      	str	r3, [sp, #8]
 8003af6:	2303      	movs	r3, #3
 8003af8:	9301      	str	r3, [sp, #4]
 8003afa:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003b04:	4620      	mov	r0, r4
 8003b06:	f001 f856 	bl	8004bb6 <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	7829      	ldrb	r1, [r5, #0]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f001 f980 	bl	8004e14 <USBH_LL_SetToggle>
  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8003b14:	2300      	movs	r3, #0
 8003b16:	461a      	mov	r2, r3
 8003b18:	210a      	movs	r1, #10
 8003b1a:	4620      	mov	r0, r4
 8003b1c:	f000 fafe 	bl	800411c <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8003b20:	2801      	cmp	r0, #1
 8003b22:	d872      	bhi.n	8003c0a <USBH_CDC_InterfaceInit+0x182>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8003b24:	231a      	movs	r3, #26
 8003b26:	fb03 4300 	mla	r3, r3, r0, r4
 8003b2a:	f893 234e 	ldrb.w	r2, [r3, #846]	; 0x34e
 8003b2e:	f993 334e 	ldrsb.w	r3, [r3, #846]	; 0x34e
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	db51      	blt.n	8003bda <USBH_CDC_InterfaceInit+0x152>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003b36:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003b38:	231a      	movs	r3, #26
 8003b3a:	fb03 4300 	mla	r3, r3, r0, r4
 8003b3e:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8003b42:	832b      	strh	r3, [r5, #24]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8003b44:	231a      	movs	r3, #26
 8003b46:	fb03 4300 	mla	r3, r3, r0, r4
 8003b4a:	f893 2356 	ldrb.w	r2, [r3, #854]	; 0x356
 8003b4e:	f993 3356 	ldrsb.w	r3, [r3, #854]	; 0x356
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db49      	blt.n	8003bea <USBH_CDC_InterfaceInit+0x162>
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003b56:	73aa      	strb	r2, [r5, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003b58:	231a      	movs	r3, #26
 8003b5a:	fb03 4000 	mla	r0, r3, r0, r4
 8003b5e:	f8b0 3358 	ldrh.w	r3, [r0, #856]	; 0x358
 8003b62:	832b      	strh	r3, [r5, #24]
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8003b64:	7ba9      	ldrb	r1, [r5, #14]
 8003b66:	4620      	mov	r0, r4
 8003b68:	f001 f83a 	bl	8004be0 <USBH_AllocPipe>
 8003b6c:	7368      	strb	r0, [r5, #13]
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8003b6e:	7be9      	ldrb	r1, [r5, #15]
 8003b70:	4620      	mov	r0, r4
 8003b72:	f001 f835 	bl	8004be0 <USBH_AllocPipe>
 8003b76:	7328      	strb	r0, [r5, #12]
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8003b78:	7baa      	ldrb	r2, [r5, #14]
 8003b7a:	7b69      	ldrb	r1, [r5, #13]
 8003b7c:	8b2b      	ldrh	r3, [r5, #24]
 8003b7e:	9302      	str	r3, [sp, #8]
 8003b80:	2602      	movs	r6, #2
 8003b82:	9601      	str	r6, [sp, #4]
 8003b84:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f001 f811 	bl	8004bb6 <USBH_OpenPipe>
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8003b94:	7bea      	ldrb	r2, [r5, #15]
 8003b96:	7b29      	ldrb	r1, [r5, #12]
 8003b98:	8b6b      	ldrh	r3, [r5, #26]
 8003b9a:	9302      	str	r3, [sp, #8]
 8003b9c:	9601      	str	r6, [sp, #4]
 8003b9e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f001 f804 	bl	8004bb6 <USBH_OpenPipe>
  CDC_Handle->state = CDC_IDLE_STATE;
 8003bae:	2600      	movs	r6, #0
 8003bb0:	f885 604c 	strb.w	r6, [r5, #76]	; 0x4c
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8003bb4:	4632      	mov	r2, r6
 8003bb6:	7b69      	ldrb	r1, [r5, #13]
 8003bb8:	4620      	mov	r0, r4
 8003bba:	f001 f92b 	bl	8004e14 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8003bbe:	4632      	mov	r2, r6
 8003bc0:	7b29      	ldrb	r1, [r5, #12]
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f001 f926 	bl	8004e14 <USBH_LL_SetToggle>
  return USBH_OK;
 8003bc8:	e018      	b.n	8003bfc <USBH_CDC_InterfaceInit+0x174>
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003bca:	706a      	strb	r2, [r5, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003bcc:	231a      	movs	r3, #26
 8003bce:	fb03 4606 	mla	r6, r3, r6, r4
 8003bd2:	f8b6 3350 	ldrh.w	r3, [r6, #848]	; 0x350
 8003bd6:	816b      	strh	r3, [r5, #10]
 8003bd8:	e784      	b.n	8003ae4 <USBH_CDC_InterfaceInit+0x5c>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003bda:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003bdc:	231a      	movs	r3, #26
 8003bde:	fb03 4300 	mla	r3, r3, r0, r4
 8003be2:	f8b3 3350 	ldrh.w	r3, [r3, #848]	; 0x350
 8003be6:	836b      	strh	r3, [r5, #26]
 8003be8:	e7ac      	b.n	8003b44 <USBH_CDC_InterfaceInit+0xbc>
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8003bea:	73ea      	strb	r2, [r5, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8003bec:	231a      	movs	r3, #26
 8003bee:	fb03 4300 	mla	r3, r3, r0, r4
 8003bf2:	f8b3 3358 	ldrh.w	r3, [r3, #856]	; 0x358
 8003bf6:	836b      	strh	r3, [r5, #26]
 8003bf8:	e7b4      	b.n	8003b64 <USBH_CDC_InterfaceInit+0xdc>
    return USBH_FAIL;
 8003bfa:	2702      	movs	r7, #2
}
 8003bfc:	4638      	mov	r0, r7
 8003bfe:	b005      	add	sp, #20
 8003c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return USBH_FAIL;
 8003c02:	2702      	movs	r7, #2
 8003c04:	e7fa      	b.n	8003bfc <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8003c06:	2702      	movs	r7, #2
 8003c08:	e7f8      	b.n	8003bfc <USBH_CDC_InterfaceInit+0x174>
    return USBH_FAIL;
 8003c0a:	2702      	movs	r7, #2
 8003c0c:	e7f6      	b.n	8003bfc <USBH_CDC_InterfaceInit+0x174>

08003c0e <USBH_CDC_TransmitCallback>:
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003c0e:	4770      	bx	lr

08003c10 <CDC_ProcessTransmission>:
{
 8003c10:	b530      	push	{r4, r5, lr}
 8003c12:	b083      	sub	sp, #12
 8003c14:	4605      	mov	r5, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003c16:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003c1a:	69dc      	ldr	r4, [r3, #28]
  switch (CDC_Handle->data_tx_state)
 8003c1c:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d003      	beq.n	8003c2c <CDC_ProcessTransmission+0x1c>
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d019      	beq.n	8003c5c <CDC_ProcessTransmission+0x4c>
}
 8003c28:	b003      	add	sp, #12
 8003c2a:	bd30      	pop	{r4, r5, pc}
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003c2c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003c2e:	8b22      	ldrh	r2, [r4, #24]
 8003c30:	4290      	cmp	r0, r2
 8003c32:	d90a      	bls.n	8003c4a <CDC_ProcessTransmission+0x3a>
        (void)USBH_BulkSendData(phost,
 8003c34:	7b63      	ldrb	r3, [r4, #13]
 8003c36:	69e1      	ldr	r1, [r4, #28]
 8003c38:	2001      	movs	r0, #1
 8003c3a:	9000      	str	r0, [sp, #0]
 8003c3c:	4628      	mov	r0, r5
 8003c3e:	f000 ff81 	bl	8004b44 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8003c42:	2302      	movs	r3, #2
 8003c44:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
      break;
 8003c48:	e7ee      	b.n	8003c28 <CDC_ProcessTransmission+0x18>
        (void)USBH_BulkSendData(phost,
 8003c4a:	7b63      	ldrb	r3, [r4, #13]
 8003c4c:	69e1      	ldr	r1, [r4, #28]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	9200      	str	r2, [sp, #0]
 8003c52:	b282      	uxth	r2, r0
 8003c54:	4628      	mov	r0, r5
 8003c56:	f000 ff75 	bl	8004b44 <USBH_BulkSendData>
 8003c5a:	e7f2      	b.n	8003c42 <CDC_ProcessTransmission+0x32>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8003c5c:	7b61      	ldrb	r1, [r4, #13]
 8003c5e:	f001 f8c5 	bl	8004dec <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003c62:	2801      	cmp	r0, #1
 8003c64:	d005      	beq.n	8003c72 <CDC_ProcessTransmission+0x62>
        if (URB_Status == USBH_URB_NOTREADY)
 8003c66:	2802      	cmp	r0, #2
 8003c68:	d1de      	bne.n	8003c28 <CDC_ProcessTransmission+0x18>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
 8003c70:	e7da      	b.n	8003c28 <CDC_ProcessTransmission+0x18>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8003c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c74:	8b22      	ldrh	r2, [r4, #24]
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d90a      	bls.n	8003c90 <CDC_ProcessTransmission+0x80>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	6263      	str	r3, [r4, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8003c7e:	69e3      	ldr	r3, [r4, #28]
 8003c80:	4413      	add	r3, r2
 8003c82:	61e3      	str	r3, [r4, #28]
        if (CDC_Handle->TxDataLength > 0U)
 8003c84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c86:	b133      	cbz	r3, 8003c96 <CDC_ProcessTransmission+0x86>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
 8003c8e:	e7cb      	b.n	8003c28 <CDC_ProcessTransmission+0x18>
          CDC_Handle->TxDataLength = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	6263      	str	r3, [r4, #36]	; 0x24
 8003c94:	e7f6      	b.n	8003c84 <CDC_ProcessTransmission+0x74>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8003c96:	2300      	movs	r3, #0
 8003c98:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	f7ff ffb6 	bl	8003c0e <USBH_CDC_TransmitCallback>
 8003ca2:	e7c1      	b.n	8003c28 <CDC_ProcessTransmission+0x18>

08003ca4 <USBH_CDC_ReceiveCallback>:
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003ca4:	4770      	bx	lr

08003ca6 <CDC_ProcessReception>:
{
 8003ca6:	b538      	push	{r3, r4, r5, lr}
 8003ca8:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003caa:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003cae:	69dd      	ldr	r5, [r3, #28]
  switch (CDC_Handle->data_rx_state)
 8003cb0:	f895 304e 	ldrb.w	r3, [r5, #78]	; 0x4e
 8003cb4:	2b03      	cmp	r3, #3
 8003cb6:	d002      	beq.n	8003cbe <CDC_ProcessReception+0x18>
 8003cb8:	2b04      	cmp	r3, #4
 8003cba:	d009      	beq.n	8003cd0 <CDC_ProcessReception+0x2a>
}
 8003cbc:	bd38      	pop	{r3, r4, r5, pc}
      (void)USBH_BulkReceiveData(phost,
 8003cbe:	7b2b      	ldrb	r3, [r5, #12]
 8003cc0:	8b6a      	ldrh	r2, [r5, #26]
 8003cc2:	6a29      	ldr	r1, [r5, #32]
 8003cc4:	f000 ff54 	bl	8004b70 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
      break;
 8003cce:	e7f5      	b.n	8003cbc <CDC_ProcessReception+0x16>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8003cd0:	7b29      	ldrb	r1, [r5, #12]
 8003cd2:	f001 f88b 	bl	8004dec <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003cd6:	2801      	cmp	r0, #1
 8003cd8:	d1f0      	bne.n	8003cbc <CDC_ProcessReception+0x16>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8003cda:	7b29      	ldrb	r1, [r5, #12]
 8003cdc:	4620      	mov	r0, r4
 8003cde:	f001 f87f 	bl	8004de0 <USBH_LL_GetLastXferSize>
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8003ce2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8003ce4:	4283      	cmp	r3, r0
 8003ce6:	d00b      	beq.n	8003d00 <CDC_ProcessReception+0x5a>
 8003ce8:	8b6a      	ldrh	r2, [r5, #26]
 8003cea:	4282      	cmp	r2, r0
 8003cec:	d208      	bcs.n	8003d00 <CDC_ProcessReception+0x5a>
          CDC_Handle->RxDataLength -= length ;
 8003cee:	1a1b      	subs	r3, r3, r0
 8003cf0:	62ab      	str	r3, [r5, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8003cf2:	6a2b      	ldr	r3, [r5, #32]
 8003cf4:	4403      	add	r3, r0
 8003cf6:	622b      	str	r3, [r5, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
 8003cfe:	e7dd      	b.n	8003cbc <CDC_ProcessReception+0x16>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8003d00:	2300      	movs	r3, #0
 8003d02:	f885 304e 	strb.w	r3, [r5, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8003d06:	4620      	mov	r0, r4
 8003d08:	f7ff ffcc 	bl	8003ca4 <USBH_CDC_ReceiveCallback>
}
 8003d0c:	e7d6      	b.n	8003cbc <CDC_ProcessReception+0x16>

08003d0e <USBH_CDC_LineCodingChanged>:
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8003d0e:	4770      	bx	lr

08003d10 <USBH_CDC_Process>:
{
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	4604      	mov	r4, r0
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8003d14:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003d18:	69de      	ldr	r6, [r3, #28]
  switch (CDC_Handle->state)
 8003d1a:	f896 504c 	ldrb.w	r5, [r6, #76]	; 0x4c
 8003d1e:	2d04      	cmp	r5, #4
 8003d20:	d804      	bhi.n	8003d2c <USBH_CDC_Process+0x1c>
 8003d22:	e8df f005 	tbb	[pc, r5]
 8003d26:	053b      	.short	0x053b
 8003d28:	3513      	.short	0x3513
 8003d2a:	3d          	.byte	0x3d
 8003d2b:	00          	.byte	0x00
 8003d2c:	2501      	movs	r5, #1
 8003d2e:	e035      	b.n	8003d9c <USBH_CDC_Process+0x8c>
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8003d30:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 8003d32:	f7ff fe4a 	bl	80039ca <SetLineCoding>
      if (req_status == USBH_OK)
 8003d36:	b918      	cbnz	r0, 8003d40 <USBH_CDC_Process+0x30>
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8003d3e:	e02d      	b.n	8003d9c <USBH_CDC_Process+0x8c>
        if (req_status != USBH_BUSY)
 8003d40:	2801      	cmp	r0, #1
 8003d42:	d036      	beq.n	8003db2 <USBH_CDC_Process+0xa2>
          CDC_Handle->state = CDC_ERROR_STATE;
 8003d44:	2304      	movs	r3, #4
 8003d46:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8003d4a:	e027      	b.n	8003d9c <USBH_CDC_Process+0x8c>
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8003d4c:	f106 0140 	add.w	r1, r6, #64	; 0x40
 8003d50:	f7ff fe48 	bl	80039e4 <GetLineCoding>
      if (req_status == USBH_OK)
 8003d54:	4605      	mov	r5, r0
 8003d56:	b9a0      	cbnz	r0, 8003d82 <USBH_CDC_Process+0x72>
        CDC_Handle->state = CDC_IDLE_STATE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003d5e:	6c73      	ldr	r3, [r6, #68]	; 0x44
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003d60:	6cb2      	ldr	r2, [r6, #72]	; 0x48
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8003d62:	6851      	ldr	r1, [r2, #4]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8003d64:	404b      	eors	r3, r1
 8003d66:	f033 437f 	bics.w	r3, r3, #4278190080	; 0xff000000
 8003d6a:	d124      	bne.n	8003db6 <USBH_CDC_Process+0xa6>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8003d6c:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8003d6e:	6813      	ldr	r3, [r2, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8003d70:	4299      	cmp	r1, r3
 8003d72:	d001      	beq.n	8003d78 <USBH_CDC_Process+0x68>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d74:	2501      	movs	r5, #1
 8003d76:	e011      	b.n	8003d9c <USBH_CDC_Process+0x8c>
          USBH_CDC_LineCodingChanged(phost);
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f7ff ffc8 	bl	8003d0e <USBH_CDC_LineCodingChanged>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d7e:	2501      	movs	r5, #1
 8003d80:	e00c      	b.n	8003d9c <USBH_CDC_Process+0x8c>
        if (req_status != USBH_BUSY)
 8003d82:	2801      	cmp	r0, #1
 8003d84:	d00a      	beq.n	8003d9c <USBH_CDC_Process+0x8c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8003d86:	2304      	movs	r3, #4
 8003d88:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d8c:	2501      	movs	r5, #1
 8003d8e:	e005      	b.n	8003d9c <USBH_CDC_Process+0x8c>
      CDC_ProcessTransmission(phost);
 8003d90:	f7ff ff3e 	bl	8003c10 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8003d94:	4620      	mov	r0, r4
 8003d96:	f7ff ff86 	bl	8003ca6 <CDC_ProcessReception>
  USBH_StatusTypeDef status = USBH_BUSY;
 8003d9a:	2501      	movs	r5, #1
}
 8003d9c:	4628      	mov	r0, r5
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
      req_status = USBH_ClrFeature(phost, 0x00U);
 8003da0:	2100      	movs	r1, #0
 8003da2:	f000 fe86 	bl	8004ab2 <USBH_ClrFeature>
      if (req_status == USBH_OK)
 8003da6:	b940      	cbnz	r0, 8003dba <USBH_CDC_Process+0xaa>
        CDC_Handle->state = CDC_IDLE_STATE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
  USBH_StatusTypeDef status = USBH_BUSY;
 8003dae:	2501      	movs	r5, #1
 8003db0:	e7f4      	b.n	8003d9c <USBH_CDC_Process+0x8c>
 8003db2:	4605      	mov	r5, r0
 8003db4:	e7f2      	b.n	8003d9c <USBH_CDC_Process+0x8c>
 8003db6:	2501      	movs	r5, #1
 8003db8:	e7f0      	b.n	8003d9c <USBH_CDC_Process+0x8c>
 8003dba:	2501      	movs	r5, #1
 8003dbc:	e7ee      	b.n	8003d9c <USBH_CDC_Process+0x8c>

08003dbe <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003dbe:	4684      	mov	ip, r0
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e006      	b.n	8003dd2 <DeInitStateMachine+0x14>
  {
    phost->Pipes[i] = 0U;
 8003dc4:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8003dc8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8003dcc:	2100      	movs	r1, #0
 8003dce:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	2b0f      	cmp	r3, #15
 8003dd4:	d9f6      	bls.n	8003dc4 <DeInitStateMachine+0x6>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e005      	b.n	8003de6 <DeInitStateMachine+0x28>
  {
    phost->device.Data[i] = 0U;
 8003dda:	eb0c 0203 	add.w	r2, ip, r3
 8003dde:	2100      	movs	r1, #0
 8003de0:	f882 111c 	strb.w	r1, [r2, #284]	; 0x11c
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8003de4:	3301      	adds	r3, #1
 8003de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dea:	d3f6      	bcc.n	8003dda <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
 8003dec:	2000      	movs	r0, #0
 8003dee:	f88c 0000 	strb.w	r0, [ip]
  phost->EnumState = ENUM_IDLE;
 8003df2:	f88c 0001 	strb.w	r0, [ip, #1]
  phost->RequestState = CMD_SEND;
 8003df6:	2301      	movs	r3, #1
 8003df8:	f88c 3002 	strb.w	r3, [ip, #2]
  phost->Timer = 0U;
 8003dfc:	f8cc 03c4 	str.w	r0, [ip, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8003e00:	f88c 3018 	strb.w	r3, [ip, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8003e04:	2240      	movs	r2, #64	; 0x40
 8003e06:	f88c 2006 	strb.w	r2, [ip, #6]
  phost->Control.errorcount = 0U;
 8003e0a:	f88c 0019 	strb.w	r0, [ip, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8003e0e:	f88c 031c 	strb.w	r0, [ip, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8003e12:	f88c 331d 	strb.w	r3, [ip, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8003e16:	f88c 031f 	strb.w	r0, [ip, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8003e1a:	f88c 031e 	strb.w	r0, [ip, #798]	; 0x31e

  return USBH_OK;
}
 8003e1e:	4770      	bx	lr

08003e20 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8003e20:	b508      	push	{r3, lr}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003e22:	7803      	ldrb	r3, [r0, #0]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b0b      	cmp	r3, #11
 8003e28:	d000      	beq.n	8003e2c <USBH_HandleSof+0xc>
  {
    phost->pActiveClass->SOFProcess(phost);
  }
}
 8003e2a:	bd08      	pop	{r3, pc}
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003e2c:	f8d0 337c 	ldr.w	r3, [r0, #892]	; 0x37c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0fa      	beq.n	8003e2a <USBH_HandleSof+0xa>
    phost->pActiveClass->SOFProcess(phost);
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	4798      	blx	r3
}
 8003e38:	e7f7      	b.n	8003e2a <USBH_HandleSof+0xa>

08003e3a <USBH_HandleEnum>:
{
 8003e3a:	b570      	push	{r4, r5, r6, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	4604      	mov	r4, r0
  switch (phost->EnumState)
 8003e40:	7845      	ldrb	r5, [r0, #1]
 8003e42:	2d07      	cmp	r5, #7
 8003e44:	f200 812c 	bhi.w	80040a0 <USBH_HandleEnum+0x266>
 8003e48:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003e4c:	00480008 	.word	0x00480008
 8003e50:	009a0069 	.word	0x009a0069
 8003e54:	00e500bf 	.word	0x00e500bf
 8003e58:	011700fe 	.word	0x011700fe
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8003e5c:	2108      	movs	r1, #8
 8003e5e:	f000 fdae 	bl	80049be <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003e62:	b118      	cbz	r0, 8003e6c <USBH_HandleEnum+0x32>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003e64:	2803      	cmp	r0, #3
 8003e66:	d021      	beq.n	8003eac <USBH_HandleEnum+0x72>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003e68:	2501      	movs	r5, #1
 8003e6a:	e109      	b.n	8004080 <USBH_HandleEnum+0x246>
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003e6c:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8003e70:	71a3      	strb	r3, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003e72:	2501      	movs	r5, #1
 8003e74:	7065      	strb	r5, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8003e76:	9302      	str	r3, [sp, #8]
 8003e78:	2600      	movs	r6, #0
 8003e7a:	9601      	str	r6, [sp, #4]
 8003e7c:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	7921      	ldrb	r1, [r4, #4]
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f000 fe93 	bl	8004bb6 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003e90:	79a3      	ldrb	r3, [r4, #6]
 8003e92:	9302      	str	r3, [sp, #8]
 8003e94:	9601      	str	r6, [sp, #4]
 8003e96:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	7961      	ldrb	r1, [r4, #5]
 8003ea4:	4620      	mov	r0, r4
 8003ea6:	f000 fe86 	bl	8004bb6 <USBH_OpenPipe>
 8003eaa:	e0e9      	b.n	8004080 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8003eac:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003eb8:	2b03      	cmp	r3, #3
 8003eba:	d903      	bls.n	8003ec4 <USBH_HandleEnum+0x8a>
          phost->gState = HOST_ABORT_STATE;
 8003ebc:	230d      	movs	r3, #13
 8003ebe:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ec0:	2501      	movs	r5, #1
 8003ec2:	e0dd      	b.n	8004080 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003ec4:	7961      	ldrb	r1, [r4, #5]
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f000 fe9d 	bl	8004c06 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ecc:	7921      	ldrb	r1, [r4, #4]
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f000 fe99 	bl	8004c06 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ed8:	2501      	movs	r5, #1
 8003eda:	e0d1      	b.n	8004080 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8003edc:	2112      	movs	r1, #18
 8003ede:	f000 fd6e 	bl	80049be <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003ee2:	b910      	cbnz	r0, 8003eea <USBH_HandleEnum+0xb0>
        phost->EnumState = ENUM_SET_ADDR;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	7063      	strb	r3, [r4, #1]
 8003ee8:	e0ca      	b.n	8004080 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003eea:	2803      	cmp	r0, #3
 8003eec:	f040 80c8 	bne.w	8004080 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8003ef0:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003ef4:	3301      	adds	r3, #1
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d902      	bls.n	8003f06 <USBH_HandleEnum+0xcc>
          phost->gState = HOST_ABORT_STATE;
 8003f00:	230d      	movs	r3, #13
 8003f02:	7023      	strb	r3, [r4, #0]
 8003f04:	e0bc      	b.n	8004080 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003f06:	7961      	ldrb	r1, [r4, #5]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f000 fe7c 	bl	8004c06 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003f0e:	7921      	ldrb	r1, [r4, #4]
 8003f10:	4620      	mov	r0, r4
 8003f12:	f000 fe78 	bl	8004c06 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003f1a:	7023      	strb	r3, [r4, #0]
 8003f1c:	e0b0      	b.n	8004080 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8003f1e:	2101      	movs	r1, #1
 8003f20:	f000 fd94 	bl	8004a4c <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 8003f24:	b118      	cbz	r0, 8003f2e <USBH_HandleEnum+0xf4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003f26:	2803      	cmp	r0, #3
 8003f28:	d024      	beq.n	8003f74 <USBH_HandleEnum+0x13a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f2a:	2501      	movs	r5, #1
 8003f2c:	e0a8      	b.n	8004080 <USBH_HandleEnum+0x246>
        USBH_Delay(2U);
 8003f2e:	2002      	movs	r0, #2
 8003f30:	f000 ff85 	bl	8004e3e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8003f34:	2501      	movs	r5, #1
 8003f36:	f884 531c 	strb.w	r5, [r4, #796]	; 0x31c
        phost->EnumState = ENUM_GET_CFG_DESC;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8003f3e:	79a3      	ldrb	r3, [r4, #6]
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	2600      	movs	r6, #0
 8003f44:	9601      	str	r6, [sp, #4]
 8003f46:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	2280      	movs	r2, #128	; 0x80
 8003f50:	7921      	ldrb	r1, [r4, #4]
 8003f52:	4620      	mov	r0, r4
 8003f54:	f000 fe2f 	bl	8004bb6 <USBH_OpenPipe>
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8003f58:	79a3      	ldrb	r3, [r4, #6]
 8003f5a:	9302      	str	r3, [sp, #8]
 8003f5c:	9601      	str	r6, [sp, #4]
 8003f5e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8003f62:	9300      	str	r3, [sp, #0]
 8003f64:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8003f68:	4632      	mov	r2, r6
 8003f6a:	7961      	ldrb	r1, [r4, #5]
 8003f6c:	4620      	mov	r0, r4
 8003f6e:	f000 fe22 	bl	8004bb6 <USBH_OpenPipe>
 8003f72:	e085      	b.n	8004080 <USBH_HandleEnum+0x246>
        phost->gState = HOST_ABORT_STATE;
 8003f74:	230d      	movs	r3, #13
 8003f76:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f7c:	2501      	movs	r5, #1
 8003f7e:	e07f      	b.n	8004080 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8003f80:	2109      	movs	r1, #9
 8003f82:	f000 fd35 	bl	80049f0 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003f86:	b918      	cbnz	r0, 8003f90 <USBH_HandleEnum+0x156>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8003f88:	2304      	movs	r3, #4
 8003f8a:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f8c:	2501      	movs	r5, #1
 8003f8e:	e077      	b.n	8004080 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003f90:	2803      	cmp	r0, #3
 8003f92:	d001      	beq.n	8003f98 <USBH_HandleEnum+0x15e>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003f94:	2501      	movs	r5, #1
 8003f96:	e073      	b.n	8004080 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8003f98:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003fa4:	2b03      	cmp	r3, #3
 8003fa6:	d903      	bls.n	8003fb0 <USBH_HandleEnum+0x176>
          phost->gState = HOST_ABORT_STATE;
 8003fa8:	230d      	movs	r3, #13
 8003faa:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003fac:	2501      	movs	r5, #1
 8003fae:	e067      	b.n	8004080 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003fb0:	7961      	ldrb	r1, [r4, #5]
 8003fb2:	4620      	mov	r0, r4
 8003fb4:	f000 fe27 	bl	8004c06 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8003fb8:	7921      	ldrb	r1, [r4, #4]
 8003fba:	4620      	mov	r0, r4
 8003fbc:	f000 fe23 	bl	8004c06 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8003fc4:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003fc6:	2501      	movs	r5, #1
 8003fc8:	e05a      	b.n	8004080 <USBH_HandleEnum+0x246>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8003fca:	f8b0 133a 	ldrh.w	r1, [r0, #826]	; 0x33a
 8003fce:	f000 fd0f 	bl	80049f0 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 8003fd2:	b918      	cbnz	r0, 8003fdc <USBH_HandleEnum+0x1a2>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8003fd4:	2305      	movs	r3, #5
 8003fd6:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003fd8:	2501      	movs	r5, #1
 8003fda:	e051      	b.n	8004080 <USBH_HandleEnum+0x246>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003fdc:	2803      	cmp	r0, #3
 8003fde:	d001      	beq.n	8003fe4 <USBH_HandleEnum+0x1aa>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003fe0:	2501      	movs	r5, #1
 8003fe2:	e04d      	b.n	8004080 <USBH_HandleEnum+0x246>
        phost->device.EnumCnt++;
 8003fe4:	f894 331e 	ldrb.w	r3, [r4, #798]	; 0x31e
 8003fe8:	3301      	adds	r3, #1
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f884 331e 	strb.w	r3, [r4, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d903      	bls.n	8003ffc <USBH_HandleEnum+0x1c2>
          phost->gState = HOST_ABORT_STATE;
 8003ff4:	230d      	movs	r3, #13
 8003ff6:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8003ff8:	2501      	movs	r5, #1
 8003ffa:	e041      	b.n	8004080 <USBH_HandleEnum+0x246>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8003ffc:	7961      	ldrb	r1, [r4, #5]
 8003ffe:	4620      	mov	r0, r4
 8004000:	f000 fe01 	bl	8004c06 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004004:	7921      	ldrb	r1, [r4, #4]
 8004006:	4620      	mov	r0, r4
 8004008:	f000 fdfd 	bl	8004c06 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800400c:	2300      	movs	r3, #0
 800400e:	7063      	strb	r3, [r4, #1]
          phost->gState = HOST_IDLE;
 8004010:	7023      	strb	r3, [r4, #0]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004012:	2501      	movs	r5, #1
 8004014:	e034      	b.n	8004080 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iManufacturer != 0U)
 8004016:	f890 1334 	ldrb.w	r1, [r0, #820]	; 0x334
 800401a:	b919      	cbnz	r1, 8004024 <USBH_HandleEnum+0x1ea>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800401c:	2306      	movs	r3, #6
 800401e:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004020:	2501      	movs	r5, #1
 8004022:	e02d      	b.n	8004080 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8004024:	23ff      	movs	r3, #255	; 0xff
 8004026:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800402a:	f000 fcf7 	bl	8004a1c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800402e:	b918      	cbnz	r0, 8004038 <USBH_HandleEnum+0x1fe>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004030:	2306      	movs	r3, #6
 8004032:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004034:	2501      	movs	r5, #1
 8004036:	e023      	b.n	8004080 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8004038:	2803      	cmp	r0, #3
 800403a:	d001      	beq.n	8004040 <USBH_HandleEnum+0x206>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800403c:	2501      	movs	r5, #1
 800403e:	e01f      	b.n	8004080 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8004040:	2306      	movs	r3, #6
 8004042:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004044:	2501      	movs	r5, #1
 8004046:	e01b      	b.n	8004080 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iProduct != 0U)
 8004048:	f890 1335 	ldrb.w	r1, [r0, #821]	; 0x335
 800404c:	b919      	cbnz	r1, 8004056 <USBH_HandleEnum+0x21c>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800404e:	2307      	movs	r3, #7
 8004050:	7043      	strb	r3, [r0, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004052:	2501      	movs	r5, #1
 8004054:	e014      	b.n	8004080 <USBH_HandleEnum+0x246>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8004056:	23ff      	movs	r3, #255	; 0xff
 8004058:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800405c:	f000 fcde 	bl	8004a1c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004060:	b918      	cbnz	r0, 800406a <USBH_HandleEnum+0x230>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004062:	2307      	movs	r3, #7
 8004064:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004066:	2501      	movs	r5, #1
 8004068:	e00a      	b.n	8004080 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800406a:	2803      	cmp	r0, #3
 800406c:	d001      	beq.n	8004072 <USBH_HandleEnum+0x238>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800406e:	2501      	movs	r5, #1
 8004070:	e006      	b.n	8004080 <USBH_HandleEnum+0x246>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8004072:	2307      	movs	r3, #7
 8004074:	7063      	strb	r3, [r4, #1]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8004076:	2501      	movs	r5, #1
 8004078:	e002      	b.n	8004080 <USBH_HandleEnum+0x246>
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800407a:	f890 5336 	ldrb.w	r5, [r0, #822]	; 0x336
 800407e:	b915      	cbnz	r5, 8004086 <USBH_HandleEnum+0x24c>
}
 8004080:	4628      	mov	r0, r5
 8004082:	b004      	add	sp, #16
 8004084:	bd70      	pop	{r4, r5, r6, pc}
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8004086:	23ff      	movs	r3, #255	; 0xff
 8004088:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 800408c:	4629      	mov	r1, r5
 800408e:	f000 fcc5 	bl	8004a1c <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8004092:	4605      	mov	r5, r0
 8004094:	2800      	cmp	r0, #0
 8004096:	d0f3      	beq.n	8004080 <USBH_HandleEnum+0x246>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8004098:	2803      	cmp	r0, #3
 800409a:	d003      	beq.n	80040a4 <USBH_HandleEnum+0x26a>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800409c:	2501      	movs	r5, #1
 800409e:	e7ef      	b.n	8004080 <USBH_HandleEnum+0x246>
  switch (phost->EnumState)
 80040a0:	2501      	movs	r5, #1
 80040a2:	e7ed      	b.n	8004080 <USBH_HandleEnum+0x246>
          Status = USBH_OK;
 80040a4:	2500      	movs	r5, #0
 80040a6:	e7eb      	b.n	8004080 <USBH_HandleEnum+0x246>

080040a8 <USBH_Init>:
  if (phost == NULL)
 80040a8:	b1d8      	cbz	r0, 80040e2 <USBH_Init+0x3a>
{
 80040aa:	b570      	push	{r4, r5, r6, lr}
 80040ac:	460e      	mov	r6, r1
 80040ae:	4604      	mov	r4, r0
  phost->id = id;
 80040b0:	f880 23cc 	strb.w	r2, [r0, #972]	; 0x3cc
  phost->pActiveClass = NULL;
 80040b4:	2500      	movs	r5, #0
 80040b6:	f8c0 537c 	str.w	r5, [r0, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80040ba:	f8c0 5380 	str.w	r5, [r0, #896]	; 0x380
  (void)DeInitStateMachine(phost);
 80040be:	f7ff fe7e 	bl	8003dbe <DeInitStateMachine>
  phost->device.PortEnabled = 0U;
 80040c2:	f884 5323 	strb.w	r5, [r4, #803]	; 0x323
  phost->device.is_connected = 0U;
 80040c6:	f884 5320 	strb.w	r5, [r4, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80040ca:	f884 5321 	strb.w	r5, [r4, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80040ce:	f884 5322 	strb.w	r5, [r4, #802]	; 0x322
  if (pUsrFunc != NULL)
 80040d2:	b10e      	cbz	r6, 80040d8 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 80040d4:	f8c4 63d4 	str.w	r6, [r4, #980]	; 0x3d4
  (void)USBH_LL_Init(phost);
 80040d8:	4620      	mov	r0, r4
 80040da:	f000 fe47 	bl	8004d6c <USBH_LL_Init>
  return USBH_OK;
 80040de:	2000      	movs	r0, #0
}
 80040e0:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 80040e2:	2002      	movs	r0, #2
}
 80040e4:	4770      	bx	lr

080040e6 <USBH_RegisterClass>:
  if (pclass != NULL)
 80040e6:	460a      	mov	r2, r1
 80040e8:	b151      	cbz	r1, 8004100 <USBH_RegisterClass+0x1a>
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80040ea:	f8d0 3380 	ldr.w	r3, [r0, #896]	; 0x380
 80040ee:	b94b      	cbnz	r3, 8004104 <USBH_RegisterClass+0x1e>
      phost->pClass[phost->ClassNumber++] = pclass;
 80040f0:	1c59      	adds	r1, r3, #1
 80040f2:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
 80040f6:	33de      	adds	r3, #222	; 0xde
 80040f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      status = USBH_OK;
 80040fc:	2000      	movs	r0, #0
 80040fe:	4770      	bx	lr
    status = USBH_FAIL;
 8004100:	2002      	movs	r0, #2
 8004102:	4770      	bx	lr
      status = USBH_FAIL;
 8004104:	2002      	movs	r0, #2
}
 8004106:	4770      	bx	lr

08004108 <USBH_SelectInterface>:
  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8004108:	f890 333c 	ldrb.w	r3, [r0, #828]	; 0x33c
 800410c:	428b      	cmp	r3, r1
 800410e:	d903      	bls.n	8004118 <USBH_SelectInterface+0x10>
    phost->device.current_interface = interface;
 8004110:	f880 1324 	strb.w	r1, [r0, #804]	; 0x324
  USBH_StatusTypeDef status = USBH_OK;
 8004114:	2000      	movs	r0, #0
 8004116:	4770      	bx	lr
    status = USBH_FAIL;
 8004118:	2002      	movs	r0, #2
}
 800411a:	4770      	bx	lr

0800411c <USBH_FindInterface>:
{
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
  uint8_t if_ix = 0U;
 8004120:	2000      	movs	r0, #0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8004122:	e00b      	b.n	800413c <USBH_FindInterface+0x20>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004124:	f04f 0c1a 	mov.w	ip, #26
 8004128:	fb0c 4e0e 	mla	lr, ip, lr, r4
 800412c:	f89e c349 	ldrb.w	ip, [lr, #841]	; 0x349
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004130:	459c      	cmp	ip, r3
 8004132:	d01c      	beq.n	800416e <USBH_FindInterface+0x52>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8004134:	2bff      	cmp	r3, #255	; 0xff
 8004136:	d01a      	beq.n	800416e <USBH_FindInterface+0x52>
    if_ix++;
 8004138:	3001      	adds	r0, #1
 800413a:	b2c0      	uxtb	r0, r0
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800413c:	2801      	cmp	r0, #1
 800413e:	d815      	bhi.n	800416c <USBH_FindInterface+0x50>
    pif = &pcfg->Itf_Desc[if_ix];
 8004140:	4686      	mov	lr, r0
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004142:	f04f 0c1a 	mov.w	ip, #26
 8004146:	fb0c 4c00 	mla	ip, ip, r0, r4
 800414a:	f89c c347 	ldrb.w	ip, [ip, #839]	; 0x347
 800414e:	458c      	cmp	ip, r1
 8004150:	d001      	beq.n	8004156 <USBH_FindInterface+0x3a>
 8004152:	29ff      	cmp	r1, #255	; 0xff
 8004154:	d1f0      	bne.n	8004138 <USBH_FindInterface+0x1c>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004156:	f04f 0c1a 	mov.w	ip, #26
 800415a:	fb0c 4c0e 	mla	ip, ip, lr, r4
 800415e:	f89c c348 	ldrb.w	ip, [ip, #840]	; 0x348
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8004162:	4594      	cmp	ip, r2
 8004164:	d0de      	beq.n	8004124 <USBH_FindInterface+0x8>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8004166:	2aff      	cmp	r2, #255	; 0xff
 8004168:	d1e6      	bne.n	8004138 <USBH_FindInterface+0x1c>
 800416a:	e7db      	b.n	8004124 <USBH_FindInterface+0x8>
  return 0xFFU;
 800416c:	20ff      	movs	r0, #255	; 0xff
}
 800416e:	bd10      	pop	{r4, pc}

08004170 <USBH_Start>:
{
 8004170:	b510      	push	{r4, lr}
 8004172:	4604      	mov	r4, r0
  (void)USBH_LL_Start(phost);
 8004174:	f000 fe71 	bl	8004e5a <USBH_LL_Start>
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8004178:	2101      	movs	r1, #1
 800417a:	4620      	mov	r0, r4
 800417c:	f000 fe3c 	bl	8004df8 <USBH_LL_DriverVBUS>
}
 8004180:	2000      	movs	r0, #0
 8004182:	bd10      	pop	{r4, pc}

08004184 <USBH_Process>:
{
 8004184:	b530      	push	{r4, r5, lr}
 8004186:	b087      	sub	sp, #28
 8004188:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800418a:	2302      	movs	r3, #2
 800418c:	f88d 3017 	strb.w	r3, [sp, #23]
  if (phost->device.is_disconnected == 1U)
 8004190:	f890 3321 	ldrb.w	r3, [r0, #801]	; 0x321
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b01      	cmp	r3, #1
 8004198:	d011      	beq.n	80041be <USBH_Process+0x3a>
  switch (phost->gState)
 800419a:	7823      	ldrb	r3, [r4, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b0b      	cmp	r3, #11
 80041a0:	d87b      	bhi.n	800429a <USBH_Process+0x116>
 80041a2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80041a6:	000f      	.short	0x000f
 80041a8:	00450021 	.word	0x00450021
 80041ac:	007a0111 	.word	0x007a0111
 80041b0:	00ee007d 	.word	0x00ee007d
 80041b4:	009c0092 	.word	0x009c0092
 80041b8:	00c200a6 	.word	0x00c200a6
 80041bc:	0108      	.short	0x0108
    phost->gState = HOST_DEV_DISCONNECTED;
 80041be:	2303      	movs	r3, #3
 80041c0:	7003      	strb	r3, [r0, #0]
 80041c2:	e7ea      	b.n	800419a <USBH_Process+0x16>
      if ((phost->device.is_connected) != 0U)
 80041c4:	f894 3320 	ldrb.w	r3, [r4, #800]	; 0x320
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d066      	beq.n	800429a <USBH_Process+0x116>
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80041cc:	2301      	movs	r3, #1
 80041ce:	7023      	strb	r3, [r4, #0]
        USBH_Delay(200U);
 80041d0:	20c8      	movs	r0, #200	; 0xc8
 80041d2:	f000 fe34 	bl	8004e3e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80041d6:	4620      	mov	r0, r4
 80041d8:	f000 fe4f 	bl	8004e7a <USBH_LL_ResetPort>
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80041dc:	2300      	movs	r3, #0
 80041de:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
        phost->Timeout = 0U;
 80041e2:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
 80041e6:	e058      	b.n	800429a <USBH_Process+0x116>
      if (phost->device.PortEnabled == 1U)
 80041e8:	f894 3323 	ldrb.w	r3, [r4, #803]	; 0x323
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d00f      	beq.n	8004210 <USBH_Process+0x8c>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80041f0:	f8d4 33c8 	ldr.w	r3, [r4, #968]	; 0x3c8
 80041f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041f8:	d913      	bls.n	8004222 <USBH_Process+0x9e>
          phost->device.RstCnt++;
 80041fa:	f894 331f 	ldrb.w	r3, [r4, #799]	; 0x31f
 80041fe:	3301      	adds	r3, #1
 8004200:	b2db      	uxtb	r3, r3
 8004202:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8004206:	2b03      	cmp	r3, #3
 8004208:	d908      	bls.n	800421c <USBH_Process+0x98>
            phost->gState = HOST_ABORT_STATE;
 800420a:	230d      	movs	r3, #13
 800420c:	7023      	strb	r3, [r4, #0]
 800420e:	e044      	b.n	800429a <USBH_Process+0x116>
        phost->device.RstCnt = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	f884 331f 	strb.w	r3, [r4, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8004216:	2302      	movs	r3, #2
 8004218:	7023      	strb	r3, [r4, #0]
 800421a:	e03e      	b.n	800429a <USBH_Process+0x116>
            phost->gState = HOST_IDLE;
 800421c:	2300      	movs	r3, #0
 800421e:	7023      	strb	r3, [r4, #0]
 8004220:	e03b      	b.n	800429a <USBH_Process+0x116>
          phost->Timeout += 10U;
 8004222:	330a      	adds	r3, #10
 8004224:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
          USBH_Delay(10U);
 8004228:	200a      	movs	r0, #10
 800422a:	f000 fe08 	bl	8004e3e <USBH_Delay>
 800422e:	e034      	b.n	800429a <USBH_Process+0x116>
      if (phost->pUser != NULL)
 8004230:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8004234:	b113      	cbz	r3, 800423c <USBH_Process+0xb8>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8004236:	2104      	movs	r1, #4
 8004238:	4620      	mov	r0, r4
 800423a:	4798      	blx	r3
      USBH_Delay(100U);
 800423c:	2064      	movs	r0, #100	; 0x64
 800423e:	f000 fdfe 	bl	8004e3e <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8004242:	4620      	mov	r0, r4
 8004244:	f000 fdbc 	bl	8004dc0 <USBH_LL_GetSpeed>
 8004248:	f884 031d 	strb.w	r0, [r4, #797]	; 0x31d
      phost->gState = HOST_ENUMERATION;
 800424c:	2305      	movs	r3, #5
 800424e:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8004250:	2100      	movs	r1, #0
 8004252:	4620      	mov	r0, r4
 8004254:	f000 fcc4 	bl	8004be0 <USBH_AllocPipe>
 8004258:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800425a:	2180      	movs	r1, #128	; 0x80
 800425c:	4620      	mov	r0, r4
 800425e:	f000 fcbf 	bl	8004be0 <USBH_AllocPipe>
 8004262:	4601      	mov	r1, r0
 8004264:	7120      	strb	r0, [r4, #4]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8004266:	79a3      	ldrb	r3, [r4, #6]
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	2500      	movs	r5, #0
 800426c:	9501      	str	r5, [sp, #4]
 800426e:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	4620      	mov	r0, r4
 800427c:	f000 fc9b 	bl	8004bb6 <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8004280:	79a3      	ldrb	r3, [r4, #6]
 8004282:	9302      	str	r3, [sp, #8]
 8004284:	9501      	str	r5, [sp, #4]
 8004286:	f894 331d 	ldrb.w	r3, [r4, #797]	; 0x31d
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	f894 331c 	ldrb.w	r3, [r4, #796]	; 0x31c
 8004290:	462a      	mov	r2, r5
 8004292:	7961      	ldrb	r1, [r4, #5]
 8004294:	4620      	mov	r0, r4
 8004296:	f000 fc8e 	bl	8004bb6 <USBH_OpenPipe>
}
 800429a:	2000      	movs	r0, #0
 800429c:	b007      	add	sp, #28
 800429e:	bd30      	pop	{r4, r5, pc}
      status = USBH_HandleEnum(phost);
 80042a0:	4620      	mov	r0, r4
 80042a2:	f7ff fdca 	bl	8003e3a <USBH_HandleEnum>
 80042a6:	f88d 0017 	strb.w	r0, [sp, #23]
      if (status == USBH_OK)
 80042aa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f3      	bne.n	800429a <USBH_Process+0x116>
        phost->device.current_interface = 0U;
 80042b2:	f884 3324 	strb.w	r3, [r4, #804]	; 0x324
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80042b6:	f894 3337 	ldrb.w	r3, [r4, #823]	; 0x337
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d002      	beq.n	80042c4 <USBH_Process+0x140>
          phost->gState = HOST_INPUT;
 80042be:	2307      	movs	r3, #7
 80042c0:	7023      	strb	r3, [r4, #0]
 80042c2:	e7ea      	b.n	800429a <USBH_Process+0x116>
          phost->gState = HOST_SET_CONFIGURATION;
 80042c4:	2308      	movs	r3, #8
 80042c6:	7023      	strb	r3, [r4, #0]
 80042c8:	e7e7      	b.n	800429a <USBH_Process+0x116>
      if (phost->pUser != NULL)
 80042ca:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d0e3      	beq.n	800429a <USBH_Process+0x116>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80042d2:	2101      	movs	r1, #1
 80042d4:	4620      	mov	r0, r4
 80042d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80042d8:	2308      	movs	r3, #8
 80042da:	7023      	strb	r3, [r4, #0]
 80042dc:	e7dd      	b.n	800429a <USBH_Process+0x116>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80042de:	f894 133d 	ldrb.w	r1, [r4, #829]	; 0x33d
 80042e2:	4620      	mov	r0, r4
 80042e4:	f000 fbc3 	bl	8004a6e <USBH_SetCfg>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d1d6      	bne.n	800429a <USBH_Process+0x116>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80042ec:	2309      	movs	r3, #9
 80042ee:	7023      	strb	r3, [r4, #0]
 80042f0:	e7d3      	b.n	800429a <USBH_Process+0x116>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80042f2:	f894 333f 	ldrb.w	r3, [r4, #831]	; 0x33f
 80042f6:	f013 0f20 	tst.w	r3, #32
 80042fa:	d102      	bne.n	8004302 <USBH_Process+0x17e>
        phost->gState = HOST_CHECK_CLASS;
 80042fc:	230a      	movs	r3, #10
 80042fe:	7023      	strb	r3, [r4, #0]
 8004300:	e7cb      	b.n	800429a <USBH_Process+0x116>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8004302:	2101      	movs	r1, #1
 8004304:	4620      	mov	r0, r4
 8004306:	f000 fbc3 	bl	8004a90 <USBH_SetFeature>
 800430a:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 800430e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004312:	b913      	cbnz	r3, 800431a <USBH_Process+0x196>
          phost->gState = HOST_CHECK_CLASS;
 8004314:	230a      	movs	r3, #10
 8004316:	7023      	strb	r3, [r4, #0]
 8004318:	e7bf      	b.n	800429a <USBH_Process+0x116>
        else if (status == USBH_NOT_SUPPORTED)
 800431a:	f89d 3017 	ldrb.w	r3, [sp, #23]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b03      	cmp	r3, #3
 8004322:	d1ba      	bne.n	800429a <USBH_Process+0x116>
          phost->gState = HOST_CHECK_CLASS;
 8004324:	230a      	movs	r3, #10
 8004326:	7023      	strb	r3, [r4, #0]
 8004328:	e7b7      	b.n	800429a <USBH_Process+0x116>
      if (phost->ClassNumber == 0U)
 800432a:	f8d4 3380 	ldr.w	r3, [r4, #896]	; 0x380
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0b3      	beq.n	800429a <USBH_Process+0x116>
        phost->pActiveClass = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8004338:	b173      	cbz	r3, 8004358 <USBH_Process+0x1d4>
        if (phost->pActiveClass != NULL)
 800433a:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 800433e:	b1eb      	cbz	r3, 800437c <USBH_Process+0x1f8>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	4620      	mov	r0, r4
 8004344:	4798      	blx	r3
 8004346:	b9b0      	cbnz	r0, 8004376 <USBH_Process+0x1f2>
            phost->gState = HOST_CLASS_REQUEST;
 8004348:	2306      	movs	r3, #6
 800434a:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800434c:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 8004350:	2103      	movs	r1, #3
 8004352:	4620      	mov	r0, r4
 8004354:	4798      	blx	r3
 8004356:	e7a0      	b.n	800429a <USBH_Process+0x116>
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8004358:	f103 02de 	add.w	r2, r3, #222	; 0xde
 800435c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004360:	7910      	ldrb	r0, [r2, #4]
 8004362:	f894 1347 	ldrb.w	r1, [r4, #839]	; 0x347
 8004366:	4288      	cmp	r0, r1
 8004368:	d002      	beq.n	8004370 <USBH_Process+0x1ec>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800436a:	3301      	adds	r3, #1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	e7e3      	b.n	8004338 <USBH_Process+0x1b4>
            phost->pActiveClass = phost->pClass[idx];
 8004370:	f8c4 237c 	str.w	r2, [r4, #892]	; 0x37c
            break;
 8004374:	e7e1      	b.n	800433a <USBH_Process+0x1b6>
            phost->gState = HOST_ABORT_STATE;
 8004376:	230d      	movs	r3, #13
 8004378:	7023      	strb	r3, [r4, #0]
 800437a:	e78e      	b.n	800429a <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 800437c:	230d      	movs	r3, #13
 800437e:	7023      	strb	r3, [r4, #0]
 8004380:	e78b      	b.n	800429a <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 8004382:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 8004386:	b19b      	cbz	r3, 80043b0 <USBH_Process+0x22c>
        status = phost->pActiveClass->Requests(phost);
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	4620      	mov	r0, r4
 800438c:	4798      	blx	r3
 800438e:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8004392:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8004396:	b913      	cbnz	r3, 800439e <USBH_Process+0x21a>
          phost->gState = HOST_CLASS;
 8004398:	230b      	movs	r3, #11
 800439a:	7023      	strb	r3, [r4, #0]
 800439c:	e77d      	b.n	800429a <USBH_Process+0x116>
        else if (status == USBH_FAIL)
 800439e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b02      	cmp	r3, #2
 80043a6:	f47f af78 	bne.w	800429a <USBH_Process+0x116>
          phost->gState = HOST_ABORT_STATE;
 80043aa:	230d      	movs	r3, #13
 80043ac:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 80043ae:	e774      	b.n	800429a <USBH_Process+0x116>
        phost->gState = HOST_ABORT_STATE;
 80043b0:	230d      	movs	r3, #13
 80043b2:	7023      	strb	r3, [r4, #0]
 80043b4:	e771      	b.n	800429a <USBH_Process+0x116>
      if (phost->pActiveClass != NULL)
 80043b6:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f43f af6d 	beq.w	800429a <USBH_Process+0x116>
        phost->pActiveClass->BgndProcess(phost);
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4620      	mov	r0, r4
 80043c4:	4798      	blx	r3
 80043c6:	e768      	b.n	800429a <USBH_Process+0x116>
      phost->device.is_disconnected = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f884 3321 	strb.w	r3, [r4, #801]	; 0x321
      (void)DeInitStateMachine(phost);
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff fcf5 	bl	8003dbe <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 80043d4:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80043d8:	b12b      	cbz	r3, 80043e6 <USBH_Process+0x262>
        phost->pActiveClass->DeInit(phost);
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	4620      	mov	r0, r4
 80043de:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80043e0:	2300      	movs	r3, #0
 80043e2:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
      if (phost->pUser != NULL)
 80043e6:	f8d4 33d4 	ldr.w	r3, [r4, #980]	; 0x3d4
 80043ea:	b113      	cbz	r3, 80043f2 <USBH_Process+0x26e>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80043ec:	2105      	movs	r1, #5
 80043ee:	4620      	mov	r0, r4
 80043f0:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 80043f2:	f894 3322 	ldrb.w	r3, [r4, #802]	; 0x322
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d003      	beq.n	8004404 <USBH_Process+0x280>
        (void)USBH_LL_Start(phost);
 80043fc:	4620      	mov	r0, r4
 80043fe:	f000 fd2c 	bl	8004e5a <USBH_LL_Start>
 8004402:	e74a      	b.n	800429a <USBH_Process+0x116>
        phost->device.is_ReEnumerated = 0U;
 8004404:	2300      	movs	r3, #0
 8004406:	f884 3322 	strb.w	r3, [r4, #802]	; 0x322
        (void)USBH_Start(phost);
 800440a:	4620      	mov	r0, r4
 800440c:	f7ff feb0 	bl	8004170 <USBH_Start>
 8004410:	e743      	b.n	800429a <USBH_Process+0x116>

08004412 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8004412:	f8c0 13c4 	str.w	r1, [r0, #964]	; 0x3c4
}
 8004416:	4770      	bx	lr

08004418 <USBH_LL_IncTimer>:
{
 8004418:	b508      	push	{r3, lr}
  phost->Timer++;
 800441a:	f8d0 23c4 	ldr.w	r2, [r0, #964]	; 0x3c4
 800441e:	3201      	adds	r2, #1
 8004420:	f8c0 23c4 	str.w	r2, [r0, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8004424:	f7ff fcfc 	bl	8003e20 <USBH_HandleSof>
}
 8004428:	bd08      	pop	{r3, pc}

0800442a <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800442a:	2301      	movs	r3, #1
 800442c:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 8004430:	4770      	bx	lr

08004432 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	f880 3323 	strb.w	r3, [r0, #803]	; 0x323

  return;
}
 8004438:	4770      	bx	lr

0800443a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800443a:	4603      	mov	r3, r0
  phost->device.is_connected = 1U;
 800443c:	2201      	movs	r2, #1
 800443e:	f880 2320 	strb.w	r2, [r0, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8004442:	2000      	movs	r0, #0
 8004444:	f883 0321 	strb.w	r0, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8004448:	f883 0322 	strb.w	r0, [r3, #802]	; 0x322
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 800444c:	4770      	bx	lr

0800444e <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800444e:	b538      	push	{r3, r4, r5, lr}
 8004450:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8004452:	2301      	movs	r3, #1
 8004454:	f880 3321 	strb.w	r3, [r0, #801]	; 0x321
  phost->device.is_connected = 0U;
 8004458:	2500      	movs	r5, #0
 800445a:	f880 5320 	strb.w	r5, [r0, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800445e:	f880 5323 	strb.w	r5, [r0, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8004462:	f000 fd02 	bl	8004e6a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8004466:	7921      	ldrb	r1, [r4, #4]
 8004468:	4620      	mov	r0, r4
 800446a:	f000 fbcc 	bl	8004c06 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800446e:	7961      	ldrb	r1, [r4, #5]
 8004470:	4620      	mov	r0, r4
 8004472:	f000 fbc8 	bl	8004c06 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 8004476:	4628      	mov	r0, r5
 8004478:	bd38      	pop	{r3, r4, r5, pc}
	...

0800447c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800447c:	b410      	push	{r4}
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800447e:	780b      	ldrb	r3, [r1, #0]
 8004480:	7003      	strb	r3, [r0, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8004482:	784b      	ldrb	r3, [r1, #1]
 8004484:	7043      	strb	r3, [r0, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8004486:	788b      	ldrb	r3, [r1, #2]
 8004488:	78cc      	ldrb	r4, [r1, #3]
 800448a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800448e:	8043      	strh	r3, [r0, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8004490:	790b      	ldrb	r3, [r1, #4]
 8004492:	7103      	strb	r3, [r0, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8004494:	794b      	ldrb	r3, [r1, #5]
 8004496:	7143      	strb	r3, [r0, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8004498:	798b      	ldrb	r3, [r1, #6]
 800449a:	7183      	strb	r3, [r0, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800449c:	79cb      	ldrb	r3, [r1, #7]
 800449e:	71c3      	strb	r3, [r0, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80044a0:	2b20      	cmp	r3, #32
 80044a2:	d827      	bhi.n	80044f4 <USBH_ParseDevDesc+0x78>
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d307      	bcc.n	80044b8 <USBH_ParseDevDesc+0x3c>
 80044a8:	3b08      	subs	r3, #8
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4c13      	ldr	r4, [pc, #76]	; (80044fc <USBH_ParseDevDesc+0x80>)
 80044ae:	fa24 f303 	lsr.w	r3, r4, r3
 80044b2:	f013 0f01 	tst.w	r3, #1
 80044b6:	d101      	bne.n	80044bc <USBH_ParseDevDesc+0x40>
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
      break;

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80044b8:	2340      	movs	r3, #64	; 0x40
 80044ba:	71c3      	strb	r3, [r0, #7]
      break;
  }

  if (length > 8U)
 80044bc:	2a08      	cmp	r2, #8
 80044be:	d916      	bls.n	80044ee <USBH_ParseDevDesc+0x72>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80044c0:	7a0b      	ldrb	r3, [r1, #8]
 80044c2:	7a4a      	ldrb	r2, [r1, #9]
 80044c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044c8:	8103      	strh	r3, [r0, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80044ca:	7a8b      	ldrb	r3, [r1, #10]
 80044cc:	7aca      	ldrb	r2, [r1, #11]
 80044ce:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044d2:	8143      	strh	r3, [r0, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80044d4:	7b0b      	ldrb	r3, [r1, #12]
 80044d6:	7b4a      	ldrb	r2, [r1, #13]
 80044d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80044dc:	8183      	strh	r3, [r0, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80044de:	7b8b      	ldrb	r3, [r1, #14]
 80044e0:	7383      	strb	r3, [r0, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80044e2:	7bcb      	ldrb	r3, [r1, #15]
 80044e4:	73c3      	strb	r3, [r0, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80044e6:	7c0b      	ldrb	r3, [r1, #16]
 80044e8:	7403      	strb	r3, [r0, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80044ea:	7c4b      	ldrb	r3, [r1, #17]
 80044ec:	7443      	strb	r3, [r0, #17]
  }
}
 80044ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044f2:	4770      	bx	lr
  switch (dev_desc->bMaxPacketSize)
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d1df      	bne.n	80044b8 <USBH_ParseDevDesc+0x3c>
 80044f8:	e7e0      	b.n	80044bc <USBH_ParseDevDesc+0x40>
 80044fa:	bf00      	nop
 80044fc:	01000101 	.word	0x01000101

08004500 <USBH_ParseInterfaceDesc>:
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8004500:	780b      	ldrb	r3, [r1, #0]
 8004502:	7003      	strb	r3, [r0, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8004504:	784b      	ldrb	r3, [r1, #1]
 8004506:	7043      	strb	r3, [r0, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8004508:	788b      	ldrb	r3, [r1, #2]
 800450a:	7083      	strb	r3, [r0, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800450c:	78cb      	ldrb	r3, [r1, #3]
 800450e:	70c3      	strb	r3, [r0, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8004510:	790b      	ldrb	r3, [r1, #4]
 8004512:	7103      	strb	r3, [r0, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8004514:	794b      	ldrb	r3, [r1, #5]
 8004516:	7143      	strb	r3, [r0, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004518:	798b      	ldrb	r3, [r1, #6]
 800451a:	7183      	strb	r3, [r0, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800451c:	79cb      	ldrb	r3, [r1, #7]
 800451e:	71c3      	strb	r3, [r0, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8004520:	7a0b      	ldrb	r3, [r1, #8]
 8004522:	7203      	strb	r3, [r0, #8]
}
 8004524:	4770      	bx	lr

08004526 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 8004526:	b510      	push	{r4, lr}
 8004528:	4686      	mov	lr, r0
  USBH_StatusTypeDef status = USBH_OK;
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800452a:	7813      	ldrb	r3, [r2, #0]
 800452c:	700b      	strb	r3, [r1, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800452e:	7853      	ldrb	r3, [r2, #1]
 8004530:	704b      	strb	r3, [r1, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8004532:	7893      	ldrb	r3, [r2, #2]
 8004534:	708b      	strb	r3, [r1, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8004536:	f892 c003 	ldrb.w	ip, [r2, #3]
 800453a:	f881 c003 	strb.w	ip, [r1, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800453e:	7913      	ldrb	r3, [r2, #4]
 8004540:	7950      	ldrb	r0, [r2, #5]
 8004542:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8004546:	808b      	strh	r3, [r1, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8004548:	7994      	ldrb	r4, [r2, #6]
 800454a:	718c      	strb	r4, [r1, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800454c:	b193      	cbz	r3, 8004574 <USBH_ParseEPDesc+0x4e>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800454e:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8004552:	808b      	strh	r3, [r1, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 8004554:	7910      	ldrb	r0, [r2, #4]
 8004556:	7952      	ldrb	r2, [r2, #5]
 8004558:	ea40 2202 	orr.w	r2, r0, r2, lsl #8
 800455c:	f412 6fc0 	tst.w	r2, #1536	; 0x600
 8004560:	d105      	bne.n	800456e <USBH_ParseEPDesc+0x48>
 8004562:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8004566:	4313      	orrs	r3, r2
 8004568:	808b      	strh	r3, [r1, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800456a:	2000      	movs	r0, #0
 800456c:	e003      	b.n	8004576 <USBH_ParseEPDesc+0x50>
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800456e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004572:	e7f8      	b.n	8004566 <USBH_ParseEPDesc+0x40>
    status = USBH_NOT_SUPPORTED;
 8004574:	2003      	movs	r0, #3
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8004576:	f89e 331d 	ldrb.w	r3, [lr, #797]	; 0x31d
 800457a:	b973      	cbnz	r3, 800459a <USBH_ParseEPDesc+0x74>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800457c:	f00c 0c03 	and.w	ip, ip, #3
 8004580:	f1bc 0f01 	cmp.w	ip, #1
 8004584:	d003      	beq.n	800458e <USBH_ParseEPDesc+0x68>
 8004586:	f1bc 0f03 	cmp.w	ip, #3
 800458a:	d000      	beq.n	800458e <USBH_ParseEPDesc+0x68>
      /* ... */
    }
  }

  return status;
}
 800458c:	bd10      	pop	{r4, pc}
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800458e:	3c01      	subs	r4, #1
 8004590:	b2e4      	uxtb	r4, r4
 8004592:	2c0f      	cmp	r4, #15
 8004594:	d9fa      	bls.n	800458c <USBH_ParseEPDesc+0x66>
        status = USBH_NOT_SUPPORTED;
 8004596:	2003      	movs	r0, #3
 8004598:	e7f8      	b.n	800458c <USBH_ParseEPDesc+0x66>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800459a:	f00c 0c03 	and.w	ip, ip, #3
 800459e:	f1bc 0f01 	cmp.w	ip, #1
 80045a2:	d006      	beq.n	80045b2 <USBH_ParseEPDesc+0x8c>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80045a4:	f1bc 0f03 	cmp.w	ip, #3
 80045a8:	d1f0      	bne.n	800458c <USBH_ParseEPDesc+0x66>
      if (ep_descriptor->bInterval == 0U)
 80045aa:	2c00      	cmp	r4, #0
 80045ac:	d1ee      	bne.n	800458c <USBH_ParseEPDesc+0x66>
        status = USBH_NOT_SUPPORTED;
 80045ae:	4660      	mov	r0, ip
 80045b0:	e7ec      	b.n	800458c <USBH_ParseEPDesc+0x66>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80045b2:	3c01      	subs	r4, #1
 80045b4:	b2e4      	uxtb	r4, r4
 80045b6:	2c0f      	cmp	r4, #15
 80045b8:	d9e8      	bls.n	800458c <USBH_ParseEPDesc+0x66>
        status = USBH_NOT_SUPPORTED;
 80045ba:	2003      	movs	r0, #3
 80045bc:	e7e6      	b.n	800458c <USBH_ParseEPDesc+0x66>

080045be <USBH_ParseStringDesc>:
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80045be:	7843      	ldrb	r3, [r0, #1]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d000      	beq.n	80045c6 <USBH_ParseStringDesc+0x8>
      *pdest =  psrc[idx];
      pdest++;
    }
    *pdest = 0U; /* mark end of string */
  }
}
 80045c4:	4770      	bx	lr
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80045c6:	7803      	ldrb	r3, [r0, #0]
 80045c8:	3b02      	subs	r3, #2
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf28      	it	cs
 80045ce:	461a      	movcs	r2, r3
 80045d0:	b292      	uxth	r2, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 80045d2:	2300      	movs	r3, #0
 80045d4:	e007      	b.n	80045e6 <USBH_ParseStringDesc+0x28>
      *pdest =  psrc[idx];
 80045d6:	eb00 0c03 	add.w	ip, r0, r3
 80045da:	f89c c002 	ldrb.w	ip, [ip, #2]
 80045de:	f801 cb01 	strb.w	ip, [r1], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 80045e2:	3302      	adds	r3, #2
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d3f5      	bcc.n	80045d6 <USBH_ParseStringDesc+0x18>
    *pdest = 0U; /* mark end of string */
 80045ea:	2300      	movs	r3, #0
 80045ec:	700b      	strb	r3, [r1, #0]
}
 80045ee:	e7e9      	b.n	80045c4 <USBH_ParseStringDesc+0x6>

080045f0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80045f0:	b530      	push	{r4, r5, lr}
 80045f2:	b083      	sub	sp, #12
 80045f4:	4604      	mov	r4, r0
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 80045f6:	7e05      	ldrb	r5, [r0, #24]
 80045f8:	1e6b      	subs	r3, r5, #1
 80045fa:	2b0a      	cmp	r3, #10
 80045fc:	f200 80de 	bhi.w	80047bc <USBH_HandleControl+0x1cc>
 8004600:	e8df f003 	tbb	[pc, r3]
 8004604:	41351006 	.word	0x41351006
 8004608:	8a7e6154 	.word	0x8a7e6154
 800460c:	aa9d      	.short	0xaa9d
 800460e:	c1          	.byte	0xc1
 800460f:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8004610:	7942      	ldrb	r2, [r0, #5]
 8004612:	f100 0110 	add.w	r1, r0, #16
 8004616:	f000 fa5e 	bl	8004ad6 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800461a:	2302      	movs	r3, #2
 800461c:	7623      	strb	r3, [r4, #24]
    default:
      break;
  }

  return status;
}
 800461e:	4628      	mov	r0, r5
 8004620:	b003      	add	sp, #12
 8004622:	bd30      	pop	{r4, r5, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004624:	7941      	ldrb	r1, [r0, #5]
 8004626:	f000 fbe1 	bl	8004dec <USBH_LL_GetURBState>
 800462a:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 800462c:	2801      	cmp	r0, #1
 800462e:	d005      	beq.n	800463c <USBH_HandleControl+0x4c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8004630:	2804      	cmp	r0, #4
 8004632:	d018      	beq.n	8004666 <USBH_HandleControl+0x76>
 8004634:	2802      	cmp	r0, #2
 8004636:	d016      	beq.n	8004666 <USBH_HandleControl+0x76>
  USBH_StatusTypeDef status = USBH_BUSY;
 8004638:	2501      	movs	r5, #1
 800463a:	e7f0      	b.n	800461e <USBH_HandleControl+0x2e>
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800463c:	7c23      	ldrb	r3, [r4, #16]
        if (phost->Control.setup.b.wLength.w != 0U)
 800463e:	8ae2      	ldrh	r2, [r4, #22]
 8004640:	b142      	cbz	r2, 8004654 <USBH_HandleControl+0x64>
          if (direction == USB_D2H)
 8004642:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004646:	d102      	bne.n	800464e <USBH_HandleControl+0x5e>
            phost->Control.state = CTRL_DATA_OUT;
 8004648:	2305      	movs	r3, #5
 800464a:	7623      	strb	r3, [r4, #24]
 800464c:	e7e7      	b.n	800461e <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_DATA_IN;
 800464e:	2303      	movs	r3, #3
 8004650:	7623      	strb	r3, [r4, #24]
 8004652:	e7e4      	b.n	800461e <USBH_HandleControl+0x2e>
          if (direction == USB_D2H)
 8004654:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004658:	d102      	bne.n	8004660 <USBH_HandleControl+0x70>
            phost->Control.state = CTRL_STATUS_IN;
 800465a:	2307      	movs	r3, #7
 800465c:	7623      	strb	r3, [r4, #24]
 800465e:	e7de      	b.n	800461e <USBH_HandleControl+0x2e>
            phost->Control.state = CTRL_STATUS_OUT;
 8004660:	2309      	movs	r3, #9
 8004662:	7623      	strb	r3, [r4, #24]
 8004664:	e7db      	b.n	800461e <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 8004666:	230b      	movs	r3, #11
 8004668:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800466a:	2501      	movs	r5, #1
 800466c:	e7d7      	b.n	800461e <USBH_HandleControl+0x2e>
      phost->Control.timer = (uint16_t)phost->Timer;
 800466e:	f8d0 33c4 	ldr.w	r3, [r0, #964]	; 0x3c4
 8004672:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8004674:	7903      	ldrb	r3, [r0, #4]
 8004676:	8982      	ldrh	r2, [r0, #12]
 8004678:	6881      	ldr	r1, [r0, #8]
 800467a:	f000 fa53 	bl	8004b24 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 800467e:	2304      	movs	r3, #4
 8004680:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004682:	2501      	movs	r5, #1
      break;
 8004684:	e7cb      	b.n	800461e <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004686:	7901      	ldrb	r1, [r0, #4]
 8004688:	f000 fbb0 	bl	8004dec <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800468c:	2801      	cmp	r0, #1
 800468e:	d006      	beq.n	800469e <USBH_HandleControl+0xae>
      if (URB_Status == USBH_URB_STALL)
 8004690:	2805      	cmp	r0, #5
 8004692:	f000 8095 	beq.w	80047c0 <USBH_HandleControl+0x1d0>
        if (URB_Status == USBH_URB_ERROR)
 8004696:	2804      	cmp	r0, #4
 8004698:	d004      	beq.n	80046a4 <USBH_HandleControl+0xb4>
  USBH_StatusTypeDef status = USBH_BUSY;
 800469a:	2501      	movs	r5, #1
 800469c:	e7bf      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 800469e:	2309      	movs	r3, #9
 80046a0:	7623      	strb	r3, [r4, #24]
 80046a2:	e7f5      	b.n	8004690 <USBH_HandleControl+0xa0>
          phost->Control.state = CTRL_ERROR;
 80046a4:	230b      	movs	r3, #11
 80046a6:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80046a8:	2501      	movs	r5, #1
 80046aa:	e7b8      	b.n	800461e <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80046ac:	2501      	movs	r5, #1
 80046ae:	9500      	str	r5, [sp, #0]
 80046b0:	7943      	ldrb	r3, [r0, #5]
 80046b2:	8982      	ldrh	r2, [r0, #12]
 80046b4:	6881      	ldr	r1, [r0, #8]
 80046b6:	f000 fa1f 	bl	8004af8 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80046ba:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 80046be:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80046c0:	2306      	movs	r3, #6
 80046c2:	7623      	strb	r3, [r4, #24]
      break;
 80046c4:	e7ab      	b.n	800461e <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80046c6:	7941      	ldrb	r1, [r0, #5]
 80046c8:	f000 fb90 	bl	8004dec <USBH_LL_GetURBState>
 80046cc:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 80046ce:	2801      	cmp	r0, #1
 80046d0:	d007      	beq.n	80046e2 <USBH_HandleControl+0xf2>
      else if (URB_Status == USBH_URB_STALL)
 80046d2:	2805      	cmp	r0, #5
 80046d4:	d008      	beq.n	80046e8 <USBH_HandleControl+0xf8>
      else if (URB_Status == USBH_URB_NOTREADY)
 80046d6:	2802      	cmp	r0, #2
 80046d8:	d00a      	beq.n	80046f0 <USBH_HandleControl+0x100>
        if (URB_Status == USBH_URB_ERROR)
 80046da:	2804      	cmp	r0, #4
 80046dc:	d00c      	beq.n	80046f8 <USBH_HandleControl+0x108>
  USBH_StatusTypeDef status = USBH_BUSY;
 80046de:	2501      	movs	r5, #1
 80046e0:	e79d      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_IN;
 80046e2:	2307      	movs	r3, #7
 80046e4:	7623      	strb	r3, [r4, #24]
 80046e6:	e79a      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STALLED;
 80046e8:	230c      	movs	r3, #12
 80046ea:	7623      	strb	r3, [r4, #24]
        status = USBH_NOT_SUPPORTED;
 80046ec:	2503      	movs	r5, #3
 80046ee:	e796      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_DATA_OUT;
 80046f0:	2305      	movs	r3, #5
 80046f2:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 80046f4:	2501      	movs	r5, #1
 80046f6:	e792      	b.n	800461e <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 80046f8:	230b      	movs	r3, #11
 80046fa:	7623      	strb	r3, [r4, #24]
          status = USBH_FAIL;
 80046fc:	2502      	movs	r5, #2
 80046fe:	e78e      	b.n	800461e <USBH_HandleControl+0x2e>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8004700:	7903      	ldrb	r3, [r0, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	4611      	mov	r1, r2
 8004706:	f000 fa0d 	bl	8004b24 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800470a:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 800470e:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8004710:	2308      	movs	r3, #8
 8004712:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004714:	2501      	movs	r5, #1
      break;
 8004716:	e782      	b.n	800461e <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8004718:	7901      	ldrb	r1, [r0, #4]
 800471a:	f000 fb67 	bl	8004dec <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800471e:	2801      	cmp	r0, #1
 8004720:	d005      	beq.n	800472e <USBH_HandleControl+0x13e>
      else if (URB_Status == USBH_URB_ERROR)
 8004722:	2804      	cmp	r0, #4
 8004724:	d007      	beq.n	8004736 <USBH_HandleControl+0x146>
        if (URB_Status == USBH_URB_STALL)
 8004726:	2805      	cmp	r0, #5
 8004728:	d04c      	beq.n	80047c4 <USBH_HandleControl+0x1d4>
  USBH_StatusTypeDef status = USBH_BUSY;
 800472a:	2501      	movs	r5, #1
 800472c:	e777      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 800472e:	230d      	movs	r3, #13
 8004730:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8004732:	2500      	movs	r5, #0
 8004734:	e773      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_ERROR;
 8004736:	230b      	movs	r3, #11
 8004738:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800473a:	2501      	movs	r5, #1
 800473c:	e76f      	b.n	800461e <USBH_HandleControl+0x2e>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800473e:	2501      	movs	r5, #1
 8004740:	9500      	str	r5, [sp, #0]
 8004742:	7943      	ldrb	r3, [r0, #5]
 8004744:	2200      	movs	r2, #0
 8004746:	4611      	mov	r1, r2
 8004748:	f000 f9d6 	bl	8004af8 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 800474c:	f8d4 33c4 	ldr.w	r3, [r4, #964]	; 0x3c4
 8004750:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8004752:	230a      	movs	r3, #10
 8004754:	7623      	strb	r3, [r4, #24]
      break;
 8004756:	e762      	b.n	800461e <USBH_HandleControl+0x2e>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8004758:	7941      	ldrb	r1, [r0, #5]
 800475a:	f000 fb47 	bl	8004dec <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800475e:	2801      	cmp	r0, #1
 8004760:	d005      	beq.n	800476e <USBH_HandleControl+0x17e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8004762:	2802      	cmp	r0, #2
 8004764:	d007      	beq.n	8004776 <USBH_HandleControl+0x186>
        if (URB_Status == USBH_URB_ERROR)
 8004766:	2804      	cmp	r0, #4
 8004768:	d009      	beq.n	800477e <USBH_HandleControl+0x18e>
  USBH_StatusTypeDef status = USBH_BUSY;
 800476a:	2501      	movs	r5, #1
 800476c:	e757      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_COMPLETE;
 800476e:	230d      	movs	r3, #13
 8004770:	7623      	strb	r3, [r4, #24]
        status = USBH_OK;
 8004772:	2500      	movs	r5, #0
 8004774:	e753      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->Control.state = CTRL_STATUS_OUT;
 8004776:	2309      	movs	r3, #9
 8004778:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 800477a:	2501      	movs	r5, #1
 800477c:	e74f      	b.n	800461e <USBH_HandleControl+0x2e>
          phost->Control.state = CTRL_ERROR;
 800477e:	230b      	movs	r3, #11
 8004780:	7623      	strb	r3, [r4, #24]
  USBH_StatusTypeDef status = USBH_BUSY;
 8004782:	2501      	movs	r5, #1
 8004784:	e74b      	b.n	800461e <USBH_HandleControl+0x2e>
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8004786:	7e43      	ldrb	r3, [r0, #25]
 8004788:	3301      	adds	r3, #1
 800478a:	b2db      	uxtb	r3, r3
 800478c:	7643      	strb	r3, [r0, #25]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d803      	bhi.n	800479a <USBH_HandleControl+0x1aa>
        phost->Control.state = CTRL_SETUP;
 8004792:	2501      	movs	r5, #1
 8004794:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 8004796:	7085      	strb	r5, [r0, #2]
 8004798:	e741      	b.n	800461e <USBH_HandleControl+0x2e>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800479a:	f8d0 33d4 	ldr.w	r3, [r0, #980]	; 0x3d4
 800479e:	2106      	movs	r1, #6
 80047a0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80047a2:	2500      	movs	r5, #0
 80047a4:	7665      	strb	r5, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80047a6:	7961      	ldrb	r1, [r4, #5]
 80047a8:	4620      	mov	r0, r4
 80047aa:	f000 fa2c 	bl	8004c06 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80047ae:	7921      	ldrb	r1, [r4, #4]
 80047b0:	4620      	mov	r0, r4
 80047b2:	f000 fa28 	bl	8004c06 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80047b6:	7025      	strb	r5, [r4, #0]
        status = USBH_FAIL;
 80047b8:	2502      	movs	r5, #2
 80047ba:	e730      	b.n	800461e <USBH_HandleControl+0x2e>
  switch (phost->Control.state)
 80047bc:	2501      	movs	r5, #1
 80047be:	e72e      	b.n	800461e <USBH_HandleControl+0x2e>
        status = USBH_NOT_SUPPORTED;
 80047c0:	2503      	movs	r5, #3
 80047c2:	e72c      	b.n	800461e <USBH_HandleControl+0x2e>
          status = USBH_NOT_SUPPORTED;
 80047c4:	2503      	movs	r5, #3
 80047c6:	e72a      	b.n	800461e <USBH_HandleControl+0x2e>

080047c8 <USBH_GetNextDesc>:
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80047c8:	7803      	ldrb	r3, [r0, #0]
 80047ca:	880a      	ldrh	r2, [r1, #0]
 80047cc:	4413      	add	r3, r2
 80047ce:	800b      	strh	r3, [r1, #0]
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80047d0:	7803      	ldrb	r3, [r0, #0]
}
 80047d2:	4418      	add	r0, r3
 80047d4:	4770      	bx	lr

080047d6 <USBH_ParseCfgDesc>:
{
 80047d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80047da:	b083      	sub	sp, #12
 80047dc:	4605      	mov	r5, r0
 80047de:	460c      	mov	r4, r1
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80047e0:	7809      	ldrb	r1, [r1, #0]
 80047e2:	f880 1338 	strb.w	r1, [r0, #824]	; 0x338
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80047e6:	7863      	ldrb	r3, [r4, #1]
 80047e8:	f880 3339 	strb.w	r3, [r0, #825]	; 0x339
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80047ec:	78a3      	ldrb	r3, [r4, #2]
 80047ee:	78e0      	ldrb	r0, [r4, #3]
 80047f0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80047f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f8:	bf28      	it	cs
 80047fa:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80047fe:	f8a5 333a 	strh.w	r3, [r5, #826]	; 0x33a
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8004802:	7923      	ldrb	r3, [r4, #4]
 8004804:	f885 333c 	strb.w	r3, [r5, #828]	; 0x33c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8004808:	7963      	ldrb	r3, [r4, #5]
 800480a:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800480e:	79a3      	ldrb	r3, [r4, #6]
 8004810:	f885 333e 	strb.w	r3, [r5, #830]	; 0x33e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8004814:	79e3      	ldrb	r3, [r4, #7]
 8004816:	f885 333f 	strb.w	r3, [r5, #831]	; 0x33f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800481a:	7a23      	ldrb	r3, [r4, #8]
 800481c:	f885 3340 	strb.w	r3, [r5, #832]	; 0x340
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 8004820:	2909      	cmp	r1, #9
 8004822:	d002      	beq.n	800482a <USBH_ParseCfgDesc+0x54>
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8004824:	2309      	movs	r3, #9
 8004826:	f885 3338 	strb.w	r3, [r5, #824]	; 0x338
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800482a:	2a09      	cmp	r2, #9
 800482c:	d97f      	bls.n	800492e <USBH_ParseCfgDesc+0x158>
    ptr = USB_LEN_CFG_DESC;
 800482e:	2309      	movs	r3, #9
 8004830:	f8ad 3006 	strh.w	r3, [sp, #6]
  uint8_t                      if_ix = 0U;
 8004834:	2600      	movs	r6, #0
  USBH_StatusTypeDef           status = USBH_OK;
 8004836:	4637      	mov	r7, r6
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004838:	2e01      	cmp	r6, #1
 800483a:	d86f      	bhi.n	800491c <USBH_ParseCfgDesc+0x146>
 800483c:	f8b5 233a 	ldrh.w	r2, [r5, #826]	; 0x33a
 8004840:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004844:	429a      	cmp	r2, r3
 8004846:	d969      	bls.n	800491c <USBH_ParseCfgDesc+0x146>
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8004848:	f10d 0106 	add.w	r1, sp, #6
 800484c:	4620      	mov	r0, r4
 800484e:	f7ff ffbb 	bl	80047c8 <USBH_GetNextDesc>
 8004852:	4604      	mov	r4, r0
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8004854:	7843      	ldrb	r3, [r0, #1]
 8004856:	2b04      	cmp	r3, #4
 8004858:	d1ee      	bne.n	8004838 <USBH_ParseCfgDesc+0x62>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800485a:	7803      	ldrb	r3, [r0, #0]
 800485c:	2b09      	cmp	r3, #9
 800485e:	d001      	beq.n	8004864 <USBH_ParseCfgDesc+0x8e>
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8004860:	2309      	movs	r3, #9
 8004862:	7003      	strb	r3, [r0, #0]
        pif = &cfg_desc->Itf_Desc[if_ix];
 8004864:	46b1      	mov	r9, r6
 8004866:	f505 704e 	add.w	r0, r5, #824	; 0x338
 800486a:	231a      	movs	r3, #26
 800486c:	fb06 f303 	mul.w	r3, r6, r3
 8004870:	3308      	adds	r3, #8
 8004872:	4418      	add	r0, r3
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8004874:	4621      	mov	r1, r4
 8004876:	3002      	adds	r0, #2
 8004878:	f7ff fe42 	bl	8004500 <USBH_ParseInterfaceDesc>
        ep_ix = 0U;
 800487c:	f04f 0800 	mov.w	r8, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8004880:	e024      	b.n	80048cc <USBH_ParseCfgDesc+0xf6>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8004882:	231a      	movs	r3, #26
 8004884:	fb03 5309 	mla	r3, r3, r9, r5
 8004888:	f893 3348 	ldrb.w	r3, [r3, #840]	; 0x348
 800488c:	2b02      	cmp	r3, #2
 800488e:	d13a      	bne.n	8004906 <USBH_ParseCfgDesc+0x130>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8004890:	231a      	movs	r3, #26
 8004892:	fb03 5309 	mla	r3, r3, r9, r5
 8004896:	f893 3349 	ldrb.w	r3, [r3, #841]	; 0x349
 800489a:	b923      	cbnz	r3, 80048a6 <USBH_ParseCfgDesc+0xd0>
 800489c:	7803      	ldrb	r3, [r0, #0]
 800489e:	2b09      	cmp	r3, #9
 80048a0:	d001      	beq.n	80048a6 <USBH_ParseCfgDesc+0xd0>
                pdesc->bLength = 0x09U;
 80048a2:	2309      	movs	r3, #9
 80048a4:	7003      	strb	r3, [r0, #0]
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80048a6:	f505 714e 	add.w	r1, r5, #824	; 0x338
 80048aa:	f108 0801 	add.w	r8, r8, #1
 80048ae:	231a      	movs	r3, #26
 80048b0:	fb03 f309 	mul.w	r3, r3, r9
 80048b4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80048b8:	3308      	adds	r3, #8
 80048ba:	4419      	add	r1, r3
            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80048bc:	4622      	mov	r2, r4
 80048be:	3104      	adds	r1, #4
 80048c0:	4628      	mov	r0, r5
 80048c2:	f7ff fe30 	bl	8004526 <USBH_ParseEPDesc>
 80048c6:	4607      	mov	r7, r0
            ep_ix++;
 80048c8:	fa5f f888 	uxtb.w	r8, r8
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80048cc:	231a      	movs	r3, #26
 80048ce:	fb03 5309 	mla	r3, r3, r9, r5
 80048d2:	f893 3346 	ldrb.w	r3, [r3, #838]	; 0x346
 80048d6:	4543      	cmp	r3, r8
 80048d8:	d91b      	bls.n	8004912 <USBH_ParseCfgDesc+0x13c>
 80048da:	f8b5 133a 	ldrh.w	r1, [r5, #826]	; 0x33a
 80048de:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80048e2:	4291      	cmp	r1, r2
 80048e4:	d915      	bls.n	8004912 <USBH_ParseCfgDesc+0x13c>
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80048e6:	f10d 0106 	add.w	r1, sp, #6
 80048ea:	4620      	mov	r0, r4
 80048ec:	f7ff ff6c 	bl	80047c8 <USBH_GetNextDesc>
 80048f0:	4604      	mov	r4, r0
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80048f2:	7843      	ldrb	r3, [r0, #1]
 80048f4:	2b05      	cmp	r3, #5
 80048f6:	d1e9      	bne.n	80048cc <USBH_ParseCfgDesc+0xf6>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80048f8:	231a      	movs	r3, #26
 80048fa:	fb03 5309 	mla	r3, r3, r9, r5
 80048fe:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8004902:	2b01      	cmp	r3, #1
 8004904:	d0bd      	beq.n	8004882 <USBH_ParseCfgDesc+0xac>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 8004906:	7823      	ldrb	r3, [r4, #0]
 8004908:	2b07      	cmp	r3, #7
 800490a:	d0cc      	beq.n	80048a6 <USBH_ParseCfgDesc+0xd0>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800490c:	2307      	movs	r3, #7
 800490e:	7023      	strb	r3, [r4, #0]
 8004910:	e7c9      	b.n	80048a6 <USBH_ParseCfgDesc+0xd0>
        if (ep_ix < pif->bNumEndpoints)
 8004912:	4543      	cmp	r3, r8
 8004914:	d810      	bhi.n	8004938 <USBH_ParseCfgDesc+0x162>
        if_ix++;
 8004916:	3601      	adds	r6, #1
 8004918:	b2f6      	uxtb	r6, r6
 800491a:	e78d      	b.n	8004838 <USBH_ParseCfgDesc+0x62>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800491c:	f895 333c 	ldrb.w	r3, [r5, #828]	; 0x33c
 8004920:	2b02      	cmp	r3, #2
 8004922:	bf28      	it	cs
 8004924:	2302      	movcs	r3, #2
 8004926:	42b3      	cmp	r3, r6
 8004928:	d902      	bls.n	8004930 <USBH_ParseCfgDesc+0x15a>
      return USBH_NOT_SUPPORTED;
 800492a:	2703      	movs	r7, #3
 800492c:	e000      	b.n	8004930 <USBH_ParseCfgDesc+0x15a>
  USBH_StatusTypeDef           status = USBH_OK;
 800492e:	2700      	movs	r7, #0
}
 8004930:	4638      	mov	r0, r7
 8004932:	b003      	add	sp, #12
 8004934:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          return USBH_NOT_SUPPORTED;
 8004938:	2703      	movs	r7, #3
 800493a:	e7f9      	b.n	8004930 <USBH_ParseCfgDesc+0x15a>

0800493c <USBH_CtlReq>:
{
 800493c:	b510      	push	{r4, lr}
 800493e:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8004940:	7880      	ldrb	r0, [r0, #2]
 8004942:	2801      	cmp	r0, #1
 8004944:	d003      	beq.n	800494e <USBH_CtlReq+0x12>
 8004946:	2802      	cmp	r0, #2
 8004948:	d008      	beq.n	800495c <USBH_CtlReq+0x20>
 800494a:	2001      	movs	r0, #1
}
 800494c:	bd10      	pop	{r4, pc}
      phost->Control.buff = buff;
 800494e:	60a1      	str	r1, [r4, #8]
      phost->Control.length = length;
 8004950:	81a2      	strh	r2, [r4, #12]
      phost->Control.state = CTRL_SETUP;
 8004952:	2301      	movs	r3, #1
 8004954:	7623      	strb	r3, [r4, #24]
      phost->RequestState = CMD_WAIT;
 8004956:	2302      	movs	r3, #2
 8004958:	70a3      	strb	r3, [r4, #2]
      break;
 800495a:	e7f7      	b.n	800494c <USBH_CtlReq+0x10>
      status = USBH_HandleControl(phost);
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff fe47 	bl	80045f0 <USBH_HandleControl>
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8004962:	b130      	cbz	r0, 8004972 <USBH_CtlReq+0x36>
 8004964:	2803      	cmp	r0, #3
 8004966:	d004      	beq.n	8004972 <USBH_CtlReq+0x36>
      else if (status == USBH_FAIL)
 8004968:	2802      	cmp	r0, #2
 800496a:	d1ef      	bne.n	800494c <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 800496c:	2301      	movs	r3, #1
 800496e:	70a3      	strb	r3, [r4, #2]
 8004970:	e7ec      	b.n	800494c <USBH_CtlReq+0x10>
        phost->RequestState = CMD_SEND;
 8004972:	2301      	movs	r3, #1
 8004974:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8004976:	2300      	movs	r3, #0
 8004978:	7623      	strb	r3, [r4, #24]
 800497a:	e7e7      	b.n	800494c <USBH_CtlReq+0x10>

0800497c <USBH_GetDescriptor>:
{
 800497c:	b508      	push	{r3, lr}
 800497e:	468e      	mov	lr, r1
 8004980:	4694      	mov	ip, r2
 8004982:	4619      	mov	r1, r3
 8004984:	f8bd 2008 	ldrh.w	r2, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8004988:	7883      	ldrb	r3, [r0, #2]
 800498a:	2b01      	cmp	r3, #1
 800498c:	d002      	beq.n	8004994 <USBH_GetDescriptor+0x18>
  return USBH_CtlReq(phost, buff, length);
 800498e:	f7ff ffd5 	bl	800493c <USBH_CtlReq>
}
 8004992:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8004994:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
 8004998:	f880 e010 	strb.w	lr, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800499c:	2306      	movs	r3, #6
 800499e:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80049a0:	f8a0 c012 	strh.w	ip, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80049a4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80049a8:	f5bc 7f40 	cmp.w	ip, #768	; 0x300
 80049ac:	d003      	beq.n	80049b6 <USBH_GetDescriptor+0x3a>
      phost->Control.setup.b.wIndex.w = 0U;
 80049ae:	2300      	movs	r3, #0
 80049b0:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 80049b2:	82c2      	strh	r2, [r0, #22]
 80049b4:	e7eb      	b.n	800498e <USBH_GetDescriptor+0x12>
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80049b6:	f240 4309 	movw	r3, #1033	; 0x409
 80049ba:	8283      	strh	r3, [r0, #20]
 80049bc:	e7f9      	b.n	80049b2 <USBH_GetDescriptor+0x36>

080049be <USBH_Get_DevDesc>:
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b083      	sub	sp, #12
 80049c2:	4604      	mov	r4, r0
                              USB_DESC_DEVICE, phost->device.Data,
 80049c4:	f500 768e 	add.w	r6, r0, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80049c8:	460d      	mov	r5, r1
 80049ca:	9100      	str	r1, [sp, #0]
 80049cc:	4633      	mov	r3, r6
 80049ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d2:	2100      	movs	r1, #0
 80049d4:	f7ff ffd2 	bl	800497c <USBH_GetDescriptor>
  if (status == USBH_OK)
 80049d8:	4607      	mov	r7, r0
 80049da:	b110      	cbz	r0, 80049e2 <USBH_Get_DevDesc+0x24>
}
 80049dc:	4638      	mov	r0, r7
 80049de:	b003      	add	sp, #12
 80049e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80049e2:	462a      	mov	r2, r5
 80049e4:	4631      	mov	r1, r6
 80049e6:	f204 3026 	addw	r0, r4, #806	; 0x326
 80049ea:	f7ff fd47 	bl	800447c <USBH_ParseDevDesc>
 80049ee:	e7f5      	b.n	80049dc <USBH_Get_DevDesc+0x1e>

080049f0 <USBH_Get_CfgDesc>:
{
 80049f0:	b570      	push	{r4, r5, r6, lr}
 80049f2:	b082      	sub	sp, #8
 80049f4:	4604      	mov	r4, r0
 80049f6:	460d      	mov	r5, r1
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80049f8:	f100 061c 	add.w	r6, r0, #28
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80049fc:	9100      	str	r1, [sp, #0]
 80049fe:	4633      	mov	r3, r6
 8004a00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a04:	2100      	movs	r1, #0
 8004a06:	f7ff ffb9 	bl	800497c <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004a0a:	b108      	cbz	r0, 8004a10 <USBH_Get_CfgDesc+0x20>
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
    status = USBH_ParseCfgDesc(phost, pData, length);
 8004a10:	462a      	mov	r2, r5
 8004a12:	4631      	mov	r1, r6
 8004a14:	4620      	mov	r0, r4
 8004a16:	f7ff fede 	bl	80047d6 <USBH_ParseCfgDesc>
 8004a1a:	e7f7      	b.n	8004a0c <USBH_Get_CfgDesc+0x1c>

08004a1c <USBH_Get_StringDesc>:
{
 8004a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	4616      	mov	r6, r2
 8004a22:	461d      	mov	r5, r3
                              phost->device.Data, length);
 8004a24:	f500 748e 	add.w	r4, r0, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4623      	mov	r3, r4
 8004a2c:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8004a30:	2100      	movs	r1, #0
 8004a32:	f7ff ffa3 	bl	800497c <USBH_GetDescriptor>
  if (status == USBH_OK)
 8004a36:	4607      	mov	r7, r0
 8004a38:	b110      	cbz	r0, 8004a40 <USBH_Get_StringDesc+0x24>
}
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	b003      	add	sp, #12
 8004a3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8004a40:	462a      	mov	r2, r5
 8004a42:	4631      	mov	r1, r6
 8004a44:	4620      	mov	r0, r4
 8004a46:	f7ff fdba 	bl	80045be <USBH_ParseStringDesc>
 8004a4a:	e7f6      	b.n	8004a3a <USBH_Get_StringDesc+0x1e>

08004a4c <USBH_SetAddress>:
{
 8004a4c:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004a4e:	7883      	ldrb	r3, [r0, #2]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d004      	beq.n	8004a5e <USBH_SetAddress+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004a54:	2200      	movs	r2, #0
 8004a56:	4611      	mov	r1, r2
 8004a58:	f7ff ff70 	bl	800493c <USBH_CtlReq>
}
 8004a5c:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004a5e:	2300      	movs	r3, #0
 8004a60:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004a62:	2205      	movs	r2, #5
 8004a64:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8004a66:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a68:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a6a:	82c3      	strh	r3, [r0, #22]
 8004a6c:	e7f2      	b.n	8004a54 <USBH_SetAddress+0x8>

08004a6e <USBH_SetCfg>:
{
 8004a6e:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004a70:	7883      	ldrb	r3, [r0, #2]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d004      	beq.n	8004a80 <USBH_SetCfg+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004a76:	2200      	movs	r2, #0
 8004a78:	4611      	mov	r1, r2
 8004a7a:	f7ff ff5f 	bl	800493c <USBH_CtlReq>
}
 8004a7e:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004a80:	2300      	movs	r3, #0
 8004a82:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004a84:	2209      	movs	r2, #9
 8004a86:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8004a88:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004a8a:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004a8c:	82c3      	strh	r3, [r0, #22]
 8004a8e:	e7f2      	b.n	8004a76 <USBH_SetCfg+0x8>

08004a90 <USBH_SetFeature>:
{
 8004a90:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004a92:	7883      	ldrb	r3, [r0, #2]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d004      	beq.n	8004aa2 <USBH_SetFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	f7ff ff4e 	bl	800493c <USBH_CtlReq>
}
 8004aa0:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8004aaa:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8004aac:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004aae:	82c3      	strh	r3, [r0, #22]
 8004ab0:	e7f2      	b.n	8004a98 <USBH_SetFeature+0x8>

08004ab2 <USBH_ClrFeature>:
{
 8004ab2:	b508      	push	{r3, lr}
  if (phost->RequestState == CMD_SEND)
 8004ab4:	7883      	ldrb	r3, [r0, #2]
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d004      	beq.n	8004ac4 <USBH_ClrFeature+0x12>
  return USBH_CtlReq(phost, NULL, 0U);
 8004aba:	2200      	movs	r2, #0
 8004abc:	4611      	mov	r1, r2
 8004abe:	f7ff ff3d 	bl	800493c <USBH_CtlReq>
}
 8004ac2:	bd08      	pop	{r3, pc}
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8004acc:	2300      	movs	r3, #0
 8004ace:	8243      	strh	r3, [r0, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8004ad0:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004ad2:	82c3      	strh	r3, [r0, #22]
 8004ad4:	e7f1      	b.n	8004aba <USBH_ClrFeature+0x8>

08004ad6 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004ad6:	b510      	push	{r4, lr}
 8004ad8:	b084      	sub	sp, #16
 8004ada:	460b      	mov	r3, r1
 8004adc:	4611      	mov	r1, r2

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004ade:	2400      	movs	r4, #0
 8004ae0:	9403      	str	r4, [sp, #12]
 8004ae2:	2208      	movs	r2, #8
 8004ae4:	9202      	str	r2, [sp, #8]
 8004ae6:	9301      	str	r3, [sp, #4]
 8004ae8:	9400      	str	r4, [sp, #0]
 8004aea:	4623      	mov	r3, r4
 8004aec:	4622      	mov	r2, r4
 8004aee:	f000 f9e7 	bl	8004ec0 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 8004af2:	4620      	mov	r0, r4
 8004af4:	b004      	add	sp, #16
 8004af6:	bd10      	pop	{r4, pc}

08004af8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8004af8:	b530      	push	{r4, r5, lr}
 8004afa:	b085      	sub	sp, #20
 8004afc:	460c      	mov	r4, r1
 8004afe:	4619      	mov	r1, r3
 8004b00:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004b04:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8004b08:	b105      	cbz	r5, 8004b0c <USBH_CtlSendData+0x14>
  {
    do_ping = 0U;
 8004b0a:	2300      	movs	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004b0c:	9303      	str	r3, [sp, #12]
 8004b0e:	9202      	str	r2, [sp, #8]
 8004b10:	9401      	str	r4, [sp, #4]
 8004b12:	2301      	movs	r3, #1
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	2300      	movs	r3, #0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	f000 f9d1 	bl	8004ec0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8004b1e:	2000      	movs	r0, #0
 8004b20:	b005      	add	sp, #20
 8004b22:	bd30      	pop	{r4, r5, pc}

08004b24 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8004b24:	b530      	push	{r4, r5, lr}
 8004b26:	b085      	sub	sp, #20
 8004b28:	460d      	mov	r5, r1
 8004b2a:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004b2c:	2400      	movs	r4, #0
 8004b2e:	9403      	str	r4, [sp, #12]
 8004b30:	9202      	str	r2, [sp, #8]
 8004b32:	9501      	str	r5, [sp, #4]
 8004b34:	2201      	movs	r2, #1
 8004b36:	9200      	str	r2, [sp, #0]
 8004b38:	4623      	mov	r3, r4
 8004b3a:	f000 f9c1 	bl	8004ec0 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8004b3e:	4620      	mov	r0, r4
 8004b40:	b005      	add	sp, #20
 8004b42:	bd30      	pop	{r4, r5, pc}

08004b44 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8004b44:	b530      	push	{r4, r5, lr}
 8004b46:	b085      	sub	sp, #20
 8004b48:	460c      	mov	r4, r1
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8004b50:	f890 531d 	ldrb.w	r5, [r0, #797]	; 0x31d
 8004b54:	b105      	cbz	r5, 8004b58 <USBH_BulkSendData+0x14>
  {
    do_ping = 0U;
 8004b56:	2300      	movs	r3, #0
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004b58:	9303      	str	r3, [sp, #12]
 8004b5a:	9202      	str	r2, [sp, #8]
 8004b5c:	9401      	str	r4, [sp, #4]
 8004b5e:	2301      	movs	r3, #1
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2302      	movs	r3, #2
 8004b64:	2200      	movs	r2, #0
 8004b66:	f000 f9ab 	bl	8004ec0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	b005      	add	sp, #20
 8004b6e:	bd30      	pop	{r4, r5, pc}

08004b70 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8004b70:	b530      	push	{r4, r5, lr}
 8004b72:	b085      	sub	sp, #20
 8004b74:	460d      	mov	r5, r1
 8004b76:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8004b78:	2400      	movs	r4, #0
 8004b7a:	9403      	str	r4, [sp, #12]
 8004b7c:	9202      	str	r2, [sp, #8]
 8004b7e:	9501      	str	r5, [sp, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	9200      	str	r2, [sp, #0]
 8004b84:	2302      	movs	r3, #2
 8004b86:	f000 f99b 	bl	8004ec0 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	b005      	add	sp, #20
 8004b8e:	bd30      	pop	{r4, r5, pc}

08004b90 <USBH_GetFreePipe>:
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b0f      	cmp	r3, #15
 8004b94:	d80c      	bhi.n	8004bb0 <USBH_GetFreePipe+0x20>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004b96:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8004b9a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b9e:	6852      	ldr	r2, [r2, #4]
 8004ba0:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004ba4:	d002      	beq.n	8004bac <USBH_GetFreePipe+0x1c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	e7f2      	b.n	8004b92 <USBH_GetFreePipe+0x2>
    {
      return (uint16_t)idx;
 8004bac:	b298      	uxth	r0, r3
 8004bae:	4770      	bx	lr
    }
  }

  return 0xFFFFU;
 8004bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8004bb4:	4770      	bx	lr

08004bb6 <USBH_OpenPipe>:
{
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	b084      	sub	sp, #16
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004bba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004bbe:	9402      	str	r4, [sp, #8]
 8004bc0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004bc4:	9401      	str	r4, [sp, #4]
 8004bc6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004bca:	9400      	str	r4, [sp, #0]
 8004bcc:	f000 f95d 	bl	8004e8a <USBH_LL_OpenPipe>
}
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	b004      	add	sp, #16
 8004bd4:	bd10      	pop	{r4, pc}

08004bd6 <USBH_ClosePipe>:
{
 8004bd6:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8004bd8:	f000 f96a 	bl	8004eb0 <USBH_LL_ClosePipe>
}
 8004bdc:	2000      	movs	r0, #0
 8004bde:	bd08      	pop	{r3, pc}

08004be0 <USBH_AllocPipe>:
{
 8004be0:	b538      	push	{r3, r4, r5, lr}
 8004be2:	4604      	mov	r4, r0
 8004be4:	460d      	mov	r5, r1
  pipe =  USBH_GetFreePipe(phost);
 8004be6:	f7ff ffd3 	bl	8004b90 <USBH_GetFreePipe>
  if (pipe != 0xFFFFU)
 8004bea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004bee:	4298      	cmp	r0, r3
 8004bf0:	d007      	beq.n	8004c02 <USBH_AllocPipe+0x22>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8004bf2:	f000 030f 	and.w	r3, r0, #15
 8004bf6:	f445 4500 	orr.w	r5, r5, #32768	; 0x8000
 8004bfa:	33e0      	adds	r3, #224	; 0xe0
 8004bfc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004c00:	6065      	str	r5, [r4, #4]
}
 8004c02:	b2c0      	uxtb	r0, r0
 8004c04:	bd38      	pop	{r3, r4, r5, pc}

08004c06 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8004c06:	290f      	cmp	r1, #15
 8004c08:	d806      	bhi.n	8004c18 <USBH_FreePipe+0x12>
    phost->Pipes[idx] &= 0x7FFFU;
 8004c0a:	31e0      	adds	r1, #224	; 0xe0
 8004c0c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8004c10:	6843      	ldr	r3, [r0, #4]
 8004c12:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004c16:	6043      	str	r3, [r0, #4]
}
 8004c18:	2000      	movs	r0, #0
 8004c1a:	4770      	bx	lr

08004c1c <USBH_UserProcess>:
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8004c1c:	2904      	cmp	r1, #4
 8004c1e:	d00c      	beq.n	8004c3a <USBH_UserProcess+0x1e>
 8004c20:	2905      	cmp	r1, #5
 8004c22:	d002      	beq.n	8004c2a <USBH_UserProcess+0xe>
 8004c24:	2902      	cmp	r1, #2
 8004c26:	d004      	beq.n	8004c32 <USBH_UserProcess+0x16>

  default:
  break;
  }
  /* USER CODE END CALL_BACK_1 */
}
 8004c28:	4770      	bx	lr
  Appli_state = APPLICATION_DISCONNECT;
 8004c2a:	4b06      	ldr	r3, [pc, #24]	; (8004c44 <USBH_UserProcess+0x28>)
 8004c2c:	2203      	movs	r2, #3
 8004c2e:	701a      	strb	r2, [r3, #0]
  break;
 8004c30:	4770      	bx	lr
  Appli_state = APPLICATION_READY;
 8004c32:	4b04      	ldr	r3, [pc, #16]	; (8004c44 <USBH_UserProcess+0x28>)
 8004c34:	2202      	movs	r2, #2
 8004c36:	701a      	strb	r2, [r3, #0]
  break;
 8004c38:	4770      	bx	lr
  Appli_state = APPLICATION_START;
 8004c3a:	4b02      	ldr	r3, [pc, #8]	; (8004c44 <USBH_UserProcess+0x28>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
}
 8004c40:	e7f2      	b.n	8004c28 <USBH_UserProcess+0xc>
 8004c42:	bf00      	nop
 8004c44:	20000194 	.word	0x20000194

08004c48 <MX_USB_HOST_Init>:
{
 8004c48:	b508      	push	{r3, lr}
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	490b      	ldr	r1, [pc, #44]	; (8004c7c <MX_USB_HOST_Init+0x34>)
 8004c4e:	480c      	ldr	r0, [pc, #48]	; (8004c80 <MX_USB_HOST_Init+0x38>)
 8004c50:	f7ff fa2a 	bl	80040a8 <USBH_Init>
 8004c54:	b948      	cbnz	r0, 8004c6a <MX_USB_HOST_Init+0x22>
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8004c56:	490b      	ldr	r1, [pc, #44]	; (8004c84 <MX_USB_HOST_Init+0x3c>)
 8004c58:	4809      	ldr	r0, [pc, #36]	; (8004c80 <MX_USB_HOST_Init+0x38>)
 8004c5a:	f7ff fa44 	bl	80040e6 <USBH_RegisterClass>
 8004c5e:	b938      	cbnz	r0, 8004c70 <MX_USB_HOST_Init+0x28>
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8004c60:	4807      	ldr	r0, [pc, #28]	; (8004c80 <MX_USB_HOST_Init+0x38>)
 8004c62:	f7ff fa85 	bl	8004170 <USBH_Start>
 8004c66:	b930      	cbnz	r0, 8004c76 <MX_USB_HOST_Init+0x2e>
}
 8004c68:	bd08      	pop	{r3, pc}
    Error_Handler();
 8004c6a:	f7fc f825 	bl	8000cb8 <Error_Handler>
 8004c6e:	e7f2      	b.n	8004c56 <MX_USB_HOST_Init+0xe>
    Error_Handler();
 8004c70:	f7fc f822 	bl	8000cb8 <Error_Handler>
 8004c74:	e7f4      	b.n	8004c60 <MX_USB_HOST_Init+0x18>
    Error_Handler();
 8004c76:	f7fc f81f 	bl	8000cb8 <Error_Handler>
}
 8004c7a:	e7f5      	b.n	8004c68 <MX_USB_HOST_Init+0x20>
 8004c7c:	08004c1d 	.word	0x08004c1d
 8004c80:	20000198 	.word	0x20000198
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <MX_USB_HOST_Process>:
{
 8004c88:	b508      	push	{r3, lr}
  USBH_Process(&hUsbHostFS);
 8004c8a:	4802      	ldr	r0, [pc, #8]	; (8004c94 <MX_USB_HOST_Process+0xc>)
 8004c8c:	f7ff fa7a 	bl	8004184 <USBH_Process>
}
 8004c90:	bd08      	pop	{r3, pc}
 8004c92:	bf00      	nop
 8004c94:	20000198 	.word	0x20000198

08004c98 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8004c98:	b570      	push	{r4, r5, r6, lr}
 8004c9a:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	9303      	str	r3, [sp, #12]
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	9305      	str	r3, [sp, #20]
 8004ca4:	9306      	str	r3, [sp, #24]
 8004ca6:	9307      	str	r3, [sp, #28]
  if(hcdHandle->Instance==USB_OTG_FS)
 8004ca8:	6803      	ldr	r3, [r0, #0]
 8004caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cae:	d001      	beq.n	8004cb4 <HAL_HCD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8004cb0:	b008      	add	sp, #32
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb4:	2500      	movs	r5, #0
 8004cb6:	9501      	str	r5, [sp, #4]
 8004cb8:	4c1a      	ldr	r4, [pc, #104]	; (8004d24 <HAL_HCD_MspInit+0x8c>)
 8004cba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	6323      	str	r3, [r4, #48]	; 0x30
 8004cc2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	9301      	str	r3, [sp, #4]
 8004cca:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8004ccc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cd0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8004cd2:	4e15      	ldr	r6, [pc, #84]	; (8004d28 <HAL_HCD_MspInit+0x90>)
 8004cd4:	a903      	add	r1, sp, #12
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7fc fb3c 	bl	8001354 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8004cdc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004ce0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ce8:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004cea:	230a      	movs	r3, #10
 8004cec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cee:	a903      	add	r1, sp, #12
 8004cf0:	4630      	mov	r0, r6
 8004cf2:	f7fc fb2f 	bl	8001354 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004cf6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cfc:	6363      	str	r3, [r4, #52]	; 0x34
 8004cfe:	9502      	str	r5, [sp, #8]
 8004d00:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d06:	6463      	str	r3, [r4, #68]	; 0x44
 8004d08:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d0e:	9302      	str	r3, [sp, #8]
 8004d10:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8004d12:	462a      	mov	r2, r5
 8004d14:	4629      	mov	r1, r5
 8004d16:	2043      	movs	r0, #67	; 0x43
 8004d18:	f7fc fac2 	bl	80012a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8004d1c:	2043      	movs	r0, #67	; 0x43
 8004d1e:	f7fc faf7 	bl	8001310 <HAL_NVIC_EnableIRQ>
}
 8004d22:	e7c5      	b.n	8004cb0 <HAL_HCD_MspInit+0x18>
 8004d24:	40023800 	.word	0x40023800
 8004d28:	40020000 	.word	0x40020000

08004d2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d2c:	b508      	push	{r3, lr}
  USBH_LL_IncTimer(hhcd->pData);
 8004d2e:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8004d32:	f7ff fb71 	bl	8004418 <USBH_LL_IncTimer>
}
 8004d36:	bd08      	pop	{r3, pc}

08004d38 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d38:	b508      	push	{r3, lr}
  USBH_LL_Connect(hhcd->pData);
 8004d3a:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8004d3e:	f7ff fb7c 	bl	800443a <USBH_LL_Connect>
}
 8004d42:	bd08      	pop	{r3, pc}

08004d44 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d44:	b508      	push	{r3, lr}
  USBH_LL_Disconnect(hhcd->pData);
 8004d46:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8004d4a:	f7ff fb80 	bl	800444e <USBH_LL_Disconnect>
}
 8004d4e:	bd08      	pop	{r3, pc}

08004d50 <HAL_HCD_HC_NotifyURBChange_Callback>:
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8004d50:	4770      	bx	lr

08004d52 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d52:	b508      	push	{r3, lr}
  USBH_LL_PortEnabled(hhcd->pData);
 8004d54:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8004d58:	f7ff fb67 	bl	800442a <USBH_LL_PortEnabled>
}
 8004d5c:	bd08      	pop	{r3, pc}

08004d5e <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004d5e:	b508      	push	{r3, lr}
  USBH_LL_PortDisabled(hhcd->pData);
 8004d60:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8004d64:	f7ff fb65 	bl	8004432 <USBH_LL_PortDisabled>
}
 8004d68:	bd08      	pop	{r3, pc}
	...

08004d6c <USBH_LL_Init>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8004d6c:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d001      	beq.n	8004d78 <USBH_LL_Init+0xc>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
  }
  return USBH_OK;
}
 8004d74:	2000      	movs	r0, #0
 8004d76:	4770      	bx	lr
{
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
  hhcd_USB_OTG_FS.pData = phost;
 8004d7c:	480f      	ldr	r0, [pc, #60]	; (8004dbc <USBH_LL_Init+0x50>)
 8004d7e:	f8c0 4300 	str.w	r4, [r0, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8004d82:	f8c4 03d0 	str.w	r0, [r4, #976]	; 0x3d0
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d86:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004d8a:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8004d8c:	2308      	movs	r3, #8
 8004d8e:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8004d90:	2301      	movs	r3, #1
 8004d92:	60c3      	str	r3, [r0, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8004d98:	2202      	movs	r2, #2
 8004d9a:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d9c:	61c3      	str	r3, [r0, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8004d9e:	f7fc fc7d 	bl	800169c <HAL_HCD_Init>
 8004da2:	b940      	cbnz	r0, 8004db6 <USBH_LL_Init+0x4a>
  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8004da4:	4805      	ldr	r0, [pc, #20]	; (8004dbc <USBH_LL_Init+0x50>)
 8004da6:	f7fd f970 	bl	800208a <HAL_HCD_GetCurrentFrame>
 8004daa:	4601      	mov	r1, r0
 8004dac:	4620      	mov	r0, r4
 8004dae:	f7ff fb30 	bl	8004412 <USBH_LL_SetTimer>
}
 8004db2:	2000      	movs	r0, #0
 8004db4:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8004db6:	f7fb ff7f 	bl	8000cb8 <Error_Handler>
 8004dba:	e7f3      	b.n	8004da4 <USBH_LL_Init+0x38>
 8004dbc:	20000570 	.word	0x20000570

08004dc0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8004dc0:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8004dc2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004dc6:	f7fd f965 	bl	8002094 <HAL_HCD_GetCurrentSpeed>
 8004dca:	2801      	cmp	r0, #1
 8004dcc:	d004      	beq.n	8004dd8 <USBH_LL_GetSpeed+0x18>
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d004      	beq.n	8004ddc <USBH_LL_GetSpeed+0x1c>
 8004dd2:	b100      	cbz	r0, 8004dd6 <USBH_LL_GetSpeed+0x16>
  case 2 :
    speed = USBH_SPEED_LOW;
    break;

  default:
   speed = USBH_SPEED_FULL;
 8004dd4:	2001      	movs	r0, #1
    break;
  }
  return  speed;
}
 8004dd6:	bd08      	pop	{r3, pc}
    speed = USBH_SPEED_FULL;
 8004dd8:	2001      	movs	r0, #1
 8004dda:	e7fc      	b.n	8004dd6 <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;
 8004ddc:	2002      	movs	r0, #2
 8004dde:	e7fa      	b.n	8004dd6 <USBH_LL_GetSpeed+0x16>

08004de0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004de0:	b508      	push	{r3, lr}
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8004de2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004de6:	f7fd f94b 	bl	8002080 <HAL_HCD_HC_GetXferCount>
}
 8004dea:	bd08      	pop	{r3, pc}

08004dec <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8004dec:	b508      	push	{r3, lr}
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8004dee:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004df2:	f7fd f93f 	bl	8002074 <HAL_HCD_HC_GetURBState>
}
 8004df6:	bd08      	pop	{r3, pc}

08004df8 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8004df8:	b508      	push	{r3, lr}
  if (phost->id == HOST_FS) {
 8004dfa:	f890 33cc 	ldrb.w	r3, [r0, #972]	; 0x3cc
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d004      	beq.n	8004e0c <USBH_LL_DriverVBUS+0x14>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8004e02:	20c8      	movs	r0, #200	; 0xc8
 8004e04:	f7fc fa26 	bl	8001254 <HAL_Delay>
  return USBH_OK;
}
 8004e08:	2000      	movs	r0, #0
 8004e0a:	bd08      	pop	{r3, pc}
    MX_DriverVbusFS(state);
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	f000 f86d 	bl	8004eec <MX_DriverVbusFS>
 8004e12:	e7f6      	b.n	8004e02 <USBH_LL_DriverVBUS+0xa>

08004e14 <USBH_LL_SetToggle>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8004e14:	f8d0 33d0 	ldr.w	r3, [r0, #976]	; 0x3d0

  if(pHandle->hc[pipe].ep_is_in)
 8004e18:	202c      	movs	r0, #44	; 0x2c
 8004e1a:	fb00 3001 	mla	r0, r0, r1, r3
 8004e1e:	f890 003b 	ldrb.w	r0, [r0, #59]	; 0x3b
 8004e22:	b130      	cbz	r0, 8004e32 <USBH_LL_SetToggle+0x1e>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8004e24:	202c      	movs	r0, #44	; 0x2c
 8004e26:	fb00 3101 	mla	r1, r0, r1, r3
 8004e2a:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8004e2e:	2000      	movs	r0, #0
 8004e30:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8004e32:	202c      	movs	r0, #44	; 0x2c
 8004e34:	fb00 3101 	mla	r1, r0, r1, r3
 8004e38:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 8004e3c:	e7f7      	b.n	8004e2e <USBH_LL_SetToggle+0x1a>

08004e3e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8004e3e:	b508      	push	{r3, lr}
  HAL_Delay(Delay);
 8004e40:	f7fc fa08 	bl	8001254 <HAL_Delay>
}
 8004e44:	bd08      	pop	{r3, pc}

08004e46 <USBH_Get_USB_Status>:
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBH_StatusTypeDef usb_status = USBH_OK;

  switch (hal_status)
 8004e46:	2802      	cmp	r0, #2
 8004e48:	d805      	bhi.n	8004e56 <USBH_Get_USB_Status+0x10>
 8004e4a:	e8df f000 	tbb	[pc, r0]
 8004e4e:	0405      	.short	0x0405
 8004e50:	02          	.byte	0x02
 8004e51:	00          	.byte	0x00
    break;
    case HAL_ERROR :
      usb_status = USBH_FAIL;
    break;
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8004e52:	2001      	movs	r0, #1
    break;
 8004e54:	4770      	bx	lr
      usb_status = USBH_FAIL;
 8004e56:	2002      	movs	r0, #2
    default :
      usb_status = USBH_FAIL;
    break;
  }
  return usb_status;
}
 8004e58:	4770      	bx	lr

08004e5a <USBH_LL_Start>:
{
 8004e5a:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Start(phost->pData);
 8004e5c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004e60:	f7fd f8dc 	bl	800201c <HAL_HCD_Start>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004e64:	f7ff ffef 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004e68:	bd08      	pop	{r3, pc}

08004e6a <USBH_LL_Stop>:
{
 8004e6a:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_Stop(phost->pData);
 8004e6c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004e70:	f7fd f8e9 	bl	8002046 <HAL_HCD_Stop>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004e74:	f7ff ffe7 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004e78:	bd08      	pop	{r3, pc}

08004e7a <USBH_LL_ResetPort>:
{
 8004e7a:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_ResetPort(phost->pData);
 8004e7c:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004e80:	f7fd f8f3 	bl	800206a <HAL_HCD_ResetPort>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004e84:	f7ff ffdf 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004e88:	bd08      	pop	{r3, pc}

08004e8a <USBH_LL_OpenPipe>:
{
 8004e8a:	b510      	push	{r4, lr}
 8004e8c:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8004e8e:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004e92:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004e96:	9402      	str	r4, [sp, #8]
 8004e98:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004e9c:	9401      	str	r4, [sp, #4]
 8004e9e:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004ea2:	9400      	str	r4, [sp, #0]
 8004ea4:	f7fc fba1 	bl	80015ea <HAL_HCD_HC_Init>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004ea8:	f7ff ffcd 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004eac:	b004      	add	sp, #16
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <USBH_LL_ClosePipe>:
{
 8004eb0:	b508      	push	{r3, lr}
  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8004eb2:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004eb6:	f7fc fbdf 	bl	8001678 <HAL_HCD_HC_Halt>
  usb_status = USBH_Get_USB_Status(hal_status);
 8004eba:	f7ff ffc4 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004ebe:	bd08      	pop	{r3, pc}

08004ec0 <USBH_LL_SubmitURB>:
{
 8004ec0:	b510      	push	{r4, lr}
 8004ec2:	b084      	sub	sp, #16
  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8004ec4:	f8d0 03d0 	ldr.w	r0, [r0, #976]	; 0x3d0
 8004ec8:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8004ecc:	9403      	str	r4, [sp, #12]
 8004ece:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8004ed2:	9402      	str	r4, [sp, #8]
 8004ed4:	9c07      	ldr	r4, [sp, #28]
 8004ed6:	9401      	str	r4, [sp, #4]
 8004ed8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004edc:	9400      	str	r4, [sp, #0]
 8004ede:	f7fc fc2f 	bl	8001740 <HAL_HCD_HC_SubmitRequest>
  usb_status =  USBH_Get_USB_Status(hal_status);
 8004ee2:	f7ff ffb0 	bl	8004e46 <USBH_Get_USB_Status>
}
 8004ee6:	b004      	add	sp, #16
 8004ee8:	bd10      	pop	{r4, pc}
	...

08004eec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8004eec:	b508      	push	{r3, lr}
  uint8_t data = state;
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8004eee:	4602      	mov	r2, r0
 8004ef0:	b100      	cbz	r0, 8004ef4 <MX_DriverVbusFS+0x8>
    data = GPIO_PIN_RESET;
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8004ef2:	2201      	movs	r2, #1
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8004ef4:	2101      	movs	r1, #1
 8004ef6:	4802      	ldr	r0, [pc, #8]	; (8004f00 <MX_DriverVbusFS+0x14>)
 8004ef8:	f7fc fb22 	bl	8001540 <HAL_GPIO_WritePin>
}
 8004efc:	bd08      	pop	{r3, pc}
 8004efe:	bf00      	nop
 8004f00:	40020800 	.word	0x40020800

08004f04 <malloc>:
 8004f04:	4b02      	ldr	r3, [pc, #8]	; (8004f10 <malloc+0xc>)
 8004f06:	4601      	mov	r1, r0
 8004f08:	6818      	ldr	r0, [r3, #0]
 8004f0a:	f000 b82b 	b.w	8004f64 <_malloc_r>
 8004f0e:	bf00      	nop
 8004f10:	20000078 	.word	0x20000078

08004f14 <free>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	; (8004f20 <free+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f000 b8f3 	b.w	8005104 <_free_r>
 8004f1e:	bf00      	nop
 8004f20:	20000078 	.word	0x20000078

08004f24 <sbrk_aligned>:
 8004f24:	b570      	push	{r4, r5, r6, lr}
 8004f26:	4e0e      	ldr	r6, [pc, #56]	; (8004f60 <sbrk_aligned+0x3c>)
 8004f28:	460c      	mov	r4, r1
 8004f2a:	6831      	ldr	r1, [r6, #0]
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	b911      	cbnz	r1, 8004f36 <sbrk_aligned+0x12>
 8004f30:	f000 f8ac 	bl	800508c <_sbrk_r>
 8004f34:	6030      	str	r0, [r6, #0]
 8004f36:	4621      	mov	r1, r4
 8004f38:	4628      	mov	r0, r5
 8004f3a:	f000 f8a7 	bl	800508c <_sbrk_r>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d00a      	beq.n	8004f58 <sbrk_aligned+0x34>
 8004f42:	1cc4      	adds	r4, r0, #3
 8004f44:	f024 0403 	bic.w	r4, r4, #3
 8004f48:	42a0      	cmp	r0, r4
 8004f4a:	d007      	beq.n	8004f5c <sbrk_aligned+0x38>
 8004f4c:	1a21      	subs	r1, r4, r0
 8004f4e:	4628      	mov	r0, r5
 8004f50:	f000 f89c 	bl	800508c <_sbrk_r>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d101      	bne.n	8004f5c <sbrk_aligned+0x38>
 8004f58:	f04f 34ff 	mov.w	r4, #4294967295
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	bd70      	pop	{r4, r5, r6, pc}
 8004f60:	20000878 	.word	0x20000878

08004f64 <_malloc_r>:
 8004f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f68:	1ccd      	adds	r5, r1, #3
 8004f6a:	f025 0503 	bic.w	r5, r5, #3
 8004f6e:	3508      	adds	r5, #8
 8004f70:	2d0c      	cmp	r5, #12
 8004f72:	bf38      	it	cc
 8004f74:	250c      	movcc	r5, #12
 8004f76:	2d00      	cmp	r5, #0
 8004f78:	4607      	mov	r7, r0
 8004f7a:	db01      	blt.n	8004f80 <_malloc_r+0x1c>
 8004f7c:	42a9      	cmp	r1, r5
 8004f7e:	d905      	bls.n	8004f8c <_malloc_r+0x28>
 8004f80:	230c      	movs	r3, #12
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	2600      	movs	r6, #0
 8004f86:	4630      	mov	r0, r6
 8004f88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005060 <_malloc_r+0xfc>
 8004f90:	f000 f868 	bl	8005064 <__malloc_lock>
 8004f94:	f8d8 3000 	ldr.w	r3, [r8]
 8004f98:	461c      	mov	r4, r3
 8004f9a:	bb5c      	cbnz	r4, 8004ff4 <_malloc_r+0x90>
 8004f9c:	4629      	mov	r1, r5
 8004f9e:	4638      	mov	r0, r7
 8004fa0:	f7ff ffc0 	bl	8004f24 <sbrk_aligned>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	4604      	mov	r4, r0
 8004fa8:	d155      	bne.n	8005056 <_malloc_r+0xf2>
 8004faa:	f8d8 4000 	ldr.w	r4, [r8]
 8004fae:	4626      	mov	r6, r4
 8004fb0:	2e00      	cmp	r6, #0
 8004fb2:	d145      	bne.n	8005040 <_malloc_r+0xdc>
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	d048      	beq.n	800504a <_malloc_r+0xe6>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	4631      	mov	r1, r6
 8004fbc:	4638      	mov	r0, r7
 8004fbe:	eb04 0903 	add.w	r9, r4, r3
 8004fc2:	f000 f863 	bl	800508c <_sbrk_r>
 8004fc6:	4581      	cmp	r9, r0
 8004fc8:	d13f      	bne.n	800504a <_malloc_r+0xe6>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	1a6d      	subs	r5, r5, r1
 8004fce:	4629      	mov	r1, r5
 8004fd0:	4638      	mov	r0, r7
 8004fd2:	f7ff ffa7 	bl	8004f24 <sbrk_aligned>
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	d037      	beq.n	800504a <_malloc_r+0xe6>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	442b      	add	r3, r5
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d038      	beq.n	800505a <_malloc_r+0xf6>
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	42a2      	cmp	r2, r4
 8004fec:	d12b      	bne.n	8005046 <_malloc_r+0xe2>
 8004fee:	2200      	movs	r2, #0
 8004ff0:	605a      	str	r2, [r3, #4]
 8004ff2:	e00f      	b.n	8005014 <_malloc_r+0xb0>
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	1b52      	subs	r2, r2, r5
 8004ff8:	d41f      	bmi.n	800503a <_malloc_r+0xd6>
 8004ffa:	2a0b      	cmp	r2, #11
 8004ffc:	d917      	bls.n	800502e <_malloc_r+0xca>
 8004ffe:	1961      	adds	r1, r4, r5
 8005000:	42a3      	cmp	r3, r4
 8005002:	6025      	str	r5, [r4, #0]
 8005004:	bf18      	it	ne
 8005006:	6059      	strne	r1, [r3, #4]
 8005008:	6863      	ldr	r3, [r4, #4]
 800500a:	bf08      	it	eq
 800500c:	f8c8 1000 	streq.w	r1, [r8]
 8005010:	5162      	str	r2, [r4, r5]
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	4638      	mov	r0, r7
 8005016:	f104 060b 	add.w	r6, r4, #11
 800501a:	f000 f829 	bl	8005070 <__malloc_unlock>
 800501e:	f026 0607 	bic.w	r6, r6, #7
 8005022:	1d23      	adds	r3, r4, #4
 8005024:	1af2      	subs	r2, r6, r3
 8005026:	d0ae      	beq.n	8004f86 <_malloc_r+0x22>
 8005028:	1b9b      	subs	r3, r3, r6
 800502a:	50a3      	str	r3, [r4, r2]
 800502c:	e7ab      	b.n	8004f86 <_malloc_r+0x22>
 800502e:	42a3      	cmp	r3, r4
 8005030:	6862      	ldr	r2, [r4, #4]
 8005032:	d1dd      	bne.n	8004ff0 <_malloc_r+0x8c>
 8005034:	f8c8 2000 	str.w	r2, [r8]
 8005038:	e7ec      	b.n	8005014 <_malloc_r+0xb0>
 800503a:	4623      	mov	r3, r4
 800503c:	6864      	ldr	r4, [r4, #4]
 800503e:	e7ac      	b.n	8004f9a <_malloc_r+0x36>
 8005040:	4634      	mov	r4, r6
 8005042:	6876      	ldr	r6, [r6, #4]
 8005044:	e7b4      	b.n	8004fb0 <_malloc_r+0x4c>
 8005046:	4613      	mov	r3, r2
 8005048:	e7cc      	b.n	8004fe4 <_malloc_r+0x80>
 800504a:	230c      	movs	r3, #12
 800504c:	603b      	str	r3, [r7, #0]
 800504e:	4638      	mov	r0, r7
 8005050:	f000 f80e 	bl	8005070 <__malloc_unlock>
 8005054:	e797      	b.n	8004f86 <_malloc_r+0x22>
 8005056:	6025      	str	r5, [r4, #0]
 8005058:	e7dc      	b.n	8005014 <_malloc_r+0xb0>
 800505a:	605b      	str	r3, [r3, #4]
 800505c:	deff      	udf	#255	; 0xff
 800505e:	bf00      	nop
 8005060:	20000874 	.word	0x20000874

08005064 <__malloc_lock>:
 8005064:	4801      	ldr	r0, [pc, #4]	; (800506c <__malloc_lock+0x8>)
 8005066:	f000 b84b 	b.w	8005100 <__retarget_lock_acquire_recursive>
 800506a:	bf00      	nop
 800506c:	200009b8 	.word	0x200009b8

08005070 <__malloc_unlock>:
 8005070:	4801      	ldr	r0, [pc, #4]	; (8005078 <__malloc_unlock+0x8>)
 8005072:	f000 b846 	b.w	8005102 <__retarget_lock_release_recursive>
 8005076:	bf00      	nop
 8005078:	200009b8 	.word	0x200009b8

0800507c <memset>:
 800507c:	4402      	add	r2, r0
 800507e:	4603      	mov	r3, r0
 8005080:	4293      	cmp	r3, r2
 8005082:	d100      	bne.n	8005086 <memset+0xa>
 8005084:	4770      	bx	lr
 8005086:	f803 1b01 	strb.w	r1, [r3], #1
 800508a:	e7f9      	b.n	8005080 <memset+0x4>

0800508c <_sbrk_r>:
 800508c:	b538      	push	{r3, r4, r5, lr}
 800508e:	4d06      	ldr	r5, [pc, #24]	; (80050a8 <_sbrk_r+0x1c>)
 8005090:	2300      	movs	r3, #0
 8005092:	4604      	mov	r4, r0
 8005094:	4608      	mov	r0, r1
 8005096:	602b      	str	r3, [r5, #0]
 8005098:	f7fc f832 	bl	8001100 <_sbrk>
 800509c:	1c43      	adds	r3, r0, #1
 800509e:	d102      	bne.n	80050a6 <_sbrk_r+0x1a>
 80050a0:	682b      	ldr	r3, [r5, #0]
 80050a2:	b103      	cbz	r3, 80050a6 <_sbrk_r+0x1a>
 80050a4:	6023      	str	r3, [r4, #0]
 80050a6:	bd38      	pop	{r3, r4, r5, pc}
 80050a8:	200009b4 	.word	0x200009b4

080050ac <__errno>:
 80050ac:	4b01      	ldr	r3, [pc, #4]	; (80050b4 <__errno+0x8>)
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	20000078 	.word	0x20000078

080050b8 <__libc_init_array>:
 80050b8:	b570      	push	{r4, r5, r6, lr}
 80050ba:	4d0d      	ldr	r5, [pc, #52]	; (80050f0 <__libc_init_array+0x38>)
 80050bc:	4c0d      	ldr	r4, [pc, #52]	; (80050f4 <__libc_init_array+0x3c>)
 80050be:	1b64      	subs	r4, r4, r5
 80050c0:	10a4      	asrs	r4, r4, #2
 80050c2:	2600      	movs	r6, #0
 80050c4:	42a6      	cmp	r6, r4
 80050c6:	d109      	bne.n	80050dc <__libc_init_array+0x24>
 80050c8:	4d0b      	ldr	r5, [pc, #44]	; (80050f8 <__libc_init_array+0x40>)
 80050ca:	4c0c      	ldr	r4, [pc, #48]	; (80050fc <__libc_init_array+0x44>)
 80050cc:	f000 f866 	bl	800519c <_init>
 80050d0:	1b64      	subs	r4, r4, r5
 80050d2:	10a4      	asrs	r4, r4, #2
 80050d4:	2600      	movs	r6, #0
 80050d6:	42a6      	cmp	r6, r4
 80050d8:	d105      	bne.n	80050e6 <__libc_init_array+0x2e>
 80050da:	bd70      	pop	{r4, r5, r6, pc}
 80050dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80050e0:	4798      	blx	r3
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7ee      	b.n	80050c4 <__libc_init_array+0xc>
 80050e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ea:	4798      	blx	r3
 80050ec:	3601      	adds	r6, #1
 80050ee:	e7f2      	b.n	80050d6 <__libc_init_array+0x1e>
 80050f0:	080051d8 	.word	0x080051d8
 80050f4:	080051d8 	.word	0x080051d8
 80050f8:	080051d8 	.word	0x080051d8
 80050fc:	080051dc 	.word	0x080051dc

08005100 <__retarget_lock_acquire_recursive>:
 8005100:	4770      	bx	lr

08005102 <__retarget_lock_release_recursive>:
 8005102:	4770      	bx	lr

08005104 <_free_r>:
 8005104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005106:	2900      	cmp	r1, #0
 8005108:	d044      	beq.n	8005194 <_free_r+0x90>
 800510a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800510e:	9001      	str	r0, [sp, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	f1a1 0404 	sub.w	r4, r1, #4
 8005116:	bfb8      	it	lt
 8005118:	18e4      	addlt	r4, r4, r3
 800511a:	f7ff ffa3 	bl	8005064 <__malloc_lock>
 800511e:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <_free_r+0x94>)
 8005120:	9801      	ldr	r0, [sp, #4]
 8005122:	6813      	ldr	r3, [r2, #0]
 8005124:	b933      	cbnz	r3, 8005134 <_free_r+0x30>
 8005126:	6063      	str	r3, [r4, #4]
 8005128:	6014      	str	r4, [r2, #0]
 800512a:	b003      	add	sp, #12
 800512c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005130:	f7ff bf9e 	b.w	8005070 <__malloc_unlock>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d908      	bls.n	800514a <_free_r+0x46>
 8005138:	6825      	ldr	r5, [r4, #0]
 800513a:	1961      	adds	r1, r4, r5
 800513c:	428b      	cmp	r3, r1
 800513e:	bf01      	itttt	eq
 8005140:	6819      	ldreq	r1, [r3, #0]
 8005142:	685b      	ldreq	r3, [r3, #4]
 8005144:	1949      	addeq	r1, r1, r5
 8005146:	6021      	streq	r1, [r4, #0]
 8005148:	e7ed      	b.n	8005126 <_free_r+0x22>
 800514a:	461a      	mov	r2, r3
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b10b      	cbz	r3, 8005154 <_free_r+0x50>
 8005150:	42a3      	cmp	r3, r4
 8005152:	d9fa      	bls.n	800514a <_free_r+0x46>
 8005154:	6811      	ldr	r1, [r2, #0]
 8005156:	1855      	adds	r5, r2, r1
 8005158:	42a5      	cmp	r5, r4
 800515a:	d10b      	bne.n	8005174 <_free_r+0x70>
 800515c:	6824      	ldr	r4, [r4, #0]
 800515e:	4421      	add	r1, r4
 8005160:	1854      	adds	r4, r2, r1
 8005162:	42a3      	cmp	r3, r4
 8005164:	6011      	str	r1, [r2, #0]
 8005166:	d1e0      	bne.n	800512a <_free_r+0x26>
 8005168:	681c      	ldr	r4, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	6053      	str	r3, [r2, #4]
 800516e:	440c      	add	r4, r1
 8005170:	6014      	str	r4, [r2, #0]
 8005172:	e7da      	b.n	800512a <_free_r+0x26>
 8005174:	d902      	bls.n	800517c <_free_r+0x78>
 8005176:	230c      	movs	r3, #12
 8005178:	6003      	str	r3, [r0, #0]
 800517a:	e7d6      	b.n	800512a <_free_r+0x26>
 800517c:	6825      	ldr	r5, [r4, #0]
 800517e:	1961      	adds	r1, r4, r5
 8005180:	428b      	cmp	r3, r1
 8005182:	bf04      	itt	eq
 8005184:	6819      	ldreq	r1, [r3, #0]
 8005186:	685b      	ldreq	r3, [r3, #4]
 8005188:	6063      	str	r3, [r4, #4]
 800518a:	bf04      	itt	eq
 800518c:	1949      	addeq	r1, r1, r5
 800518e:	6021      	streq	r1, [r4, #0]
 8005190:	6054      	str	r4, [r2, #4]
 8005192:	e7ca      	b.n	800512a <_free_r+0x26>
 8005194:	b003      	add	sp, #12
 8005196:	bd30      	pop	{r4, r5, pc}
 8005198:	20000874 	.word	0x20000874

0800519c <_init>:
 800519c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800519e:	bf00      	nop
 80051a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051a2:	bc08      	pop	{r3}
 80051a4:	469e      	mov	lr, r3
 80051a6:	4770      	bx	lr

080051a8 <_fini>:
 80051a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051aa:	bf00      	nop
 80051ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051ae:	bc08      	pop	{r3}
 80051b0:	469e      	mov	lr, r3
 80051b2:	4770      	bx	lr
